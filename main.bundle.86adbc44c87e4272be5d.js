(()=>{"use strict";var e,t,r,n={4655:(e,t,r)=>{var n=r(7294),a=r(745),o=r(9655),l=r(9250),i=r(3379),c=r.n(i),u=r(7795),s=r.n(u),f=r(569),m=r.n(f),p=r(3565),d=r.n(p),h=r(9216),g=r.n(h),v=r(4589),y=r.n(v),A=r(5681),b={};b.styleTagTransform=y(),b.setAttributes=d(),b.insert=m().bind(null,"head"),b.domAPI=s(),b.insertStyleElement=g(),c()(A.Z,b),A.Z&&A.Z.locals&&A.Z.locals;var E=r(1508),w=r(3351),x=r(2658);function j(e){var t=e.graphError;return n.createElement(E.Z,{display:"flex",justifyContent:"center",alignItems:"center",minHeight:"98vh"},n.createElement(w.Z,{alignItems:"center"},n.createElement(x.Z,{variant:"h3",gutterBottom:!0},"Loading Error :("),n.createElement(x.Z,{variant:"body1",gutterBottom:!0},t.message)))}var C=r(9062);function I(){return n.createElement(E.Z,{display:"flex",justifyContent:"center",alignItems:"center",minHeight:"98vh"},n.createElement(w.Z,{alignItems:"center"},n.createElement(x.Z,{variant:"h3",gutterBottom:!0},"Loading"),n.createElement(C.Z,{color:"warning"})))}r(1080);var S=r(8925),k=r(9939),O=r(3289),Z=r(4361),B=r(2307),T=r(1458),_=r(5343),M=r(6235),P=r(6660),N=r(2810),H={};function L(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function U(e){var t,r,a=e.graph,o=(t=(0,n.useState)(null),r=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,o,l,i=[],c=!0,u=!1;try{if(o=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=o.call(r)).done)&&(i.push(n.value),i.length!==t);c=!0);}catch(e){u=!0,a=e}finally{try{if(!c&&null!=r.return&&(l=r.return(),Object(l)!==l))return}finally{if(u)throw a}}return i}}(t,r)||function(e,t){if(e){if("string"==typeof e)return L(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?L(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=o[0],i=o[1],c=(0,S.$j)();return(0,n.useEffect)((function(){c({clickNode:function(e){return i(e.node)},enterNode:function(e){return i(e.node)},leaveNode:function(){return i(null)},clickStage:function(){return i(null)}})}),[c]),null===l?n.createElement("div",{className:"info"},n.createElement("h4",null,"Twitch Chat Atlas ",n.createElement("br",null)," 22-28 July 2023"),n.createElement("a",{href:"https://www.twitch.tv/connoreatspants",target:"_blank",rel:"noreferrer"},"twitch.tv/connoreatspants"),n.createElement("p",null,a.nodes().length," total chatters")):n.createElement("div",{className:"info"},n.createElement("h4",null,a.getNodeAttribute(l,"label")),n.createElement("p",null,a.getNodeAttribute(l,0)," total messages"))}function $(e){var t=e.graph,r=(0,S.p0)(),a=r.isFullScreen,o=r.toggle,i=(0,S.AH)().reset,c=(0,l.oQ)();return n.createElement(n.Fragment,null,a?null:n.createElement(S.k2,{position:"top-left"},n.createElement(S.lD,{style:{width:"150px"}})),n.createElement(S.k2,{position:"top-right"},n.createElement(U,{graph:t})),n.createElement(S.k2,{position:"bottom-right"},n.createElement("div",{className:"react-sigma-control"},n.createElement(P.Z,{onClick:function(){window.location.hash="/"}},n.createElement(O.Z,{style:{marginTop:"2px"}}))),n.createElement("div",{className:"react-sigma-control"},n.createElement(P.Z,{onClick:function(){"#/yifan"!==c&&(window.location.hash="/yifan")}},n.createElement(T.Z,{style:{marginTop:"2px"}}))),n.createElement("div",{className:"react-sigma-control"},n.createElement(P.Z,{onClick:function(){"#/reingold"!==c&&(window.location.hash="/reingold")}},n.createElement(B.Z,{style:{marginTop:"2px"}}))),n.createElement("div",{className:"react-sigma-control"}),n.createElement("div",{className:"react-sigma-control","aria-label":"reset"},n.createElement(P.Z,{onClick:i},n.createElement(Z.Z,{style:{marginTop:"2px"}}))),n.createElement("div",{className:"react-sigma-control"},n.createElement(P.Z,{onClick:o,"aria-label":"full-screen"},a?n.createElement(M.Z,{style:{marginTop:"2px"}}):n.createElement(_.Z,{style:{marginTop:"2px"}})))))}function z(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,o,l,i=[],c=!0,u=!1;try{if(o=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=o.call(r)).done)&&(i.push(n.value),i.length!==t);c=!0);}catch(e){u=!0,a=e}finally{try{if(!c&&null!=r.return&&(l=r.return(),Object(l)!==l))return}finally{if(u)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return D(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?D(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function D(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}H.styleTagTransform=y(),H.setAttributes=d(),H.insert=m().bind(null,"head"),H.domAPI=s(),H.insertStyleElement=g(),c()(N.Z,H),N.Z&&N.Z.locals&&N.Z.locals;var F=function(e){var t=new k.ZP;return t.import(e),t.forEachEdge((function(e,r,n,a,o,l){var i=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.5,n=z(e.match(/\w\w/g).map((function(e){return parseInt(e,16)})),3),a=n[0],o=n[1],l=n[2],i=z(t.match(/\w\w/g).map((function(e){return parseInt(e,16)})),3),c=i[0],u=i[1],s=i[2],f=Math.round(a+(c-a)*r).toString(16).padStart(2,"0"),m=Math.round(o+(u-o)*r).toString(16).padStart(2,"0"),p=Math.round(l+(s-l)*r).toString(16).padStart(2,"0");return"#".concat(f).concat(m).concat(p)}(o.color,l.color),c=function(e,t){var r=e.replace("#",""),n=parseInt(r,16),a=50+(n>>16);a=Math.min(Math.max(a,0),255);var o=50+(255&n);o=Math.min(Math.max(o,0),255);var l=50+(n>>8&255);return l=Math.min(Math.max(l,0),255),"#".concat((o|l<<8|a<<16).toString(16))}(i);t.updateEdgeAttribute(e,"color",(function(){return c}))})),t};function G(e){var t=e.graphData,r=F(t);return n.createElement(S.C6,{style:{height:"98vh"},graph:r,settings:{labelRenderedSizeThreshold:1}},n.createElement($,{graph:r}))}function R(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,o,l,i=[],c=!0,u=!1;try{if(o=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=o.call(r)).done)&&(i.push(n.value),i.length!==t);c=!0);}catch(e){u=!0,a=e}finally{try{if(!c&&null!=r.return&&(l=r.return(),Object(l)!==l))return}finally{if(u)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return W(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?W(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function W(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function Y(e){var t=e.graphPath,r=R((0,n.useState)({}),2),a=r[0],o=r[1],l=R((0,n.useState)(!0),2),i=l[0],c=l[1],u=R((0,n.useState)(null),2),s=u[0],f=u[1];return(0,n.useEffect)((function(){c(!0),fetch(t).then((function(e){return e.json()})).then((function(e){o(e),c(!1)})).catch((function(e){console.log("Error loading graph:",e),f(e)}))}),[t]),null!==s?n.createElement(j,{graphError:s}):i?n.createElement(I,null):n.createElement(G,{graphData:a})}function J(){return n.createElement(l.Z5,null,n.createElement(l.AW,{path:"reingold",element:n.createElement(Y,{graphPath:"data-reingold.json"})}),n.createElement(l.AW,{path:"yifan",element:n.createElement(Y,{graphPath:"data-yifan-hu.json"})}),n.createElement(l.AW,{path:"*",element:n.createElement(Y,{graphPath:"data-force-atlas.json"})}))}var Q=document.getElementById("root");(0,a.s)(Q).render(n.createElement(o.UT,null,n.createElement(J,null)))},5681:(e,t,r)=>{r.d(t,{Z:()=>i});var n=r(7537),a=r.n(n),o=r(3645),l=r.n(o)()(a());l.push([e.id,"h1 {\n    font:\n        28px/32px Arial,\n        Helvetica,\n        sans-serif;\n    overflow-wrap: break-word;\n}\n\np {\n    font:\n        14px/16px Arial,\n        Helvetica,\n        sans-serif;\n    overflow-wrap: break-word;\n}\n","",{version:3,sources:["webpack://./src/components/ErrorPage.css"],names:[],mappings:"AAAA;IACI;;;kBAGc;IACd,yBAAyB;AAC7B;;AAEA;IACI;;;kBAGc;IACd,yBAAyB;AAC7B",sourcesContent:["h1 {\r\n    font:\r\n        28px/32px Arial,\r\n        Helvetica,\r\n        sans-serif;\r\n    overflow-wrap: break-word;\r\n}\r\n\r\np {\r\n    font:\r\n        14px/16px Arial,\r\n        Helvetica,\r\n        sans-serif;\r\n    overflow-wrap: break-word;\r\n}\r\n"],sourceRoot:""}]);const i=l},2810:(e,t,r)=>{r.d(t,{Z:()=>i});var n=r(7537),a=r.n(n),o=r(3645),l=r.n(o)()(a());l.push([e.id,".info {\n    font:\n        14px/16px Arial,\n        Helvetica,\n        sans-serif;\n    background: white;\n    background: rgba(255, 255, 255, 0.8);\n    width: 150px;\n    margin: 0 10px 20px 10px;\n    overflow-wrap: break-word;\n}\n\na {\n    font-size: 13px;\n}\n\na:visited {\n    color: LinkText;\n}\n","",{version:3,sources:["webpack://./src/components/SigmaInfoControl.css"],names:[],mappings:"AAAA;IACI;;;kBAGc;IACd,iBAAiB;IACjB,oCAAoC;IACpC,YAAY;IACZ,wBAAwB;IACxB,yBAAyB;AAC7B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB",sourcesContent:[".info {\r\n    font:\r\n        14px/16px Arial,\r\n        Helvetica,\r\n        sans-serif;\r\n    background: white;\r\n    background: rgba(255, 255, 255, 0.8);\r\n    width: 150px;\r\n    margin: 0 10px 20px 10px;\r\n    overflow-wrap: break-word;\r\n}\r\n\r\na {\r\n    font-size: 13px;\r\n}\r\n\r\na:visited {\r\n    color: LinkText;\r\n}\r\n"],sourceRoot:""}]);const i=l}},a={};function o(e){var t=a[e];if(void 0!==t)return t.exports;var r=a[e]={id:e,loaded:!1,exports:{}};return n[e].call(r.exports,r,r.exports,o),r.loaded=!0,r.exports}o.m=n,e=[],o.O=(t,r,n,a)=>{if(!r){var l=1/0;for(s=0;s<e.length;s++){for(var[r,n,a]=e[s],i=!0,c=0;c<r.length;c++)(!1&a||l>=a)&&Object.keys(o.O).every((e=>o.O[e](r[c])))?r.splice(c--,1):(i=!1,a<l&&(l=a));if(i){e.splice(s--,1);var u=n();void 0!==u&&(t=u)}}return t}a=a||0;for(var s=e.length;s>0&&e[s-1][2]>a;s--)e[s]=e[s-1];e[s]=[r,n,a]},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},r=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(e,n){if(1&n&&(e=this(e)),8&n)return e;if("object"==typeof e&&e){if(4&n&&e.__esModule)return e;if(16&n&&"function"==typeof e.then)return e}var a=Object.create(null);o.r(a);var l={};t=t||[null,r({}),r([]),r(r)];for(var i=2&n&&e;"object"==typeof i&&!~t.indexOf(i);i=r(i))Object.getOwnPropertyNames(i).forEach((t=>l[t]=()=>e[t]));return l.default=()=>e,o.d(a,l),a},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e={179:0};o.O.j=t=>0===e[t];var t=(t,r)=>{var n,a,[l,i,c]=r,u=0;if(l.some((t=>0!==e[t]))){for(n in i)o.o(i,n)&&(o.m[n]=i[n]);if(c)var s=c(o)}for(t&&t(r);u<l.length;u++)a=l[u],o.o(e,a)&&e[a]&&e[a][0](),e[a]=0;return o.O(s)},r=self.webpackChunktwitch_chat_atlas_react=self.webpackChunktwitch_chat_atlas_react||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})(),o.nc=void 0;var l=o.O(void 0,[571],(()=>o(4655)));l=o.O(l)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,