/*! For license information please see main.bundle.2534f52d5e8a888eb6a6.js.LICENSE.txt */
(()=>{var e,t,n={6751:(e,t,n)=>{"use strict";n.d(t,{Z:()=>re});var r=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),i=Math.abs,o=String.fromCharCode,a=Object.assign;function s(e){return e.trim()}function u(e,t,n){return e.replace(t,n)}function l(e,t){return e.indexOf(t)}function c(e,t){return 0|e.charCodeAt(t)}function d(e,t,n){return e.slice(t,n)}function f(e){return e.length}function h(e){return e.length}function p(e,t){return t.push(e),e}var g=1,m=1,y=0,v=0,b=0,w="";function _(e,t,n,r,i,o,a){return{value:e,root:t,parent:n,type:r,props:i,children:o,line:g,column:m,length:a,return:""}}function x(e,t){return a(_("",null,null,"",null,null,0),e,{length:-e.length},t)}function k(){return b=v>0?c(w,--v):0,m--,10===b&&(m=1,g--),b}function E(){return b=v<y?c(w,v++):0,m++,10===b&&(m=1,g++),b}function S(){return c(w,v)}function C(){return v}function A(e,t){return d(w,e,t)}function R(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function P(e){return g=m=1,y=f(w=e),v=0,[]}function T(e){return w="",e}function L(e){return s(A(v-1,N(91===e?e+2:40===e?e+1:e)))}function O(e){for(;(b=S())&&b<33;)E();return R(e)>2||R(b)>3?"":" "}function M(e,t){for(;--t&&E()&&!(b<48||b>102||b>57&&b<65||b>70&&b<97););return A(e,C()+(t<6&&32==S()&&32==E()))}function N(e){for(;E();)switch(b){case e:return v;case 34:case 39:34!==e&&39!==e&&N(b);break;case 40:41===e&&N(e);break;case 92:E()}return v}function z(e,t){for(;E()&&e+b!==57&&(e+b!==84||47!==S()););return"/*"+A(t,v-1)+"*"+o(47===e?e:E())}function F(e){for(;!R(S());)E();return A(e,v)}var D="-ms-",$="-moz-",j="-webkit-",I="comm",G="rule",B="decl",U="@keyframes";function Z(e,t){for(var n="",r=h(e),i=0;i<r;i++)n+=t(e[i],i,e,t)||"";return n}function W(e,t,n,r){switch(e.type){case"@layer":if(e.children.length)break;case"@import":case B:return e.return=e.return||e.value;case I:return"";case U:return e.return=e.value+"{"+Z(e.children,r)+"}";case G:e.value=e.props.join(",")}return f(n=Z(e.children,r))?e.return=e.value+"{"+n+"}":""}function H(e){return T(V("",null,null,null,[""],e=P(e),0,[0],e))}function V(e,t,n,r,i,a,s,d,h){for(var g=0,m=0,y=s,v=0,b=0,w=0,_=1,x=1,A=1,R=0,P="",T=i,N=a,D=r,$=P;x;)switch(w=R,R=E()){case 40:if(108!=w&&58==c($,y-1)){-1!=l($+=u(L(R),"&","&\f"),"&\f")&&(A=-1);break}case 34:case 39:case 91:$+=L(R);break;case 9:case 10:case 13:case 32:$+=O(w);break;case 92:$+=M(C()-1,7);continue;case 47:switch(S()){case 42:case 47:p(K(z(E(),C()),t,n),h);break;default:$+="/"}break;case 123*_:d[g++]=f($)*A;case 125*_:case 59:case 0:switch(R){case 0:case 125:x=0;case 59+m:-1==A&&($=u($,/\f/g,"")),b>0&&f($)-y&&p(b>32?Y($+";",r,n,y-1):Y(u($," ","")+";",r,n,y-2),h);break;case 59:$+=";";default:if(p(D=q($,t,n,g,m,i,d,P,T=[],N=[],y),a),123===R)if(0===m)V($,t,D,D,T,a,y,d,N);else switch(99===v&&110===c($,3)?100:v){case 100:case 108:case 109:case 115:V(e,D,D,r&&p(q(e,D,D,0,0,i,d,P,i,T=[],y),N),i,N,y,d,r?T:N);break;default:V($,D,D,D,[""],N,0,d,N)}}g=m=b=0,_=A=1,P=$="",y=s;break;case 58:y=1+f($),b=w;default:if(_<1)if(123==R)--_;else if(125==R&&0==_++&&125==k())continue;switch($+=o(R),R*_){case 38:A=m>0?1:($+="\f",-1);break;case 44:d[g++]=(f($)-1)*A,A=1;break;case 64:45===S()&&($+=L(E())),v=S(),m=y=f(P=$+=F(C())),R++;break;case 45:45===w&&2==f($)&&(_=0)}}return a}function q(e,t,n,r,o,a,l,c,f,p,g){for(var m=o-1,y=0===o?a:[""],v=h(y),b=0,w=0,x=0;b<r;++b)for(var k=0,E=d(e,m+1,m=i(w=l[b])),S=e;k<v;++k)(S=s(w>0?y[k]+" "+E:u(E,/&\f/g,y[k])))&&(f[x++]=S);return _(e,t,n,0===o?G:c,f,p,g)}function K(e,t,n){return _(e,t,n,I,o(b),d(e,2,-2),0)}function Y(e,t,n,r){return _(e,t,n,B,d(e,0,r),d(e,r+1,-1),r)}var Q=function(e,t,n){for(var r=0,i=0;r=i,i=S(),38===r&&12===i&&(t[n]=1),!R(i);)E();return A(e,v)},X=new WeakMap,J=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||X.get(n))&&!r){X.set(e,!0);for(var i=[],a=function(e,t){return T(function(e,t){var n=-1,r=44;do{switch(R(r)){case 0:38===r&&12===S()&&(t[n]=1),e[n]+=Q(v-1,t,n);break;case 2:e[n]+=L(r);break;case 4:if(44===r){e[++n]=58===S()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=o(r)}}while(r=E());return e}(P(e),t))}(t,i),s=n.props,u=0,l=0;u<a.length;u++)for(var c=0;c<s.length;c++,l++)e.props[l]=i[u]?a[u].replace(/&\f/g,s[c]):s[c]+" "+a[u]}}},ee=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function te(e,t){switch(function(e,t){return 45^c(e,0)?(((t<<2^c(e,0))<<2^c(e,1))<<2^c(e,2))<<2^c(e,3):0}(e,t)){case 5103:return j+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return j+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return j+e+$+e+D+e+e;case 6828:case 4268:return j+e+D+e+e;case 6165:return j+e+D+"flex-"+e+e;case 5187:return j+e+u(e,/(\w+).+(:[^]+)/,j+"box-$1$2"+D+"flex-$1$2")+e;case 5443:return j+e+D+"flex-item-"+u(e,/flex-|-self/,"")+e;case 4675:return j+e+D+"flex-line-pack"+u(e,/align-content|flex-|-self/,"")+e;case 5548:return j+e+D+u(e,"shrink","negative")+e;case 5292:return j+e+D+u(e,"basis","preferred-size")+e;case 6060:return j+"box-"+u(e,"-grow","")+j+e+D+u(e,"grow","positive")+e;case 4554:return j+u(e,/([^-])(transform)/g,"$1"+j+"$2")+e;case 6187:return u(u(u(e,/(zoom-|grab)/,j+"$1"),/(image-set)/,j+"$1"),e,"")+e;case 5495:case 3959:return u(e,/(image-set\([^]*)/,j+"$1$`$1");case 4968:return u(u(e,/(.+:)(flex-)?(.*)/,j+"box-pack:$3"+D+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+j+e+e;case 4095:case 3583:case 4068:case 2532:return u(e,/(.+)-inline(.+)/,j+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(f(e)-1-t>6)switch(c(e,t+1)){case 109:if(45!==c(e,t+4))break;case 102:return u(e,/(.+:)(.+)-([^]+)/,"$1"+j+"$2-$3$1"+$+(108==c(e,t+3)?"$3":"$2-$3"))+e;case 115:return~l(e,"stretch")?te(u(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==c(e,t+1))break;case 6444:switch(c(e,f(e)-3-(~l(e,"!important")&&10))){case 107:return u(e,":",":"+j)+e;case 101:return u(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+j+(45===c(e,14)?"inline-":"")+"box$3$1"+j+"$2$3$1"+D+"$2box$3")+e}break;case 5936:switch(c(e,t+11)){case 114:return j+e+D+u(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return j+e+D+u(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return j+e+D+u(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return j+e+D+e+e}return e}var ne=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case B:e.return=te(e.value,e.length);break;case U:return Z([x(e,{value:u(e.value,"@","@"+j)})],r);case G:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return Z([x(e,{props:[u(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return Z([x(e,{props:[u(t,/:(plac\w+)/,":"+j+"input-$1")]}),x(e,{props:[u(t,/:(plac\w+)/,":-moz-$1")]}),x(e,{props:[u(t,/:(plac\w+)/,D+"input-$1")]})],r)}return""}))}}],re=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var i,o,a=e.stylisPlugins||ne,s={},u=[];i=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)s[t[n]]=!0;u.push(e)}));var l,c,d,f,p=[W,(f=function(e){l.insert(e)},function(e){e.root||(e=e.return)&&f(e)})],g=(c=[J,ee].concat(a,p),d=h(c),function(e,t,n,r){for(var i="",o=0;o<d;o++)i+=c[o](e,t,n,r)||"";return i});o=function(e,t,n,r){l=n,Z(H(e?e+"{"+t.styles+"}":t.styles),g),r&&(m.inserted[t.name]=!0)};var m={key:t,sheet:new r({key:t,container:i,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:s,registered:{},insert:o};return m.sheet.hydrate(u),m}},5042:(e,t,n)=>{"use strict";function r(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}n.d(t,{Z:()=>r})},5260:(e,t,n)=>{"use strict";n.d(t,{T:()=>s,w:()=>a});var r=n(7294),i=n(6751),o=(n(6797),n(7278),r.createContext("undefined"!=typeof HTMLElement?(0,i.Z)({key:"css"}):null));o.Provider;var a=function(e){return(0,r.forwardRef)((function(t,n){var i=(0,r.useContext)(o);return e(t,i,n)}))},s=r.createContext({})},6797:(e,t,n)=>{"use strict";n.d(t,{O:()=>p});var r={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},i=n(5042),o=/[A-Z]|^ms/g,a=/_EMO_([^_]+?)_([^]*?)_EMO_/g,s=function(e){return 45===e.charCodeAt(1)},u=function(e){return null!=e&&"boolean"!=typeof e},l=(0,i.Z)((function(e){return s(e)?e:e.replace(o,"-$&").toLowerCase()})),c=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(a,(function(e,t,n){return f={name:t,styles:n,next:f},t}))}return 1===r[e]||s(e)||"number"!=typeof t||0===t?t:t+"px"};function d(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return f={name:n.name,styles:n.styles,next:f},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)f={name:r.name,styles:r.styles,next:f},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var i=0;i<n.length;i++)r+=d(e,t,n[i])+";";else for(var o in n){var a=n[o];if("object"!=typeof a)null!=t&&void 0!==t[a]?r+=o+"{"+t[a]+"}":u(a)&&(r+=l(o)+":"+c(o,a)+";");else if(!Array.isArray(a)||"string"!=typeof a[0]||null!=t&&void 0!==t[a[0]]){var s=d(e,t,a);switch(o){case"animation":case"animationName":r+=l(o)+":"+s+";";break;default:r+=o+"{"+s+"}"}}else for(var f=0;f<a.length;f++)u(a[f])&&(r+=l(o)+":"+c(o,a[f])+";")}return r}(e,t,n);case"function":if(void 0!==e){var i=f,o=n(e);return f=i,d(e,t,o)}}if(null==t)return n;var a=t[n];return void 0!==a?a:n}var f,h=/label:\s*([^\s;\n{]+)\s*(;|$)/g,p=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,i="";f=void 0;var o=e[0];null==o||void 0===o.raw?(r=!1,i+=d(n,t,o)):i+=o[0];for(var a=1;a<e.length;a++)i+=d(n,t,e[a]),r&&(i+=o[a]);h.lastIndex=0;for(var s,u="";null!==(s=h.exec(i));)u+="-"+s[1];var l=function(e){for(var t,n=0,r=0,i=e.length;i>=4;++r,i-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(i){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(i)+u;return{name:l,styles:i,next:f}}},7278:(e,t,n)=>{"use strict";var r;n.d(t,{L:()=>a});var i=n(7294),o=!!(r||(r=n.t(i,2))).useInsertionEffect&&(r||(r=n.t(i,2))).useInsertionEffect,a=o||function(e){return e()};o||i.useLayoutEffect},3289:(e,t,n)=>{"use strict";var r=n(4836);t.Z=void 0;var i=r(n(4938)),o=n(5893),a=(0,i.default)((0,o.jsx)("path",{d:"M10.43 18.75c.37-.46.94-.75 1.57-.75.63 0 1.19.29 1.56.75.39-.09.76-.21 1.12-.36l-1.42-3.18c-.39.15-.82.23-1.26.23-.46 0-.9-.09-1.3-.25l-1.43 3.19c.38.16.76.29 1.16.37zM5.15 10c-.16.59-.25 1.21-.25 1.85 0 .75.12 1.47.33 2.15.63.05 1.22.4 1.56.99.33.57.35 1.23.11 1.79.27.27.56.53.87.76l1.52-3.39c-.47-.58-.75-1.32-.75-2.13 0-1.89 1.55-3.41 3.46-3.41s3.46 1.53 3.46 3.41c0 .82-.29 1.57-.78 2.16l1.5 3.35c.32-.24.62-.5.9-.79-.22-.55-.2-1.2.12-1.75.33-.57.9-.92 1.52-.99.22-.68.34-1.41.34-2.16 0-.64-.09-1.27-.25-1.86-.64-.04-1.26-.39-1.6-1-.36-.62-.35-1.36-.03-1.95-.91-.98-2.1-1.71-3.44-2.05C13.39 5.6 12.74 6 12 6s-1.39-.41-1.74-1.01c-1.34.34-2.53 1.05-3.44 2.03.33.6.35 1.35-.02 1.98-.35.62-.99.97-1.65 1zm-1.3-.42c-.78-.6-1.02-1.7-.51-2.58.51-.88 1.58-1.23 2.49-.85 1.11-1.17 2.56-2.03 4.18-2.42C10.15 2.75 10.99 2 12 2s1.85.75 1.98 1.73c1.63.39 3.07 1.24 4.18 2.42.91-.38 1.99-.03 2.49.85.51.88.27 1.98-.51 2.58.23.77.35 1.58.35 2.42s-.12 1.65-.35 2.42c.78.6 1.02 1.7.51 2.58-.51.88-1.58 1.23-2.49.85-.4.43-.85.81-1.34 1.15l1.34 3H16.3l-.97-2.17c-.43.18-.88.33-1.34.44-.14.98-.98 1.73-1.99 1.73s-1.85-.75-1.98-1.73c-.48-.12-.94-.27-1.38-.46L7.66 22H5.78l1.36-3.03a8.72 8.72 0 0 1-1.3-1.12c-.92.38-1.99.03-2.5-.85s-.27-1.98.51-2.58c-.23-.77-.35-1.58-.35-2.42s.12-1.65.35-2.42z"}),"Attractions");t.Z=a},4361:(e,t,n)=>{"use strict";var r=n(4836);t.Z=void 0;var i=r(n(4938)),o=n(5893),a=(0,i.default)((0,o.jsx)("path",{d:"M12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm-7 7H3v4c0 1.1.9 2 2 2h4v-2H5v-4zM5 5h4V3H5c-1.1 0-2 .9-2 2v4h2V5zm14-2h-4v2h4v4h2V5c0-1.1-.9-2-2-2zm0 16h-4v2h4c1.1 0 2-.9 2-2v-4h-2v4z"}),"CenterFocusStrong");t.Z=a},2307:(e,t,n)=>{"use strict";var r=n(4836);t.Z=void 0;var i=r(n(4938)),o=n(5893),a=(0,i.default)((0,o.jsx)("path",{d:"M21.25 10.5c-.41 0-.75.34-.75.75h-1.54c-.15-1.37-.69-2.63-1.52-3.65l1.09-1.09.01.01c.29.29.77.29 1.06 0s.29-.77 0-1.06L18.54 4.4c-.29-.29-.77-.29-1.06 0-.29.29-.29.76-.01 1.05l-1.09 1.09a7.015 7.015 0 0 0-3.64-1.51V3.5h.01c.41 0 .75-.34.75-.75S13.16 2 12.75 2h-1.5c-.41 0-.75.34-.75.75s.33.74.74.75v1.55c-1.37.14-2.62.69-3.64 1.51L6.51 5.47l.01-.01c.29-.29.29-.77 0-1.06-.29-.29-.77-.29-1.06 0L4.4 5.46c-.29.29-.29.77 0 1.06.29.29.76.29 1.05.01l1.09 1.09c-.82 1.02-1.36 2.26-1.5 3.63H3.5c0-.41-.34-.75-.75-.75s-.75.34-.75.75v1.5c0 .41.34.75.75.75s.75-.34.75-.75h1.54c.15 1.37.69 2.61 1.5 3.63l-1.09 1.09c-.29-.29-.76-.28-1.05.01-.29.29-.29.77 0 1.06l1.06 1.06c.29.29.77.29 1.06 0 .29-.29.29-.77 0-1.06l-.01-.01 1.09-1.09c1.02.82 2.26 1.36 3.63 1.51v1.55c-.41.01-.74.34-.74.75s.34.75.75.75h1.5c.41 0 .75-.34.75-.75s-.34-.75-.75-.75h-.01v-1.54c1.37-.14 2.62-.69 3.64-1.51l1.09 1.09c-.29.29-.28.76.01 1.05.29.29.77.29 1.06 0l1.06-1.06c.29-.29.29-.77 0-1.06-.29-.29-.77-.29-1.06 0l-.01.01-1.09-1.09c.82-1.02 1.37-2.27 1.52-3.65h1.54c0 .41.34.75.75.75s.75-.34.75-.75v-1.5c.01-.4-.33-.74-.74-.74zM13.75 8c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM12 13c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-1.75-5c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM8.5 13c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm1.75 3c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm3.5 0c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm.75-4c0-.55.45-1 1-1s1 .45 1 1-.45 1-1 1-1-.45-1-1z"}),"Coronavirus");t.Z=a},1458:(e,t,n)=>{"use strict";var r=n(4836);t.Z=void 0;var i=r(n(4938)),o=n(5893),a=(0,i.default)((0,o.jsx)("path",{d:"M7 11H1v2h6v-2zm2.17-3.24L7.05 5.64 5.64 7.05l2.12 2.12 1.41-1.41zM13 1h-2v6h2V1zm5.36 6.05-1.41-1.41-2.12 2.12 1.41 1.41 2.12-2.12zM17 11v2h6v-2h-6zm-5-2c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3zm2.83 7.24 2.12 2.12 1.41-1.41-2.12-2.12-1.41 1.41zm-9.19.71 1.41 1.41 2.12-2.12-1.41-1.41-2.12 2.12zM11 23h2v-6h-2v6z"}),"Flare");t.Z=a},5343:(e,t,n)=>{"use strict";var r=n(4836);t.Z=void 0;var i=r(n(4938)),o=n(5893),a=(0,i.default)((0,o.jsx)("path",{d:"M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"}),"Fullscreen");t.Z=a},6235:(e,t,n)=>{"use strict";var r=n(4836);t.Z=void 0;var i=r(n(4938)),o=n(5893),a=(0,i.default)((0,o.jsx)("path",{d:"M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z"}),"FullscreenExit");t.Z=a},4938:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r.createSvgIcon}});var r=n(8522)},9617:(e,t,n)=>{"use strict";n.d(t,{Z:()=>D});var r=n(7462),i=n(3366),o=n(1387),a=n(9766),s=n(6268),u=n(8010),l=n(6523),c=n(1796);const d={black:"#000",white:"#fff"},f={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},h={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"},p={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},g={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},m={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},y={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"},v={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"},b=["mode","contrastThreshold","tonalOffset"],w={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:d.white,default:d.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},_={text:{primary:d.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:d.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function x(e,t,n,r){const i=r.light||r,o=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,c.$n)(e.main,i):"dark"===t&&(e.dark=(0,c._j)(e.main,o)))}const k=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],E={textTransform:"uppercase"},S='"Roboto", "Helvetica", "Arial", sans-serif';function C(e,t){const n="function"==typeof t?t(e):t,{fontFamily:o=S,fontSize:s=14,fontWeightLight:u=300,fontWeightRegular:l=400,fontWeightMedium:c=500,fontWeightBold:d=700,htmlFontSize:f=16,allVariants:h,pxToRem:p}=n,g=(0,i.Z)(n,k),m=s/14,y=p||(e=>e/f*m+"rem"),v=(e,t,n,i,a)=>{return(0,r.Z)({fontFamily:o,fontWeight:e,fontSize:y(t),lineHeight:n},o===S?{letterSpacing:(s=i/t,Math.round(1e5*s)/1e5+"em")}:{},a,h);var s},b={h1:v(u,96,1.167,-1.5),h2:v(u,60,1.2,-.5),h3:v(l,48,1.167,0),h4:v(l,34,1.235,.25),h5:v(l,24,1.334,0),h6:v(c,20,1.6,.15),subtitle1:v(l,16,1.75,.15),subtitle2:v(c,14,1.57,.1),body1:v(l,16,1.5,.15),body2:v(l,14,1.43,.15),button:v(c,14,1.75,.4,E),caption:v(l,12,1.66,.4),overline:v(l,12,2.66,1,E),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return(0,a.Z)((0,r.Z)({htmlFontSize:f,pxToRem:y,fontFamily:o,fontSize:s,fontWeightLight:u,fontWeightRegular:l,fontWeightMedium:c,fontWeightBold:d},b),g,{clone:!1})}function A(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const R=["none",A(0,2,1,-1,0,1,1,0,0,1,3,0),A(0,3,1,-2,0,2,2,0,0,1,5,0),A(0,3,3,-2,0,3,4,0,0,1,8,0),A(0,2,4,-1,0,4,5,0,0,1,10,0),A(0,3,5,-1,0,5,8,0,0,1,14,0),A(0,3,5,-1,0,6,10,0,0,1,18,0),A(0,4,5,-2,0,7,10,1,0,2,16,1),A(0,5,5,-3,0,8,10,1,0,3,14,2),A(0,5,6,-3,0,9,12,1,0,3,16,2),A(0,6,6,-3,0,10,14,1,0,4,18,3),A(0,6,7,-4,0,11,15,1,0,4,20,3),A(0,7,8,-4,0,12,17,2,0,5,22,4),A(0,7,8,-4,0,13,19,2,0,5,24,4),A(0,7,9,-4,0,14,21,2,0,5,26,4),A(0,8,9,-5,0,15,22,2,0,6,28,5),A(0,8,10,-5,0,16,24,2,0,6,30,5),A(0,8,11,-5,0,17,26,2,0,6,32,5),A(0,9,11,-5,0,18,28,2,0,7,34,6),A(0,9,12,-6,0,19,29,2,0,7,36,6),A(0,10,13,-6,0,20,31,3,0,8,38,7),A(0,10,13,-6,0,21,33,3,0,8,40,7),A(0,10,14,-6,0,22,35,3,0,8,42,7),A(0,11,14,-7,0,23,36,3,0,9,44,8),A(0,11,15,-7,0,24,38,3,0,9,46,8)],P=["duration","easing","delay"],T={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},L={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function O(e){return`${Math.round(e)}ms`}function M(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function N(e){const t=(0,r.Z)({},T,e.easing),n=(0,r.Z)({},L,e.duration);return(0,r.Z)({getAutoHeightDuration:M,create:(e=["all"],r={})=>{const{duration:o=n.standard,easing:a=t.easeInOut,delay:s=0}=r;return(0,i.Z)(r,P),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof o?o:O(o)} ${a} ${"string"==typeof s?s:O(s)}`)).join(",")}},e,{easing:t,duration:n})}const z={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},F=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const D=function(e={},...t){const{mixins:n={},palette:k={},transitions:E={},typography:S={}}=e,A=(0,i.Z)(e,F);if(e.vars)throw new Error((0,o.Z)(18));const P=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:s=.2}=e,u=(0,i.Z)(e,b),l=e.primary||function(e="light"){return"dark"===e?{main:m[200],light:m[50],dark:m[400]}:{main:m[700],light:m[400],dark:m[800]}}(t),k=e.secondary||function(e="light"){return"dark"===e?{main:h[200],light:h[50],dark:h[400]}:{main:h[500],light:h[300],dark:h[700]}}(t),E=e.error||function(e="light"){return"dark"===e?{main:p[500],light:p[300],dark:p[700]}:{main:p[700],light:p[400],dark:p[800]}}(t),S=e.info||function(e="light"){return"dark"===e?{main:y[400],light:y[300],dark:y[700]}:{main:y[700],light:y[500],dark:y[900]}}(t),C=e.success||function(e="light"){return"dark"===e?{main:v[400],light:v[300],dark:v[700]}:{main:v[800],light:v[500],dark:v[900]}}(t),A=e.warning||function(e="light"){return"dark"===e?{main:g[400],light:g[300],dark:g[700]}:{main:"#ed6c02",light:g[500],dark:g[900]}}(t);function R(e){return(0,c.mi)(e,_.text.primary)>=n?_.text.primary:w.text.primary}const P=({color:e,name:t,mainShade:n=500,lightShade:i=300,darkShade:a=700})=>{if(!(e=(0,r.Z)({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error((0,o.Z)(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error((0,o.Z)(12,t?` (${t})`:"",JSON.stringify(e.main)));return x(e,"light",i,s),x(e,"dark",a,s),e.contrastText||(e.contrastText=R(e.main)),e},T={dark:_,light:w};return(0,a.Z)((0,r.Z)({common:(0,r.Z)({},d),mode:t,primary:P({color:l,name:"primary"}),secondary:P({color:k,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:P({color:E,name:"error"}),warning:P({color:A,name:"warning"}),info:P({color:S,name:"info"}),success:P({color:C,name:"success"}),grey:f,contrastThreshold:n,getContrastText:R,augmentColor:P,tonalOffset:s},T[t]),u)}(k),T=(0,s.Z)(e);let L=(0,a.Z)(T,{mixins:(O=T.breakpoints,M=n,(0,r.Z)({toolbar:{minHeight:56,[O.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[O.up("sm")]:{minHeight:64}}},M)),palette:P,shadows:R.slice(),typography:C(P,S),transitions:N(E),zIndex:(0,r.Z)({},z)});var O,M;return L=(0,a.Z)(L,A),L=t.reduce(((e,t)=>(0,a.Z)(e,t)),L),L.unstable_sxConfig=(0,r.Z)({},u.Z,null==A?void 0:A.unstable_sxConfig),L.unstable_sx=function(e){return(0,l.Z)({sx:e,theme:this})},L}},247:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=(0,n(9617).Z)()},606:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r="$$material"},948:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>a});var r=n(2807),i=n(247),o=n(606);const a=(0,r.ZP)({themeId:o.Z,defaultTheme:i.Z,rootShouldForwardProp:e=>(0,r.x9)(e)&&"classes"!==e})},1657:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(8805),i=n(247),o=n(606);function a({props:e,name:t}){return(0,r.Z)({props:e,name:t,defaultTheme:i.Z,themeId:o.Z})}},8216:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(4142).Z},8522:(e,t,n)=>{"use strict";n.r(t),n.d(t,{capitalize:()=>i.Z,createChainedFunction:()=>o,createSvgIcon:()=>x,debounce:()=>k,deprecatedPropType:()=>E,isMuiElement:()=>S,ownerDocument:()=>A,ownerWindow:()=>R,requirePropFactory:()=>P,setRef:()=>T,unstable_ClassNameGenerator:()=>I,unstable_useEnhancedEffect:()=>L,unstable_useId:()=>N,unsupportedProp:()=>z,useControlled:()=>F,useEventCallback:()=>D.Z,useForkRef:()=>$.Z,useIsFocusVisible:()=>j.Z});var r=n(7078),i=n(8216);const o=function(...e){return e.reduce(((e,t)=>null==t?e:function(...n){e.apply(this,n),t.apply(this,n)}),(()=>{}))};var a=n(7462),s=n(7294),u=n.t(s,2),l=n(3366),c=n(6010),d=n(4780),f=n(1657),h=n(948),p=n(1588),g=n(4867);function m(e){return(0,g.Z)("MuiSvgIcon",e)}(0,p.Z)("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);var y=n(5893);const v=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],b=(0,h.ZP)("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"inherit"!==n.color&&t[`color${(0,i.Z)(n.color)}`],t[`fontSize${(0,i.Z)(n.fontSize)}`]]}})((({theme:e,ownerState:t})=>{var n,r,i,o,a,s,u,l,c,d,f,h,p;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:t.hasSvgAsChild?void 0:"currentColor",flexShrink:0,transition:null==(n=e.transitions)||null==(r=n.create)?void 0:r.call(n,"fill",{duration:null==(i=e.transitions)||null==(i=i.duration)?void 0:i.shorter}),fontSize:{inherit:"inherit",small:(null==(o=e.typography)||null==(a=o.pxToRem)?void 0:a.call(o,20))||"1.25rem",medium:(null==(s=e.typography)||null==(u=s.pxToRem)?void 0:u.call(s,24))||"1.5rem",large:(null==(l=e.typography)||null==(c=l.pxToRem)?void 0:c.call(l,35))||"2.1875rem"}[t.fontSize],color:null!=(d=null==(f=(e.vars||e).palette)||null==(f=f[t.color])?void 0:f.main)?d:{action:null==(h=(e.vars||e).palette)||null==(h=h.action)?void 0:h.active,disabled:null==(p=(e.vars||e).palette)||null==(p=p.action)?void 0:p.disabled,inherit:void 0}[t.color]}})),w=s.forwardRef((function(e,t){const n=(0,f.Z)({props:e,name:"MuiSvgIcon"}),{children:r,className:o,color:u="inherit",component:h="svg",fontSize:p="medium",htmlColor:g,inheritViewBox:w=!1,titleAccess:_,viewBox:x="0 0 24 24"}=n,k=(0,l.Z)(n,v),E=s.isValidElement(r)&&"svg"===r.type,S=(0,a.Z)({},n,{color:u,component:h,fontSize:p,instanceFontSize:e.fontSize,inheritViewBox:w,viewBox:x,hasSvgAsChild:E}),C={};w||(C.viewBox=x);const A=(e=>{const{color:t,fontSize:n,classes:r}=e,o={root:["root","inherit"!==t&&`color${(0,i.Z)(t)}`,`fontSize${(0,i.Z)(n)}`]};return(0,d.Z)(o,m,r)})(S);return(0,y.jsxs)(b,(0,a.Z)({as:h,className:(0,c.Z)(A.root,o),focusable:"false",color:g,"aria-hidden":!_||void 0,role:_?"img":void 0,ref:t},C,k,E&&r.props,{ownerState:S,children:[E?r.props.children:r,_?(0,y.jsx)("title",{children:_}):null]}))}));w.muiName="SvgIcon";const _=w;function x(e,t){function n(n,r){return(0,y.jsx)(_,(0,a.Z)({"data-testid":`${t}Icon`,ref:r},n,{children:e}))}return n.muiName=_.muiName,s.memo(s.forwardRef(n))}const k=function(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r},E=function(e,t){return()=>null},S=function(e,t){return s.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)};function C(e){return e&&e.ownerDocument||document}const A=C,R=function(e){return C(e).defaultView||window},P=function(e,t){return()=>null},T=n(7960).Z,L=n(3546).Z;let O=0;const M=u["useId".toString()],N=function(e){if(void 0!==M){const t=M();return null!=e?e:t}return function(e){const[t,n]=s.useState(e),r=e||t;return s.useEffect((()=>{null==t&&(O+=1,n(`mui-${O}`))}),[t]),r}(e)},z=function(e,t,n,r,i){return null},F=function({controlled:e,default:t,name:n,state:r="value"}){const{current:i}=s.useRef(void 0!==e),[o,a]=s.useState(t);return[i?e:o,s.useCallback((e=>{i||a(e)}),[])]};var D=n(314),$=n(3731),j=n(3511);const I={configure:e=>{r.Z.configure(e)}}},314:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294),i=n(3546);const o=function(e){const t=r.useRef(e);return(0,i.Z)((()=>{t.current=e})),r.useCallback(((...e)=>(0,t.current)(...e)),[])}},3731:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294),i=n(7960);const o=function(...e){return r.useMemo((()=>e.every((e=>null==e))?null:t=>{e.forEach((e=>{(0,i.Z)(e,t)}))}),e)}},3511:(e,t,n)=>{"use strict";n.d(t,{Z:()=>d});var r=n(7294);let i,o=!0,a=!1;const s={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function u(e){e.metaKey||e.altKey||e.ctrlKey||(o=!0)}function l(){o=!1}function c(){"hidden"===this.visibilityState&&a&&(o=!0)}const d=function(){const e=r.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",u,!0),t.addEventListener("mousedown",l,!0),t.addEventListener("pointerdown",l,!0),t.addEventListener("touchstart",l,!0),t.addEventListener("visibilitychange",c,!0))}),[]),t=r.useRef(!1);return{isFocusVisibleRef:t,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return o||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!s[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(t.current=!0,!0)},onBlur:function(){return!!t.current&&(a=!0,window.clearTimeout(i),i=window.setTimeout((()=>{a=!1}),100),t.current=!1,!0)},ref:e}}},9532:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>v,Co:()=>b});var r=n(7462),i=n(7294),o=n(5042),a=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,s=(0,o.Z)((function(e){return a.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),u=n(5260),l=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},c=n(6797),d=n(7278),f=s,h=function(e){return"theme"!==e},p=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?f:h},g=function(e,t,n){var r;if(t){var i=t.shouldForwardProp;r=e.__emotion_forwardProp&&i?function(t){return e.__emotion_forwardProp(t)&&i(t)}:i}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},m=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return l(t,n,r),(0,d.L)((function(){return function(e,t,n){l(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var i=t;do{e.insert(t===i?"."+r:"",i,e.sheet,!0),i=i.next}while(void 0!==i)}}(t,n,r)})),null},y=function e(t,n){var o,a,s=t.__emotion_real===t,l=s&&t.__emotion_base||t;void 0!==n&&(o=n.label,a=n.target);var d=g(t,n,s),f=d||p(l),h=!f("as");return function(){var y=arguments,v=s&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==o&&v.push("label:"+o+";"),null==y[0]||void 0===y[0].raw)v.push.apply(v,y);else{v.push(y[0][0]);for(var b=y.length,w=1;w<b;w++)v.push(y[w],y[0][w])}var _=(0,u.w)((function(e,t,n){var r,o,s,g,y=h&&e.as||l,b="",w=[],_=e;if(null==e.theme){for(var x in _={},e)_[x]=e[x];_.theme=i.useContext(u.T)}"string"==typeof e.className?(r=t.registered,o=w,s=e.className,g="",s.split(" ").forEach((function(e){void 0!==r[e]?o.push(r[e]+";"):g+=e+" "})),b=g):null!=e.className&&(b=e.className+" ");var k=(0,c.O)(v.concat(w),t.registered,_);b+=t.key+"-"+k.name,void 0!==a&&(b+=" "+a);var E=h&&void 0===d?p(y):f,S={};for(var C in e)h&&"as"===C||E(C)&&(S[C]=e[C]);return S.className=b,S.ref=n,i.createElement(i.Fragment,null,i.createElement(m,{cache:t,serialized:k,isStringTag:"string"==typeof y}),i.createElement(y,S))}));return _.displayName=void 0!==o?o:"Styled("+("string"==typeof l?l:l.displayName||l.name||"Component")+")",_.defaultProps=t.defaultProps,_.__emotion_real=_,_.__emotion_base=l,_.__emotion_styles=v,_.__emotion_forwardProp=d,Object.defineProperty(_,"toString",{value:function(){return"."+a}}),_.withComponent=function(t,i){return e(t,(0,r.Z)({},n,i,{shouldForwardProp:g(_,i,!0)})).apply(void 0,v)},_}}.bind();function v(e,t){return y(e,t)}["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){y[e]=y(e)}));const b=(e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=t(e.__emotion_styles))}},5408:(e,t,n)=>{"use strict";n.d(t,{L7:()=>u,P$:()=>c,VO:()=>i,W8:()=>s,dt:()=>l,k9:()=>a});var r=n(9766);const i={xs:0,sm:600,md:900,lg:1200,xl:1536},o={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${i[e]}px)`};function a(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||o;return t.reduce(((r,i,o)=>(r[e.up(e.keys[o])]=n(t[o]),r)),{})}if("object"==typeof t){const e=r.breakpoints||o;return Object.keys(t).reduce(((r,o)=>{if(-1!==Object.keys(e.values||i).indexOf(o))r[e.up(o)]=n(t[o],o);else{const e=o;r[e]=t[e]}return r}),{})}return n(t)}function s(e={}){var t;return(null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}function u(e,t){return e.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),t)}function l(e,...t){const n=s(e),i=[n,...t].reduce(((e,t)=>(0,r.Z)(e,t)),{});return u(Object.keys(n),i)}function c({values:e,breakpoints:t,base:n}){const r=n||function(e,t){if("object"!=typeof e)return{};const n={},r=Object.keys(t);return Array.isArray(e)?r.forEach(((t,r)=>{r<e.length&&(n[t]=!0)})):r.forEach((t=>{null!=e[t]&&(n[t]=!0)})),n}(e,t),i=Object.keys(r);if(0===i.length)return e;let o;return i.reduce(((t,n,r)=>(Array.isArray(e)?(t[n]=null!=e[r]?e[r]:e[o],o=r):"object"==typeof e?(t[n]=null!=e[n]?e[n]:e[o],o=n):t[n]=e,t)),{})}},1796:(e,t,n)=>{"use strict";n.d(t,{$n:()=>d,Fq:()=>l,_j:()=>c,mi:()=>u});var r=n(1387);function i(e,t=0,n=1){return Math.min(Math.max(t,e),n)}function o(e){if(e.type)return e;if("#"===e.charAt(0))return o(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error((0,r.Z)(9,e));let i,a=e.substring(t+1,e.length-1);if("color"===n){if(a=a.split(" "),i=a.shift(),4===a.length&&"/"===a[3].charAt(0)&&(a[3]=a[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(i))throw new Error((0,r.Z)(10,i))}else a=a.split(",");return a=a.map((e=>parseFloat(e))),{type:n,values:a,colorSpace:i}}function a(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function s(e){let t="hsl"===(e=o(e)).type||"hsla"===e.type?o(function(e){e=o(e);const{values:t}=e,n=t[0],r=t[1]/100,i=t[2]/100,s=r*Math.min(i,1-i),u=(e,t=(e+n/30)%12)=>i-s*Math.max(Math.min(t-3,9-t,1),-1);let l="rgb";const c=[Math.round(255*u(0)),Math.round(255*u(8)),Math.round(255*u(4))];return"hsla"===e.type&&(l+="a",c.push(t[3])),a({type:l,values:c})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function u(e,t){const n=s(e),r=s(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function l(e,t){return e=o(e),t=i(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,a(e)}function c(e,t){if(e=o(e),t=i(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return a(e)}function d(e,t){if(e=o(e),t=i(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return a(e)}},2807:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>b,x9:()=>m});var r=n(3366),i=n(7462),o=n(9532),a=n(6268),s=n(4142);const u=["variant"];function l(e){return 0===e.length}function c(e){const{variant:t}=e,n=(0,r.Z)(e,u);let i=t||"";return Object.keys(n).sort().forEach((t=>{i+="color"===t?l(i)?e[t]:(0,s.Z)(e[t]):`${l(i)?t:(0,s.Z)(t)}${(0,s.Z)(e[t].toString())}`})),i}var d=n(6523);const f=["name","slot","skipVariantsResolver","skipSx","overridesResolver"],h=(e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null,p=(e,t)=>{let n=[];t&&t.components&&t.components[e]&&t.components[e].variants&&(n=t.components[e].variants);const r={};return n.forEach((e=>{const t=c(e.props);r[t]=e.style})),r},g=(e,t,n,r)=>{var i;const{ownerState:o={}}=e,a=[],s=null==n||null==(i=n.components)||null==(i=i[r])?void 0:i.variants;return s&&s.forEach((n=>{let r=!0;Object.keys(n.props).forEach((t=>{o[t]!==n.props[t]&&e[t]!==n.props[t]&&(r=!1)})),r&&a.push(t[c(n.props)])})),a};function m(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const y=(0,a.Z)();function v({defaultTheme:e,theme:t,themeId:n}){return r=t,0===Object.keys(r).length?e:t[n]||t;var r}function b(e={}){const{themeId:t,defaultTheme:n=y,rootShouldForwardProp:a=m,slotShouldForwardProp:s=m}=e,u=e=>(0,d.Z)((0,i.Z)({},e,{theme:v((0,i.Z)({},e,{defaultTheme:n,themeId:t}))}));return u.__mui_systemSx=!0,(e,l={})=>{(0,o.Co)(e,(e=>e.filter((e=>!(null!=e&&e.__mui_systemSx)))));const{name:c,slot:d,skipVariantsResolver:y,skipSx:b,overridesResolver:w}=l,_=(0,r.Z)(l,f),x=void 0!==y?y:d&&"Root"!==d||!1,k=b||!1;let E=m;"Root"===d?E=a:d?E=s:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(E=void 0);const S=(0,o.ZP)(e,(0,i.Z)({shouldForwardProp:E,label:void 0},_)),C=(r,...o)=>{const a=o?o.map((e=>"function"==typeof e&&e.__emotion_real!==e?r=>e((0,i.Z)({},r,{theme:v((0,i.Z)({},r,{defaultTheme:n,themeId:t}))})):e)):[];let s=r;c&&w&&a.push((e=>{const r=v((0,i.Z)({},e,{defaultTheme:n,themeId:t})),o=h(c,r);if(o){const t={};return Object.entries(o).forEach((([n,o])=>{t[n]="function"==typeof o?o((0,i.Z)({},e,{theme:r})):o})),w(e,t)}return null})),c&&!x&&a.push((e=>{const r=v((0,i.Z)({},e,{defaultTheme:n,themeId:t}));return g(e,p(c,r),r,c)})),k||a.push(u);const l=a.length-o.length;if(Array.isArray(r)&&l>0){const e=new Array(l).fill("");s=[...r,...e],s.raw=[...r.raw,...e]}else"function"==typeof r&&r.__emotion_real!==r&&(s=e=>r((0,i.Z)({},e,{theme:v((0,i.Z)({},e,{defaultTheme:n,themeId:t}))})));const d=S(s,...a);return e.muiName&&(d.muiName=e.muiName),d};return S.withConfig&&(C.withConfig=S.withConfig),C}}},6268:(e,t,n)=>{"use strict";n.d(t,{Z:()=>f});var r=n(7462),i=n(3366),o=n(9766);const a=["values","unit","step"],s={borderRadius:4};var u=n(2605),l=n(6523),c=n(8010);const d=["breakpoints","palette","spacing","shape"],f=function(e={},...t){const{breakpoints:n={},palette:f={},spacing:h,shape:p={}}=e,g=(0,i.Z)(e,d),m=function(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:o=5}=e,s=(0,i.Z)(e,a),u=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>(0,r.Z)({},e,{[t.key]:t.val})),{})})(t),l=Object.keys(u);function c(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function d(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-o/100}${n})`}function f(e,r){const i=l.indexOf(r);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==i&&"number"==typeof t[l[i]]?t[l[i]]:r)-o/100}${n})`}return(0,r.Z)({keys:l,values:u,up:c,down:d,between:f,only:function(e){return l.indexOf(e)+1<l.length?f(e,l[l.indexOf(e)+1]):c(e)},not:function(e){const t=l.indexOf(e);return 0===t?c(l[1]):t===l.length-1?d(l[t]):f(e,l[l.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},s)}(n),y=function(e=8){if(e.mui)return e;const t=(0,u.hB)({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}(h);let v=(0,o.Z)({breakpoints:m,direction:"ltr",components:{},palette:(0,r.Z)({mode:"light"},f),spacing:y,shape:(0,r.Z)({},s,p)},g);return v=t.reduce(((e,t)=>(0,o.Z)(e,t)),v),v.unstable_sxConfig=(0,r.Z)({},c.Z,null==g?void 0:g.unstable_sxConfig),v.unstable_sx=function(e){return(0,l.Z)({sx:e,theme:this})},v}},7730:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(9766);const i=function(e,t){return t?(0,r.Z)(e,t,{clone:!1}):e}},2605:(e,t,n)=>{"use strict";n.d(t,{hB:()=>p,eI:()=>h,NA:()=>g,e6:()=>y,o3:()=>v});var r=n(5408),i=n(4844),o=n(7730);const a={m:"margin",p:"padding"},s={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},u={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},l=function(e){const t={};return e=>(void 0===t[e]&&(t[e]=(e=>{if(e.length>2){if(!u[e])return[e];e=u[e]}const[t,n]=e.split(""),r=a[t],i=s[n]||"";return Array.isArray(i)?i.map((e=>r+e)):[r+i]})(e)),t[e])}(),c=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],d=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],f=[...c,...d];function h(e,t,n,r){var o;const a=null!=(o=(0,i.DW)(e,t,!1))?o:n;return"number"==typeof a?e=>"string"==typeof e?e:a*e:Array.isArray(a)?e=>"string"==typeof e?e:a[e]:"function"==typeof a?a:()=>{}}function p(e){return h(e,"spacing",8)}function g(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function m(e,t){const n=p(e.theme);return Object.keys(e).map((i=>function(e,t,n,i){if(-1===t.indexOf(n))return null;const o=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=g(t,n),e)),{})}(l(n),i),a=e[n];return(0,r.k9)(e,a,o)}(e,t,i,n))).reduce(o.Z,{})}function y(e){return m(e,c)}function v(e){return m(e,d)}function b(e){return m(e,f)}y.propTypes={},y.filterProps=c,v.propTypes={},v.filterProps=d,b.propTypes={},b.filterProps=f},4844:(e,t,n)=>{"use strict";n.d(t,{DW:()=>o,Jq:()=>a,ZP:()=>s});var r=n(4142),i=n(5408);function o(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function a(e,t,n,r=n){let i;return i="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:o(e,n)||r,t&&(i=t(i,r,e)),i}const s=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:s,transform:u}=e,l=e=>{if(null==e[t])return null;const l=e[t],c=o(e.theme,s)||{};return(0,i.k9)(e,l,(e=>{let i=a(c,u,e);return e===i&&"string"==typeof e&&(i=a(c,u,`${t}${"default"===e?"":(0,r.Z)(e)}`,e)),!1===n?i:{[n]:i}}))};return l.propTypes={},l.filterProps=[t],l}},8010:(e,t,n)=>{"use strict";n.d(t,{Z:()=>L});var r=n(2605),i=n(4844),o=n(7730);const a=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?(0,o.Z)(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};var s=n(5408);function u(e){return"number"!=typeof e?e:`${e}px solid`}const l=(0,i.ZP)({prop:"border",themeKey:"borders",transform:u}),c=(0,i.ZP)({prop:"borderTop",themeKey:"borders",transform:u}),d=(0,i.ZP)({prop:"borderRight",themeKey:"borders",transform:u}),f=(0,i.ZP)({prop:"borderBottom",themeKey:"borders",transform:u}),h=(0,i.ZP)({prop:"borderLeft",themeKey:"borders",transform:u}),p=(0,i.ZP)({prop:"borderColor",themeKey:"palette"}),g=(0,i.ZP)({prop:"borderTopColor",themeKey:"palette"}),m=(0,i.ZP)({prop:"borderRightColor",themeKey:"palette"}),y=(0,i.ZP)({prop:"borderBottomColor",themeKey:"palette"}),v=(0,i.ZP)({prop:"borderLeftColor",themeKey:"palette"}),b=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=(0,r.eI)(e.theme,"shape.borderRadius",4,"borderRadius"),n=e=>({borderRadius:(0,r.NA)(t,e)});return(0,s.k9)(e,e.borderRadius,n)}return null};b.propTypes={},b.filterProps=["borderRadius"],a(l,c,d,f,h,p,g,m,y,v,b);const w=e=>{if(void 0!==e.gap&&null!==e.gap){const t=(0,r.eI)(e.theme,"spacing",8,"gap"),n=e=>({gap:(0,r.NA)(t,e)});return(0,s.k9)(e,e.gap,n)}return null};w.propTypes={},w.filterProps=["gap"];const _=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=(0,r.eI)(e.theme,"spacing",8,"columnGap"),n=e=>({columnGap:(0,r.NA)(t,e)});return(0,s.k9)(e,e.columnGap,n)}return null};_.propTypes={},_.filterProps=["columnGap"];const x=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=(0,r.eI)(e.theme,"spacing",8,"rowGap"),n=e=>({rowGap:(0,r.NA)(t,e)});return(0,s.k9)(e,e.rowGap,n)}return null};function k(e,t){return"grey"===t?t:e}function E(e){return e<=1&&0!==e?100*e+"%":e}x.propTypes={},x.filterProps=["rowGap"],a(w,_,x,(0,i.ZP)({prop:"gridColumn"}),(0,i.ZP)({prop:"gridRow"}),(0,i.ZP)({prop:"gridAutoFlow"}),(0,i.ZP)({prop:"gridAutoColumns"}),(0,i.ZP)({prop:"gridAutoRows"}),(0,i.ZP)({prop:"gridTemplateColumns"}),(0,i.ZP)({prop:"gridTemplateRows"}),(0,i.ZP)({prop:"gridTemplateAreas"}),(0,i.ZP)({prop:"gridArea"})),a((0,i.ZP)({prop:"color",themeKey:"palette",transform:k}),(0,i.ZP)({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:k}),(0,i.ZP)({prop:"backgroundColor",themeKey:"palette",transform:k}));const S=(0,i.ZP)({prop:"width",transform:E}),C=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n;return{maxWidth:(null==(n=e.theme)||null==(n=n.breakpoints)||null==(n=n.values)?void 0:n[t])||s.VO[t]||E(t)}};return(0,s.k9)(e,e.maxWidth,t)}return null};C.filterProps=["maxWidth"];const A=(0,i.ZP)({prop:"minWidth",transform:E}),R=(0,i.ZP)({prop:"height",transform:E}),P=(0,i.ZP)({prop:"maxHeight",transform:E}),T=(0,i.ZP)({prop:"minHeight",transform:E}),L=((0,i.ZP)({prop:"size",cssProperty:"width",transform:E}),(0,i.ZP)({prop:"size",cssProperty:"height",transform:E}),a(S,C,A,R,P,T,(0,i.ZP)({prop:"boxSizing"})),{border:{themeKey:"borders",transform:u},borderTop:{themeKey:"borders",transform:u},borderRight:{themeKey:"borders",transform:u},borderBottom:{themeKey:"borders",transform:u},borderLeft:{themeKey:"borders",transform:u},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:b},color:{themeKey:"palette",transform:k},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:k},backgroundColor:{themeKey:"palette",transform:k},p:{style:r.o3},pt:{style:r.o3},pr:{style:r.o3},pb:{style:r.o3},pl:{style:r.o3},px:{style:r.o3},py:{style:r.o3},padding:{style:r.o3},paddingTop:{style:r.o3},paddingRight:{style:r.o3},paddingBottom:{style:r.o3},paddingLeft:{style:r.o3},paddingX:{style:r.o3},paddingY:{style:r.o3},paddingInline:{style:r.o3},paddingInlineStart:{style:r.o3},paddingInlineEnd:{style:r.o3},paddingBlock:{style:r.o3},paddingBlockStart:{style:r.o3},paddingBlockEnd:{style:r.o3},m:{style:r.e6},mt:{style:r.e6},mr:{style:r.e6},mb:{style:r.e6},ml:{style:r.e6},mx:{style:r.e6},my:{style:r.e6},margin:{style:r.e6},marginTop:{style:r.e6},marginRight:{style:r.e6},marginBottom:{style:r.e6},marginLeft:{style:r.e6},marginX:{style:r.e6},marginY:{style:r.e6},marginInline:{style:r.e6},marginInlineStart:{style:r.e6},marginInlineEnd:{style:r.e6},marginBlock:{style:r.e6},marginBlockStart:{style:r.e6},marginBlockEnd:{style:r.e6},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:w},rowGap:{style:x},columnGap:{style:_},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:E},maxWidth:{style:C},minWidth:{transform:E},height:{transform:E},maxHeight:{transform:E},minHeight:{transform:E},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}})},6523:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(4142),i=n(7730),o=n(4844),a=n(5408),s=n(8010);const u=function(){function e(e,t,n,i){const s={[e]:t,theme:n},u=i[e];if(!u)return{[e]:t};const{cssProperty:l=e,themeKey:c,transform:d,style:f}=u;if(null==t)return null;if("typography"===c&&"inherit"===t)return{[e]:t};const h=(0,o.DW)(n,c)||{};return f?f(s):(0,a.k9)(s,t,(t=>{let n=(0,o.Jq)(h,d,t);return t===n&&"string"==typeof t&&(n=(0,o.Jq)(h,d,`${e}${"default"===t?"":(0,r.Z)(t)}`,t)),!1===l?n:{[l]:n}}))}return function t(n){var r;const{sx:o,theme:u={}}=n||{};if(!o)return null;const l=null!=(r=u.unstable_sxConfig)?r:s.Z;function c(n){let r=n;if("function"==typeof n)r=n(u);else if("object"!=typeof n)return n;if(!r)return null;const o=(0,a.W8)(u.breakpoints),s=Object.keys(o);let c=o;return Object.keys(r).forEach((n=>{const o="function"==typeof(s=r[n])?s(u):s;var s;if(null!=o)if("object"==typeof o)if(l[n])c=(0,i.Z)(c,e(n,o,u,l));else{const e=(0,a.k9)({theme:u},o,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,o)?c=(0,i.Z)(c,e):c[n]=t({sx:o,theme:u})}else c=(0,i.Z)(c,e(n,o,u,l))})),(0,a.L7)(s,c)}return Array.isArray(o)?o.map(c):c(o)}}();u.filterProps=["sx"];const l=u},6631:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(6268),i=n(7294),o=n(5260);const a=(0,r.Z)(),s=function(e=a){return function(e=null){const t=i.useContext(o.T);return t&&(n=t,0!==Object.keys(n).length)?t:e;var n}(e)}},8805:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7462);function i(e,t){const n=(0,r.Z)({},t);return Object.keys(e).forEach((o=>{if(o.toString().match(/^(components|slots)$/))n[o]=(0,r.Z)({},e[o],n[o]);else if(o.toString().match(/^(componentsProps|slotProps)$/)){const a=e[o]||{},s=t[o];n[o]={},s&&Object.keys(s)?a&&Object.keys(a)?(n[o]=(0,r.Z)({},s),Object.keys(a).forEach((e=>{n[o][e]=i(a[e],s[e])}))):n[o]=s:n[o]=a}else void 0===n[o]&&(n[o]=e[o])})),n}function o(e){const{theme:t,name:n,props:r}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?i(t.components[n].defaultProps,r):r}var a=n(6631);function s({props:e,name:t,defaultTheme:n,themeId:r}){let i=(0,a.Z)(n);return r&&(i=i[r]||i),o({theme:i,name:t,props:e})}},7078:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});const r=e=>e,i=(()=>{let e=r;return{configure(t){e=t},generate:t=>e(t),reset(){e=r}}})()},4142:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(1387);function i(e){if("string"!=typeof e)throw new Error((0,r.Z)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},4780:(e,t,n)=>{"use strict";function r(e,t,n=void 0){const r={};return Object.keys(e).forEach((i=>{r[i]=e[i].reduce(((e,r)=>{if(r){const i=t(r);""!==i&&e.push(i),n&&n[r]&&e.push(n[r])}return e}),[]).join(" ")})),r}n.d(t,{Z:()=>r})},9766:(e,t,n)=>{"use strict";n.d(t,{P:()=>i,Z:()=>a});var r=n(7462);function i(e){return null!==e&&"object"==typeof e&&e.constructor===Object}function o(e){if(!i(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=o(e[n])})),t}function a(e,t,n={clone:!0}){const s=n.clone?(0,r.Z)({},e):e;return i(e)&&i(t)&&Object.keys(t).forEach((r=>{"__proto__"!==r&&(i(t[r])&&r in e&&i(e[r])?s[r]=a(e[r],t[r],n):n.clone?s[r]=i(t[r])?o(t[r]):t[r]:s[r]=t[r])})),s}},1387:(e,t,n)=>{"use strict";function r(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}n.d(t,{Z:()=>r})},4867:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7078);const i={active:"active",checked:"checked",completed:"completed",disabled:"disabled",readOnly:"readOnly",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",required:"required",selected:"selected"};function o(e,t,n="Mui"){const o=i[t];return o?`${n}-${o}`:`${r.Z.generate(e)}-${t}`}},1588:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(4867);function i(e,t,n="Mui"){const i={};return t.forEach((t=>{i[t]=(0,r.Z)(e,t,n)})),i}},7960:(e,t,n)=>{"use strict";function r(e,t){"function"==typeof e?e(t):e&&(e.current=t)}n.d(t,{Z:()=>r})},3546:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(7294);const i="undefined"!=typeof window?r.useLayoutEffect:r.useEffect},3796:e=>{e.exports=function(e,t){var n=t.length;if(0!==n){var r=e.length;e.length+=n;for(var i=0;i<n;i++)e[r+i]=t[i]}}},6010:(e,t,n)=>{"use strict";function r(e){var t,n,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(i&&(i+=" "),i+=n);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}n.d(t,{Z:()=>i});const i=function(){for(var e,t,n=0,i="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(i&&(i+=" "),i+=t);return i}},522:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),i=n.n(r),o=n(3645),a=n.n(o)()(i());a.push([e.id,":root{--sigma-background-color:#fff;--sigma-controls-background-color:#fff;--sigma-controls-background-color-hover:rgba(0,0,0,0.2);--sigma-controls-border-color:rgba(0,0,0,0.2);--sigma-controls-color:#000;--sigma-controls-zindex:100;--sigma-controls-margin:5px;--sigma-controls-size:30px;}div.react-sigma{height:100%;width:100%;position:relative;background:var(--sigma-background-color);}div.sigma-container{height:100%;width:100%;}.react-sigma-controls{position:absolute;z-index:var(--sigma-controls-zindex);border:2px solid var(--sigma-controls-border-color);border-radius:4px;color:var(--sigma-controls-color);background-color:var(--sigma-controls-background-color);}.react-sigma-controls.bottom-right{bottom:var(--sigma-controls-margin);right:var(--sigma-controls-margin);}.react-sigma-controls.bottom-left{bottom:var(--sigma-controls-margin);left:var(--sigma-controls-margin);}.react-sigma-controls.top-right{top:var(--sigma-controls-margin);right:var(--sigma-controls-margin);}.react-sigma-controls.top-left{top:var(--sigma-controls-margin);left:var(--sigma-controls-margin);}.react-sigma-controls:first-child{border-top-left-radius:2px;border-top-right-radius:2px;}.react-sigma-controls:last-child{border-bottom-left-radius:2px;border-bottom-right-radius:2px;}.react-sigma-control{width:var(--sigma-controls-size);height:var(--sigma-controls-size);line-height:var(--sigma-controls-size);background-color:var(--sigma-controls-background-color);border-bottom:1px solid var(--sigma-controls-border-color);}.react-sigma-control:last-child{border-bottom:none;}.react-sigma-control > *{box-sizing:border-box;}.react-sigma-control > button{display:block;border:none;margin:0;padding:0;width:var(--sigma-controls-size);height:var(--sigma-controls-size);line-height:var(--sigma-controls-size);background-position:center;background-size:50%;background-repeat:no-repeat;background-color:var(--sigma-controls-background-color);clip:rect(0,0,0,0);}.react-sigma-control > button:hover{background-color:var(--sigma-controls-background-color-hover);}.react-sigma-search{background-color:var(--sigma-controls-background-color);}.react-sigma-search label{visibility:hidden;}.react-sigma-search input{color:var(--sigma-controls-color);background-color:var(--sigma-controls-background-color);font-size:1em;width:100%;margin:0;border:none;padding:var(--sigma-controls-margin);box-sizing:border-box;}","",{version:3,sources:["webpack://./node_modules/@react-sigma/core/lib/react-sigma.min.css"],names:[],mappings:"AAAA,MAAM,6BAA6B,CAAC,sCAAsC,CAAC,uDAAuD,CAAC,6CAA6C,CAAC,2BAA2B,CAAC,2BAA2B,CAAC,2BAA2B,CAAC,0BAA0B,CAAC,CAAC,gBAAgB,WAAW,CAAC,UAAU,CAAC,iBAAiB,CAAC,wCAAwC,CAAC,CAAC,oBAAoB,WAAW,CAAC,UAAU,CAAC,CAAC,sBAAsB,iBAAiB,CAAC,oCAAoC,CAAC,mDAAmD,CAAC,iBAAiB,CAAC,iCAAiC,CAAC,uDAAuD,CAAC,CAAC,mCAAmC,mCAAmC,CAAC,kCAAkC,CAAC,CAAC,kCAAkC,mCAAmC,CAAC,iCAAiC,CAAC,CAAC,gCAAgC,gCAAgC,CAAC,kCAAkC,CAAC,CAAC,+BAA+B,gCAAgC,CAAC,iCAAiC,CAAC,CAAC,kCAAkC,0BAA0B,CAAC,2BAA2B,CAAC,CAAC,iCAAiC,6BAA6B,CAAC,8BAA8B,CAAC,CAAC,qBAAqB,gCAAgC,CAAC,iCAAiC,CAAC,sCAAsC,CAAC,uDAAuD,CAAC,0DAA0D,CAAC,CAAC,gCAAgC,kBAAkB,CAAC,CAAC,yBAAyB,qBAAqB,CAAC,CAAC,8BAA8B,aAAa,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,gCAAgC,CAAC,iCAAiC,CAAC,sCAAsC,CAAC,0BAA0B,CAAC,mBAAmB,CAAC,2BAA2B,CAAC,uDAAuD,CAAC,kBAAkB,CAAC,CAAC,oCAAoC,6DAA6D,CAAC,CAAC,oBAAoB,uDAAuD,CAAC,CAAC,0BAA0B,iBAAiB,CAAC,CAAC,0BAA0B,iCAAiC,CAAC,uDAAuD,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,oCAAoC,CAAC,qBAAqB,CAAC",sourcesContent:[":root{--sigma-background-color:#fff;--sigma-controls-background-color:#fff;--sigma-controls-background-color-hover:rgba(0,0,0,0.2);--sigma-controls-border-color:rgba(0,0,0,0.2);--sigma-controls-color:#000;--sigma-controls-zindex:100;--sigma-controls-margin:5px;--sigma-controls-size:30px;}div.react-sigma{height:100%;width:100%;position:relative;background:var(--sigma-background-color);}div.sigma-container{height:100%;width:100%;}.react-sigma-controls{position:absolute;z-index:var(--sigma-controls-zindex);border:2px solid var(--sigma-controls-border-color);border-radius:4px;color:var(--sigma-controls-color);background-color:var(--sigma-controls-background-color);}.react-sigma-controls.bottom-right{bottom:var(--sigma-controls-margin);right:var(--sigma-controls-margin);}.react-sigma-controls.bottom-left{bottom:var(--sigma-controls-margin);left:var(--sigma-controls-margin);}.react-sigma-controls.top-right{top:var(--sigma-controls-margin);right:var(--sigma-controls-margin);}.react-sigma-controls.top-left{top:var(--sigma-controls-margin);left:var(--sigma-controls-margin);}.react-sigma-controls:first-child{border-top-left-radius:2px;border-top-right-radius:2px;}.react-sigma-controls:last-child{border-bottom-left-radius:2px;border-bottom-right-radius:2px;}.react-sigma-control{width:var(--sigma-controls-size);height:var(--sigma-controls-size);line-height:var(--sigma-controls-size);background-color:var(--sigma-controls-background-color);border-bottom:1px solid var(--sigma-controls-border-color);}.react-sigma-control:last-child{border-bottom:none;}.react-sigma-control > *{box-sizing:border-box;}.react-sigma-control > button{display:block;border:none;margin:0;padding:0;width:var(--sigma-controls-size);height:var(--sigma-controls-size);line-height:var(--sigma-controls-size);background-position:center;background-size:50%;background-repeat:no-repeat;background-color:var(--sigma-controls-background-color);clip:rect(0,0,0,0);}.react-sigma-control > button:hover{background-color:var(--sigma-controls-background-color-hover);}.react-sigma-search{background-color:var(--sigma-controls-background-color);}.react-sigma-search label{visibility:hidden;}.react-sigma-search input{color:var(--sigma-controls-color);background-color:var(--sigma-controls-background-color);font-size:1em;width:100%;margin:0;border:none;padding:var(--sigma-controls-margin);box-sizing:border-box;}"],sourceRoot:""}]);const s=a},5681:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),i=n.n(r),o=n(3645),a=n.n(o)()(i());a.push([e.id,"h1 {\n    font:\n        28px/32px Arial,\n        Helvetica,\n        sans-serif;\n    overflow-wrap: break-word;\n}\n\np {\n    font:\n        14px/16px Arial,\n        Helvetica,\n        sans-serif;\n    overflow-wrap: break-word;\n}\n","",{version:3,sources:["webpack://./src/components/ErrorPage.css"],names:[],mappings:"AAAA;IACI;;;kBAGc;IACd,yBAAyB;AAC7B;;AAEA;IACI;;;kBAGc;IACd,yBAAyB;AAC7B",sourcesContent:["h1 {\r\n    font:\r\n        28px/32px Arial,\r\n        Helvetica,\r\n        sans-serif;\r\n    overflow-wrap: break-word;\r\n}\r\n\r\np {\r\n    font:\r\n        14px/16px Arial,\r\n        Helvetica,\r\n        sans-serif;\r\n    overflow-wrap: break-word;\r\n}\r\n"],sourceRoot:""}]);const s=a},2810:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),i=n.n(r),o=n(3645),a=n.n(o)()(i());a.push([e.id,".info {\n    font:\n        14px/16px Arial,\n        Helvetica,\n        sans-serif;\n    background: white;\n    background: rgba(255, 255, 255, 0.8);\n    width: 150px;\n    margin: 0 10px 20px 10px;\n    overflow-wrap: break-word;\n}\n\na {\n    font-size: 13px;\n}\n\na:visited {\n    color: LinkText;\n}\n","",{version:3,sources:["webpack://./src/components/SigmaInfoControl.css"],names:[],mappings:"AAAA;IACI;;;kBAGc;IACd,iBAAiB;IACjB,oCAAoC;IACpC,YAAY;IACZ,wBAAwB;IACxB,yBAAyB;AAC7B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB",sourcesContent:[".info {\r\n    font:\r\n        14px/16px Arial,\r\n        Helvetica,\r\n        sans-serif;\r\n    background: white;\r\n    background: rgba(255, 255, 255, 0.8);\r\n    width: 150px;\r\n    margin: 0 10px 20px 10px;\r\n    overflow-wrap: break-word;\r\n}\r\n\r\na {\r\n    font-size: 13px;\r\n}\r\n\r\na:visited {\r\n    color: LinkText;\r\n}\r\n"],sourceRoot:""}]);const s=a},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var u=this[s][0];null!=u&&(a[u]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);r&&a[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),t.push(c))}},t}},7537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},7187:e=>{"use strict";var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(n,r){function i(n){e.removeListener(t,o),r(n)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),n([].slice.call(arguments))}g(e,t,o,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&g(e,"error",t,{once:!0})}(e,i)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var a=10;function s(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function u(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function l(e,t,n,r){var i,o,a,l;if(s(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),a=o[t]),void 0===a)a=o[t]=n,++e._eventsCount;else if("function"==typeof a?a=o[t]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(i=u(e))>0&&a.length>i&&!a.warned){a.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=a.length,l=c,console&&console.warn&&console.warn(l)}return e}function c(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=c.bind(r);return i.listener=n,r.wrapFn=i,i}function f(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):p(i,i.length)}function h(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function p(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function g(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){r.once&&e.removeEventListener(t,i),n(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");a=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return u(this)},o.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var i="error"===e,o=this._events;if(void 0!==o)i=i&&void 0===o.error;else if(!i)return!1;if(i){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var u=o[e];if(void 0===u)return!1;if("function"==typeof u)r(u,this,t);else{var l=u.length,c=p(u,l);for(n=0;n<l;++n)r(c[n],this,t)}return!0},o.prototype.addListener=function(e,t){return l(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return l(this,e,t,!0)},o.prototype.once=function(e,t){return s(t),this.on(e,d(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return s(t),this.prependListener(e,d(this,e,t)),this},o.prototype.removeListener=function(e,t){var n,r,i,o,a;if(s(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){a=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},o.prototype.listeners=function(e){return f(this,e,!0)},o.prototype.rawListeners=function(e){return f(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):h.call(e,t)},o.prototype.listenerCount=h,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},6186:e=>{e.exports=function(e){return null!==e&&"object"==typeof e&&"function"==typeof e.addUndirectedEdgeWithKey&&"function"==typeof e.dropNode&&"boolean"==typeof e.multi}},8679:(e,t,n)=>{"use strict";var r=n(1296),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function u(e){return r.isMemo(e)?a:s[e.$$typeof]||i}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=a;var l=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,h=Object.getPrototypeOf,p=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(p){var i=h(n);i&&i!==p&&e(t,i,r)}var a=c(n);d&&(a=a.concat(d(n)));for(var s=u(t),g=u(n),m=0;m<a.length;++m){var y=a[m];if(!(o[y]||r&&r[y]||g&&g[y]||s&&s[y])){var v=f(n,y);try{l(t,y,v)}catch(e){}}}}return t}},6103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,i=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,l=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,h=n?Symbol.for("react.suspense"):60113,p=n?Symbol.for("react.suspense_list"):60120,g=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,v=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function _(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case o:case s:case a:case h:return e;default:switch(e=e&&e.$$typeof){case l:case f:case m:case g:case u:return e;default:return t}}case i:return t}}}function x(e){return _(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=l,t.ContextProvider=u,t.Element=r,t.ForwardRef=f,t.Fragment=o,t.Lazy=m,t.Memo=g,t.Portal=i,t.Profiler=s,t.StrictMode=a,t.Suspense=h,t.isAsyncMode=function(e){return x(e)||_(e)===c},t.isConcurrentMode=x,t.isContextConsumer=function(e){return _(e)===l},t.isContextProvider=function(e){return _(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return _(e)===f},t.isFragment=function(e){return _(e)===o},t.isLazy=function(e){return _(e)===m},t.isMemo=function(e){return _(e)===g},t.isPortal=function(e){return _(e)===i},t.isProfiler=function(e){return _(e)===s},t.isStrictMode=function(e){return _(e)===a},t.isSuspense=function(e){return _(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===d||e===s||e===a||e===h||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===g||e.$$typeof===u||e.$$typeof===l||e.$$typeof===f||e.$$typeof===v||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=_},1296:(e,t,n)=>{"use strict";e.exports=n(6103)},6486:function(e,t,n){var r;e=n.nmd(e),function(){var i,o="Expected a function",a="__lodash_hash_undefined__",s="__lodash_placeholder__",u=32,l=128,c=1/0,d=9007199254740991,f=NaN,h=4294967295,p=[["ary",l],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",u],["partialRight",64],["rearg",256]],g="[object Arguments]",m="[object Array]",y="[object Boolean]",v="[object Date]",b="[object Error]",w="[object Function]",_="[object GeneratorFunction]",x="[object Map]",k="[object Number]",E="[object Object]",S="[object Promise]",C="[object RegExp]",A="[object Set]",R="[object String]",P="[object Symbol]",T="[object WeakMap]",L="[object ArrayBuffer]",O="[object DataView]",M="[object Float32Array]",N="[object Float64Array]",z="[object Int8Array]",F="[object Int16Array]",D="[object Int32Array]",$="[object Uint8Array]",j="[object Uint8ClampedArray]",I="[object Uint16Array]",G="[object Uint32Array]",B=/\b__p \+= '';/g,U=/\b(__p \+=) '' \+/g,Z=/(__e\(.*?\)|\b__t\)) \+\n'';/g,W=/&(?:amp|lt|gt|quot|#39);/g,H=/[&<>"']/g,V=RegExp(W.source),q=RegExp(H.source),K=/<%-([\s\S]+?)%>/g,Y=/<%([\s\S]+?)%>/g,Q=/<%=([\s\S]+?)%>/g,X=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,J=/^\w*$/,ee=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,te=/[\\^$.*+?()[\]{}|]/g,ne=RegExp(te.source),re=/^\s+/,ie=/\s/,oe=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,ae=/\{\n\/\* \[wrapped with (.+)\] \*/,se=/,? & /,ue=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,le=/[()=,{}\[\]\/\s]/,ce=/\\(\\)?/g,de=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,fe=/\w*$/,he=/^[-+]0x[0-9a-f]+$/i,pe=/^0b[01]+$/i,ge=/^\[object .+?Constructor\]$/,me=/^0o[0-7]+$/i,ye=/^(?:0|[1-9]\d*)$/,ve=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,be=/($^)/,we=/['\n\r\u2028\u2029\\]/g,_e="\\ud800-\\udfff",xe="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",ke="\\u2700-\\u27bf",Ee="a-z\\xdf-\\xf6\\xf8-\\xff",Se="A-Z\\xc0-\\xd6\\xd8-\\xde",Ce="\\ufe0e\\ufe0f",Ae="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Re="["+_e+"]",Pe="["+Ae+"]",Te="["+xe+"]",Le="\\d+",Oe="["+ke+"]",Me="["+Ee+"]",Ne="[^"+_e+Ae+Le+ke+Ee+Se+"]",ze="\\ud83c[\\udffb-\\udfff]",Fe="[^"+_e+"]",De="(?:\\ud83c[\\udde6-\\uddff]){2}",$e="[\\ud800-\\udbff][\\udc00-\\udfff]",je="["+Se+"]",Ie="\\u200d",Ge="(?:"+Me+"|"+Ne+")",Be="(?:"+je+"|"+Ne+")",Ue="(?:['’](?:d|ll|m|re|s|t|ve))?",Ze="(?:['’](?:D|LL|M|RE|S|T|VE))?",We="(?:"+Te+"|"+ze+")?",He="["+Ce+"]?",Ve=He+We+"(?:"+Ie+"(?:"+[Fe,De,$e].join("|")+")"+He+We+")*",qe="(?:"+[Oe,De,$e].join("|")+")"+Ve,Ke="(?:"+[Fe+Te+"?",Te,De,$e,Re].join("|")+")",Ye=RegExp("['’]","g"),Qe=RegExp(Te,"g"),Xe=RegExp(ze+"(?="+ze+")|"+Ke+Ve,"g"),Je=RegExp([je+"?"+Me+"+"+Ue+"(?="+[Pe,je,"$"].join("|")+")",Be+"+"+Ze+"(?="+[Pe,je+Ge,"$"].join("|")+")",je+"?"+Ge+"+"+Ue,je+"+"+Ze,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Le,qe].join("|"),"g"),et=RegExp("["+Ie+_e+xe+Ce+"]"),tt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,nt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],rt=-1,it={};it[M]=it[N]=it[z]=it[F]=it[D]=it[$]=it[j]=it[I]=it[G]=!0,it[g]=it[m]=it[L]=it[y]=it[O]=it[v]=it[b]=it[w]=it[x]=it[k]=it[E]=it[C]=it[A]=it[R]=it[T]=!1;var ot={};ot[g]=ot[m]=ot[L]=ot[O]=ot[y]=ot[v]=ot[M]=ot[N]=ot[z]=ot[F]=ot[D]=ot[x]=ot[k]=ot[E]=ot[C]=ot[A]=ot[R]=ot[P]=ot[$]=ot[j]=ot[I]=ot[G]=!0,ot[b]=ot[w]=ot[T]=!1;var at={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},st=parseFloat,ut=parseInt,lt="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,ct="object"==typeof self&&self&&self.Object===Object&&self,dt=lt||ct||Function("return this")(),ft=t&&!t.nodeType&&t,ht=ft&&e&&!e.nodeType&&e,pt=ht&&ht.exports===ft,gt=pt&&lt.process,mt=function(){try{return ht&&ht.require&&ht.require("util").types||gt&&gt.binding&&gt.binding("util")}catch(e){}}(),yt=mt&&mt.isArrayBuffer,vt=mt&&mt.isDate,bt=mt&&mt.isMap,wt=mt&&mt.isRegExp,_t=mt&&mt.isSet,xt=mt&&mt.isTypedArray;function kt(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function Et(e,t,n,r){for(var i=-1,o=null==e?0:e.length;++i<o;){var a=e[i];t(r,a,n(a),e)}return r}function St(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function Ct(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function At(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function Rt(e,t){for(var n=-1,r=null==e?0:e.length,i=0,o=[];++n<r;){var a=e[n];t(a,n,e)&&(o[i++]=a)}return o}function Pt(e,t){return!(null==e||!e.length)&&jt(e,t,0)>-1}function Tt(e,t,n){for(var r=-1,i=null==e?0:e.length;++r<i;)if(n(t,e[r]))return!0;return!1}function Lt(e,t){for(var n=-1,r=null==e?0:e.length,i=Array(r);++n<r;)i[n]=t(e[n],n,e);return i}function Ot(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e}function Mt(e,t,n,r){var i=-1,o=null==e?0:e.length;for(r&&o&&(n=e[++i]);++i<o;)n=t(n,e[i],i,e);return n}function Nt(e,t,n,r){var i=null==e?0:e.length;for(r&&i&&(n=e[--i]);i--;)n=t(n,e[i],i,e);return n}function zt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var Ft=Ut("length");function Dt(e,t,n){var r;return n(e,(function(e,n,i){if(t(e,n,i))return r=n,!1})),r}function $t(e,t,n,r){for(var i=e.length,o=n+(r?1:-1);r?o--:++o<i;)if(t(e[o],o,e))return o;return-1}function jt(e,t,n){return t==t?function(e,t,n){for(var r=n-1,i=e.length;++r<i;)if(e[r]===t)return r;return-1}(e,t,n):$t(e,Gt,n)}function It(e,t,n,r){for(var i=n-1,o=e.length;++i<o;)if(r(e[i],t))return i;return-1}function Gt(e){return e!=e}function Bt(e,t){var n=null==e?0:e.length;return n?Ht(e,t)/n:f}function Ut(e){return function(t){return null==t?i:t[e]}}function Zt(e){return function(t){return null==e?i:e[t]}}function Wt(e,t,n,r,i){return i(e,(function(e,i,o){n=r?(r=!1,e):t(n,e,i,o)})),n}function Ht(e,t){for(var n,r=-1,o=e.length;++r<o;){var a=t(e[r]);a!==i&&(n=n===i?a:n+a)}return n}function Vt(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function qt(e){return e?e.slice(0,fn(e)+1).replace(re,""):e}function Kt(e){return function(t){return e(t)}}function Yt(e,t){return Lt(t,(function(t){return e[t]}))}function Qt(e,t){return e.has(t)}function Xt(e,t){for(var n=-1,r=e.length;++n<r&&jt(t,e[n],0)>-1;);return n}function Jt(e,t){for(var n=e.length;n--&&jt(t,e[n],0)>-1;);return n}var en=Zt({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),tn=Zt({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function nn(e){return"\\"+at[e]}function rn(e){return et.test(e)}function on(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function an(e,t){return function(n){return e(t(n))}}function sn(e,t){for(var n=-1,r=e.length,i=0,o=[];++n<r;){var a=e[n];a!==t&&a!==s||(e[n]=s,o[i++]=n)}return o}function un(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}function ln(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=[e,e]})),n}function cn(e){return rn(e)?function(e){for(var t=Xe.lastIndex=0;Xe.test(e);)++t;return t}(e):Ft(e)}function dn(e){return rn(e)?function(e){return e.match(Xe)||[]}(e):function(e){return e.split("")}(e)}function fn(e){for(var t=e.length;t--&&ie.test(e.charAt(t)););return t}var hn=Zt({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),pn=function e(t){var n,r=(t=null==t?dt:pn.defaults(dt.Object(),t,pn.pick(dt,nt))).Array,ie=t.Date,_e=t.Error,xe=t.Function,ke=t.Math,Ee=t.Object,Se=t.RegExp,Ce=t.String,Ae=t.TypeError,Re=r.prototype,Pe=xe.prototype,Te=Ee.prototype,Le=t["__core-js_shared__"],Oe=Pe.toString,Me=Te.hasOwnProperty,Ne=0,ze=(n=/[^.]+$/.exec(Le&&Le.keys&&Le.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Fe=Te.toString,De=Oe.call(Ee),$e=dt._,je=Se("^"+Oe.call(Me).replace(te,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Ie=pt?t.Buffer:i,Ge=t.Symbol,Be=t.Uint8Array,Ue=Ie?Ie.allocUnsafe:i,Ze=an(Ee.getPrototypeOf,Ee),We=Ee.create,He=Te.propertyIsEnumerable,Ve=Re.splice,qe=Ge?Ge.isConcatSpreadable:i,Ke=Ge?Ge.iterator:i,Xe=Ge?Ge.toStringTag:i,et=function(){try{var e=uo(Ee,"defineProperty");return e({},"",{}),e}catch(e){}}(),at=t.clearTimeout!==dt.clearTimeout&&t.clearTimeout,lt=ie&&ie.now!==dt.Date.now&&ie.now,ct=t.setTimeout!==dt.setTimeout&&t.setTimeout,ft=ke.ceil,ht=ke.floor,gt=Ee.getOwnPropertySymbols,mt=Ie?Ie.isBuffer:i,Ft=t.isFinite,Zt=Re.join,gn=an(Ee.keys,Ee),mn=ke.max,yn=ke.min,vn=ie.now,bn=t.parseInt,wn=ke.random,_n=Re.reverse,xn=uo(t,"DataView"),kn=uo(t,"Map"),En=uo(t,"Promise"),Sn=uo(t,"Set"),Cn=uo(t,"WeakMap"),An=uo(Ee,"create"),Rn=Cn&&new Cn,Pn={},Tn=Do(xn),Ln=Do(kn),On=Do(En),Mn=Do(Sn),Nn=Do(Cn),zn=Ge?Ge.prototype:i,Fn=zn?zn.valueOf:i,Dn=zn?zn.toString:i;function $n(e){if(es(e)&&!Ua(e)&&!(e instanceof Bn)){if(e instanceof Gn)return e;if(Me.call(e,"__wrapped__"))return $o(e)}return new Gn(e)}var jn=function(){function e(){}return function(t){if(!Ja(t))return{};if(We)return We(t);e.prototype=t;var n=new e;return e.prototype=i,n}}();function In(){}function Gn(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=i}function Bn(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=h,this.__views__=[]}function Un(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Zn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Wn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Hn(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new Wn;++t<n;)this.add(e[t])}function Vn(e){var t=this.__data__=new Zn(e);this.size=t.size}function qn(e,t){var n=Ua(e),r=!n&&Ba(e),i=!n&&!r&&Va(e),o=!n&&!r&&!i&&us(e),a=n||r||i||o,s=a?Vt(e.length,Ce):[],u=s.length;for(var l in e)!t&&!Me.call(e,l)||a&&("length"==l||i&&("offset"==l||"parent"==l)||o&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||mo(l,u))||s.push(l);return s}function Kn(e){var t=e.length;return t?e[Wr(0,t-1)]:i}function Yn(e,t){return Oo(Ci(e),or(t,0,e.length))}function Qn(e){return Oo(Ci(e))}function Xn(e,t,n){(n!==i&&!ja(e[t],n)||n===i&&!(t in e))&&rr(e,t,n)}function Jn(e,t,n){var r=e[t];Me.call(e,t)&&ja(r,n)&&(n!==i||t in e)||rr(e,t,n)}function er(e,t){for(var n=e.length;n--;)if(ja(e[n][0],t))return n;return-1}function tr(e,t,n,r){return cr(e,(function(e,i,o){t(r,e,n(e),o)})),r}function nr(e,t){return e&&Ai(t,Ts(t),e)}function rr(e,t,n){"__proto__"==t&&et?et(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function ir(e,t){for(var n=-1,o=t.length,a=r(o),s=null==e;++n<o;)a[n]=s?i:Ss(e,t[n]);return a}function or(e,t,n){return e==e&&(n!==i&&(e=e<=n?e:n),t!==i&&(e=e>=t?e:t)),e}function ar(e,t,n,r,o,a){var s,u=1&t,l=2&t,c=4&t;if(n&&(s=o?n(e,r,o,a):n(e)),s!==i)return s;if(!Ja(e))return e;var d=Ua(e);if(d){if(s=function(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&Me.call(e,"index")&&(n.index=e.index,n.input=e.input),n}(e),!u)return Ci(e,s)}else{var f=fo(e),h=f==w||f==_;if(Va(e))return wi(e,u);if(f==E||f==g||h&&!o){if(s=l||h?{}:po(e),!u)return l?function(e,t){return Ai(e,co(e),t)}(e,function(e,t){return e&&Ai(t,Ls(t),e)}(s,e)):function(e,t){return Ai(e,lo(e),t)}(e,nr(s,e))}else{if(!ot[f])return o?e:{};s=function(e,t,n){var r,i=e.constructor;switch(t){case L:return _i(e);case y:case v:return new i(+e);case O:return function(e,t){var n=t?_i(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case M:case N:case z:case F:case D:case $:case j:case I:case G:return xi(e,n);case x:return new i;case k:case R:return new i(e);case C:return function(e){var t=new e.constructor(e.source,fe.exec(e));return t.lastIndex=e.lastIndex,t}(e);case A:return new i;case P:return r=e,Fn?Ee(Fn.call(r)):{}}}(e,f,u)}}a||(a=new Vn);var p=a.get(e);if(p)return p;a.set(e,s),os(e)?e.forEach((function(r){s.add(ar(r,t,n,r,e,a))})):ts(e)&&e.forEach((function(r,i){s.set(i,ar(r,t,n,i,e,a))}));var m=d?i:(c?l?to:eo:l?Ls:Ts)(e);return St(m||e,(function(r,i){m&&(r=e[i=r]),Jn(s,i,ar(r,t,n,i,e,a))})),s}function sr(e,t,n){var r=n.length;if(null==e)return!r;for(e=Ee(e);r--;){var o=n[r],a=t[o],s=e[o];if(s===i&&!(o in e)||!a(s))return!1}return!0}function ur(e,t,n){if("function"!=typeof e)throw new Ae(o);return Ro((function(){e.apply(i,n)}),t)}function lr(e,t,n,r){var i=-1,o=Pt,a=!0,s=e.length,u=[],l=t.length;if(!s)return u;n&&(t=Lt(t,Kt(n))),r?(o=Tt,a=!1):t.length>=200&&(o=Qt,a=!1,t=new Hn(t));e:for(;++i<s;){var c=e[i],d=null==n?c:n(c);if(c=r||0!==c?c:0,a&&d==d){for(var f=l;f--;)if(t[f]===d)continue e;u.push(c)}else o(t,d,r)||u.push(c)}return u}$n.templateSettings={escape:K,evaluate:Y,interpolate:Q,variable:"",imports:{_:$n}},$n.prototype=In.prototype,$n.prototype.constructor=$n,Gn.prototype=jn(In.prototype),Gn.prototype.constructor=Gn,Bn.prototype=jn(In.prototype),Bn.prototype.constructor=Bn,Un.prototype.clear=function(){this.__data__=An?An(null):{},this.size=0},Un.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},Un.prototype.get=function(e){var t=this.__data__;if(An){var n=t[e];return n===a?i:n}return Me.call(t,e)?t[e]:i},Un.prototype.has=function(e){var t=this.__data__;return An?t[e]!==i:Me.call(t,e)},Un.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=An&&t===i?a:t,this},Zn.prototype.clear=function(){this.__data__=[],this.size=0},Zn.prototype.delete=function(e){var t=this.__data__,n=er(t,e);return!(n<0||(n==t.length-1?t.pop():Ve.call(t,n,1),--this.size,0))},Zn.prototype.get=function(e){var t=this.__data__,n=er(t,e);return n<0?i:t[n][1]},Zn.prototype.has=function(e){return er(this.__data__,e)>-1},Zn.prototype.set=function(e,t){var n=this.__data__,r=er(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},Wn.prototype.clear=function(){this.size=0,this.__data__={hash:new Un,map:new(kn||Zn),string:new Un}},Wn.prototype.delete=function(e){var t=ao(this,e).delete(e);return this.size-=t?1:0,t},Wn.prototype.get=function(e){return ao(this,e).get(e)},Wn.prototype.has=function(e){return ao(this,e).has(e)},Wn.prototype.set=function(e,t){var n=ao(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},Hn.prototype.add=Hn.prototype.push=function(e){return this.__data__.set(e,a),this},Hn.prototype.has=function(e){return this.__data__.has(e)},Vn.prototype.clear=function(){this.__data__=new Zn,this.size=0},Vn.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Vn.prototype.get=function(e){return this.__data__.get(e)},Vn.prototype.has=function(e){return this.__data__.has(e)},Vn.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Zn){var r=n.__data__;if(!kn||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new Wn(r)}return n.set(e,t),this.size=n.size,this};var cr=Ti(vr),dr=Ti(br,!0);function fr(e,t){var n=!0;return cr(e,(function(e,r,i){return n=!!t(e,r,i)})),n}function hr(e,t,n){for(var r=-1,o=e.length;++r<o;){var a=e[r],s=t(a);if(null!=s&&(u===i?s==s&&!ss(s):n(s,u)))var u=s,l=a}return l}function pr(e,t){var n=[];return cr(e,(function(e,r,i){t(e,r,i)&&n.push(e)})),n}function gr(e,t,n,r,i){var o=-1,a=e.length;for(n||(n=go),i||(i=[]);++o<a;){var s=e[o];t>0&&n(s)?t>1?gr(s,t-1,n,r,i):Ot(i,s):r||(i[i.length]=s)}return i}var mr=Li(),yr=Li(!0);function vr(e,t){return e&&mr(e,t,Ts)}function br(e,t){return e&&yr(e,t,Ts)}function wr(e,t){return Rt(t,(function(t){return Ya(e[t])}))}function _r(e,t){for(var n=0,r=(t=mi(t,e)).length;null!=e&&n<r;)e=e[Fo(t[n++])];return n&&n==r?e:i}function xr(e,t,n){var r=t(e);return Ua(e)?r:Ot(r,n(e))}function kr(e){return null==e?e===i?"[object Undefined]":"[object Null]":Xe&&Xe in Ee(e)?function(e){var t=Me.call(e,Xe),n=e[Xe];try{e[Xe]=i;var r=!0}catch(e){}var o=Fe.call(e);return r&&(t?e[Xe]=n:delete e[Xe]),o}(e):function(e){return Fe.call(e)}(e)}function Er(e,t){return e>t}function Sr(e,t){return null!=e&&Me.call(e,t)}function Cr(e,t){return null!=e&&t in Ee(e)}function Ar(e,t,n){for(var o=n?Tt:Pt,a=e[0].length,s=e.length,u=s,l=r(s),c=1/0,d=[];u--;){var f=e[u];u&&t&&(f=Lt(f,Kt(t))),c=yn(f.length,c),l[u]=!n&&(t||a>=120&&f.length>=120)?new Hn(u&&f):i}f=e[0];var h=-1,p=l[0];e:for(;++h<a&&d.length<c;){var g=f[h],m=t?t(g):g;if(g=n||0!==g?g:0,!(p?Qt(p,m):o(d,m,n))){for(u=s;--u;){var y=l[u];if(!(y?Qt(y,m):o(e[u],m,n)))continue e}p&&p.push(m),d.push(g)}}return d}function Rr(e,t,n){var r=null==(e=So(e,t=mi(t,e)))?e:e[Fo(Ko(t))];return null==r?i:kt(r,e,n)}function Pr(e){return es(e)&&kr(e)==g}function Tr(e,t,n,r,o){return e===t||(null==e||null==t||!es(e)&&!es(t)?e!=e&&t!=t:function(e,t,n,r,o,a){var s=Ua(e),u=Ua(t),l=s?m:fo(e),c=u?m:fo(t),d=(l=l==g?E:l)==E,f=(c=c==g?E:c)==E,h=l==c;if(h&&Va(e)){if(!Va(t))return!1;s=!0,d=!1}if(h&&!d)return a||(a=new Vn),s||us(e)?Xi(e,t,n,r,o,a):function(e,t,n,r,i,o,a){switch(n){case O:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case L:return!(e.byteLength!=t.byteLength||!o(new Be(e),new Be(t)));case y:case v:case k:return ja(+e,+t);case b:return e.name==t.name&&e.message==t.message;case C:case R:return e==t+"";case x:var s=on;case A:var u=1&r;if(s||(s=un),e.size!=t.size&&!u)return!1;var l=a.get(e);if(l)return l==t;r|=2,a.set(e,t);var c=Xi(s(e),s(t),r,i,o,a);return a.delete(e),c;case P:if(Fn)return Fn.call(e)==Fn.call(t)}return!1}(e,t,l,n,r,o,a);if(!(1&n)){var p=d&&Me.call(e,"__wrapped__"),w=f&&Me.call(t,"__wrapped__");if(p||w){var _=p?e.value():e,S=w?t.value():t;return a||(a=new Vn),o(_,S,n,r,a)}}return!!h&&(a||(a=new Vn),function(e,t,n,r,o,a){var s=1&n,u=eo(e),l=u.length;if(l!=eo(t).length&&!s)return!1;for(var c=l;c--;){var d=u[c];if(!(s?d in t:Me.call(t,d)))return!1}var f=a.get(e),h=a.get(t);if(f&&h)return f==t&&h==e;var p=!0;a.set(e,t),a.set(t,e);for(var g=s;++c<l;){var m=e[d=u[c]],y=t[d];if(r)var v=s?r(y,m,d,t,e,a):r(m,y,d,e,t,a);if(!(v===i?m===y||o(m,y,n,r,a):v)){p=!1;break}g||(g="constructor"==d)}if(p&&!g){var b=e.constructor,w=t.constructor;b==w||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof w&&w instanceof w||(p=!1)}return a.delete(e),a.delete(t),p}(e,t,n,r,o,a))}(e,t,n,r,Tr,o))}function Lr(e,t,n,r){var o=n.length,a=o,s=!r;if(null==e)return!a;for(e=Ee(e);o--;){var u=n[o];if(s&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++o<a;){var l=(u=n[o])[0],c=e[l],d=u[1];if(s&&u[2]){if(c===i&&!(l in e))return!1}else{var f=new Vn;if(r)var h=r(c,d,l,e,t,f);if(!(h===i?Tr(d,c,3,r,f):h))return!1}}return!0}function Or(e){return!(!Ja(e)||(t=e,ze&&ze in t))&&(Ya(e)?je:ge).test(Do(e));var t}function Mr(e){return"function"==typeof e?e:null==e?nu:"object"==typeof e?Ua(e)?$r(e[0],e[1]):Dr(e):du(e)}function Nr(e){if(!_o(e))return gn(e);var t=[];for(var n in Ee(e))Me.call(e,n)&&"constructor"!=n&&t.push(n);return t}function zr(e,t){return e<t}function Fr(e,t){var n=-1,i=Wa(e)?r(e.length):[];return cr(e,(function(e,r,o){i[++n]=t(e,r,o)})),i}function Dr(e){var t=so(e);return 1==t.length&&t[0][2]?ko(t[0][0],t[0][1]):function(n){return n===e||Lr(n,e,t)}}function $r(e,t){return vo(e)&&xo(t)?ko(Fo(e),t):function(n){var r=Ss(n,e);return r===i&&r===t?Cs(n,e):Tr(t,r,3)}}function jr(e,t,n,r,o){e!==t&&mr(t,(function(a,s){if(o||(o=new Vn),Ja(a))!function(e,t,n,r,o,a,s){var u=Co(e,n),l=Co(t,n),c=s.get(l);if(c)Xn(e,n,c);else{var d=a?a(u,l,n+"",e,t,s):i,f=d===i;if(f){var h=Ua(l),p=!h&&Va(l),g=!h&&!p&&us(l);d=l,h||p||g?Ua(u)?d=u:Ha(u)?d=Ci(u):p?(f=!1,d=wi(l,!0)):g?(f=!1,d=xi(l,!0)):d=[]:rs(l)||Ba(l)?(d=u,Ba(u)?d=ms(u):Ja(u)&&!Ya(u)||(d=po(l))):f=!1}f&&(s.set(l,d),o(d,l,r,a,s),s.delete(l)),Xn(e,n,d)}}(e,t,s,n,jr,r,o);else{var u=r?r(Co(e,s),a,s+"",e,t,o):i;u===i&&(u=a),Xn(e,s,u)}}),Ls)}function Ir(e,t){var n=e.length;if(n)return mo(t+=t<0?n:0,n)?e[t]:i}function Gr(e,t,n){t=t.length?Lt(t,(function(e){return Ua(e)?function(t){return _r(t,1===e.length?e[0]:e)}:e})):[nu];var r=-1;t=Lt(t,Kt(oo()));var i=Fr(e,(function(e,n,i){var o=Lt(t,(function(t){return t(e)}));return{criteria:o,index:++r,value:e}}));return function(e,t){var r=e.length;for(e.sort((function(e,t){return function(e,t,n){for(var r=-1,i=e.criteria,o=t.criteria,a=i.length,s=n.length;++r<a;){var u=ki(i[r],o[r]);if(u)return r>=s?u:u*("desc"==n[r]?-1:1)}return e.index-t.index}(e,t,n)}));r--;)e[r]=e[r].value;return e}(i)}function Br(e,t,n){for(var r=-1,i=t.length,o={};++r<i;){var a=t[r],s=_r(e,a);n(s,a)&&Yr(o,mi(a,e),s)}return o}function Ur(e,t,n,r){var i=r?It:jt,o=-1,a=t.length,s=e;for(e===t&&(t=Ci(t)),n&&(s=Lt(e,Kt(n)));++o<a;)for(var u=0,l=t[o],c=n?n(l):l;(u=i(s,c,u,r))>-1;)s!==e&&Ve.call(s,u,1),Ve.call(e,u,1);return e}function Zr(e,t){for(var n=e?t.length:0,r=n-1;n--;){var i=t[n];if(n==r||i!==o){var o=i;mo(i)?Ve.call(e,i,1):ui(e,i)}}return e}function Wr(e,t){return e+ht(wn()*(t-e+1))}function Hr(e,t){var n="";if(!e||t<1||t>d)return n;do{t%2&&(n+=e),(t=ht(t/2))&&(e+=e)}while(t);return n}function Vr(e,t){return Po(Eo(e,t,nu),e+"")}function qr(e){return Kn(js(e))}function Kr(e,t){var n=js(e);return Oo(n,or(t,0,n.length))}function Yr(e,t,n,r){if(!Ja(e))return e;for(var o=-1,a=(t=mi(t,e)).length,s=a-1,u=e;null!=u&&++o<a;){var l=Fo(t[o]),c=n;if("__proto__"===l||"constructor"===l||"prototype"===l)return e;if(o!=s){var d=u[l];(c=r?r(d,l,u):i)===i&&(c=Ja(d)?d:mo(t[o+1])?[]:{})}Jn(u,l,c),u=u[l]}return e}var Qr=Rn?function(e,t){return Rn.set(e,t),e}:nu,Xr=et?function(e,t){return et(e,"toString",{configurable:!0,enumerable:!1,value:Js(t),writable:!0})}:nu;function Jr(e){return Oo(js(e))}function ei(e,t,n){var i=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(n=n>o?o:n)<0&&(n+=o),o=t>n?0:n-t>>>0,t>>>=0;for(var a=r(o);++i<o;)a[i]=e[i+t];return a}function ti(e,t){var n;return cr(e,(function(e,r,i){return!(n=t(e,r,i))})),!!n}function ni(e,t,n){var r=0,i=null==e?r:e.length;if("number"==typeof t&&t==t&&i<=2147483647){for(;r<i;){var o=r+i>>>1,a=e[o];null!==a&&!ss(a)&&(n?a<=t:a<t)?r=o+1:i=o}return i}return ri(e,t,nu,n)}function ri(e,t,n,r){var o=0,a=null==e?0:e.length;if(0===a)return 0;for(var s=(t=n(t))!=t,u=null===t,l=ss(t),c=t===i;o<a;){var d=ht((o+a)/2),f=n(e[d]),h=f!==i,p=null===f,g=f==f,m=ss(f);if(s)var y=r||g;else y=c?g&&(r||h):u?g&&h&&(r||!p):l?g&&h&&!p&&(r||!m):!p&&!m&&(r?f<=t:f<t);y?o=d+1:a=d}return yn(a,4294967294)}function ii(e,t){for(var n=-1,r=e.length,i=0,o=[];++n<r;){var a=e[n],s=t?t(a):a;if(!n||!ja(s,u)){var u=s;o[i++]=0===a?0:a}}return o}function oi(e){return"number"==typeof e?e:ss(e)?f:+e}function ai(e){if("string"==typeof e)return e;if(Ua(e))return Lt(e,ai)+"";if(ss(e))return Dn?Dn.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function si(e,t,n){var r=-1,i=Pt,o=e.length,a=!0,s=[],u=s;if(n)a=!1,i=Tt;else if(o>=200){var l=t?null:Hi(e);if(l)return un(l);a=!1,i=Qt,u=new Hn}else u=t?[]:s;e:for(;++r<o;){var c=e[r],d=t?t(c):c;if(c=n||0!==c?c:0,a&&d==d){for(var f=u.length;f--;)if(u[f]===d)continue e;t&&u.push(d),s.push(c)}else i(u,d,n)||(u!==s&&u.push(d),s.push(c))}return s}function ui(e,t){return null==(e=So(e,t=mi(t,e)))||delete e[Fo(Ko(t))]}function li(e,t,n,r){return Yr(e,t,n(_r(e,t)),r)}function ci(e,t,n,r){for(var i=e.length,o=r?i:-1;(r?o--:++o<i)&&t(e[o],o,e););return n?ei(e,r?0:o,r?o+1:i):ei(e,r?o+1:0,r?i:o)}function di(e,t){var n=e;return n instanceof Bn&&(n=n.value()),Mt(t,(function(e,t){return t.func.apply(t.thisArg,Ot([e],t.args))}),n)}function fi(e,t,n){var i=e.length;if(i<2)return i?si(e[0]):[];for(var o=-1,a=r(i);++o<i;)for(var s=e[o],u=-1;++u<i;)u!=o&&(a[o]=lr(a[o]||s,e[u],t,n));return si(gr(a,1),t,n)}function hi(e,t,n){for(var r=-1,o=e.length,a=t.length,s={};++r<o;){var u=r<a?t[r]:i;n(s,e[r],u)}return s}function pi(e){return Ha(e)?e:[]}function gi(e){return"function"==typeof e?e:nu}function mi(e,t){return Ua(e)?e:vo(e,t)?[e]:zo(ys(e))}var yi=Vr;function vi(e,t,n){var r=e.length;return n=n===i?r:n,!t&&n>=r?e:ei(e,t,n)}var bi=at||function(e){return dt.clearTimeout(e)};function wi(e,t){if(t)return e.slice();var n=e.length,r=Ue?Ue(n):new e.constructor(n);return e.copy(r),r}function _i(e){var t=new e.constructor(e.byteLength);return new Be(t).set(new Be(e)),t}function xi(e,t){var n=t?_i(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function ki(e,t){if(e!==t){var n=e!==i,r=null===e,o=e==e,a=ss(e),s=t!==i,u=null===t,l=t==t,c=ss(t);if(!u&&!c&&!a&&e>t||a&&s&&l&&!u&&!c||r&&s&&l||!n&&l||!o)return 1;if(!r&&!a&&!c&&e<t||c&&n&&o&&!r&&!a||u&&n&&o||!s&&o||!l)return-1}return 0}function Ei(e,t,n,i){for(var o=-1,a=e.length,s=n.length,u=-1,l=t.length,c=mn(a-s,0),d=r(l+c),f=!i;++u<l;)d[u]=t[u];for(;++o<s;)(f||o<a)&&(d[n[o]]=e[o]);for(;c--;)d[u++]=e[o++];return d}function Si(e,t,n,i){for(var o=-1,a=e.length,s=-1,u=n.length,l=-1,c=t.length,d=mn(a-u,0),f=r(d+c),h=!i;++o<d;)f[o]=e[o];for(var p=o;++l<c;)f[p+l]=t[l];for(;++s<u;)(h||o<a)&&(f[p+n[s]]=e[o++]);return f}function Ci(e,t){var n=-1,i=e.length;for(t||(t=r(i));++n<i;)t[n]=e[n];return t}function Ai(e,t,n,r){var o=!n;n||(n={});for(var a=-1,s=t.length;++a<s;){var u=t[a],l=r?r(n[u],e[u],u,n,e):i;l===i&&(l=e[u]),o?rr(n,u,l):Jn(n,u,l)}return n}function Ri(e,t){return function(n,r){var i=Ua(n)?Et:tr,o=t?t():{};return i(n,e,oo(r,2),o)}}function Pi(e){return Vr((function(t,n){var r=-1,o=n.length,a=o>1?n[o-1]:i,s=o>2?n[2]:i;for(a=e.length>3&&"function"==typeof a?(o--,a):i,s&&yo(n[0],n[1],s)&&(a=o<3?i:a,o=1),t=Ee(t);++r<o;){var u=n[r];u&&e(t,u,r,a)}return t}))}function Ti(e,t){return function(n,r){if(null==n)return n;if(!Wa(n))return e(n,r);for(var i=n.length,o=t?i:-1,a=Ee(n);(t?o--:++o<i)&&!1!==r(a[o],o,a););return n}}function Li(e){return function(t,n,r){for(var i=-1,o=Ee(t),a=r(t),s=a.length;s--;){var u=a[e?s:++i];if(!1===n(o[u],u,o))break}return t}}function Oi(e){return function(t){var n=rn(t=ys(t))?dn(t):i,r=n?n[0]:t.charAt(0),o=n?vi(n,1).join(""):t.slice(1);return r[e]()+o}}function Mi(e){return function(t){return Mt(Ys(Bs(t).replace(Ye,"")),e,"")}}function Ni(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=jn(e.prototype),r=e.apply(n,t);return Ja(r)?r:n}}function zi(e){return function(t,n,r){var o=Ee(t);if(!Wa(t)){var a=oo(n,3);t=Ts(t),n=function(e){return a(o[e],e,o)}}var s=e(t,n,r);return s>-1?o[a?t[s]:s]:i}}function Fi(e){return Ji((function(t){var n=t.length,r=n,a=Gn.prototype.thru;for(e&&t.reverse();r--;){var s=t[r];if("function"!=typeof s)throw new Ae(o);if(a&&!u&&"wrapper"==ro(s))var u=new Gn([],!0)}for(r=u?r:n;++r<n;){var l=ro(s=t[r]),c="wrapper"==l?no(s):i;u=c&&bo(c[0])&&424==c[1]&&!c[4].length&&1==c[9]?u[ro(c[0])].apply(u,c[3]):1==s.length&&bo(s)?u[l]():u.thru(s)}return function(){var e=arguments,r=e[0];if(u&&1==e.length&&Ua(r))return u.plant(r).value();for(var i=0,o=n?t[i].apply(this,e):r;++i<n;)o=t[i].call(this,o);return o}}))}function Di(e,t,n,o,a,s,u,c,d,f){var h=t&l,p=1&t,g=2&t,m=24&t,y=512&t,v=g?i:Ni(e);return function l(){for(var b=arguments.length,w=r(b),_=b;_--;)w[_]=arguments[_];if(m)var x=io(l),k=function(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}(w,x);if(o&&(w=Ei(w,o,a,m)),s&&(w=Si(w,s,u,m)),b-=k,m&&b<f){var E=sn(w,x);return Zi(e,t,Di,l.placeholder,n,w,E,c,d,f-b)}var S=p?n:this,C=g?S[e]:e;return b=w.length,c?w=function(e,t){for(var n=e.length,r=yn(t.length,n),o=Ci(e);r--;){var a=t[r];e[r]=mo(a,n)?o[a]:i}return e}(w,c):y&&b>1&&w.reverse(),h&&d<b&&(w.length=d),this&&this!==dt&&this instanceof l&&(C=v||Ni(C)),C.apply(S,w)}}function $i(e,t){return function(n,r){return function(e,t,n,r){return vr(e,(function(e,i,o){t(r,n(e),i,o)})),r}(n,e,t(r),{})}}function ji(e,t){return function(n,r){var o;if(n===i&&r===i)return t;if(n!==i&&(o=n),r!==i){if(o===i)return r;"string"==typeof n||"string"==typeof r?(n=ai(n),r=ai(r)):(n=oi(n),r=oi(r)),o=e(n,r)}return o}}function Ii(e){return Ji((function(t){return t=Lt(t,Kt(oo())),Vr((function(n){var r=this;return e(t,(function(e){return kt(e,r,n)}))}))}))}function Gi(e,t){var n=(t=t===i?" ":ai(t)).length;if(n<2)return n?Hr(t,e):t;var r=Hr(t,ft(e/cn(t)));return rn(t)?vi(dn(r),0,e).join(""):r.slice(0,e)}function Bi(e){return function(t,n,o){return o&&"number"!=typeof o&&yo(t,n,o)&&(n=o=i),t=fs(t),n===i?(n=t,t=0):n=fs(n),function(e,t,n,i){for(var o=-1,a=mn(ft((t-e)/(n||1)),0),s=r(a);a--;)s[i?a:++o]=e,e+=n;return s}(t,n,o=o===i?t<n?1:-1:fs(o),e)}}function Ui(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=gs(t),n=gs(n)),e(t,n)}}function Zi(e,t,n,r,o,a,s,l,c,d){var f=8&t;t|=f?u:64,4&(t&=~(f?64:u))||(t&=-4);var h=[e,t,o,f?a:i,f?s:i,f?i:a,f?i:s,l,c,d],p=n.apply(i,h);return bo(e)&&Ao(p,h),p.placeholder=r,To(p,e,t)}function Wi(e){var t=ke[e];return function(e,n){if(e=gs(e),(n=null==n?0:yn(hs(n),292))&&Ft(e)){var r=(ys(e)+"e").split("e");return+((r=(ys(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var Hi=Sn&&1/un(new Sn([,-0]))[1]==c?function(e){return new Sn(e)}:su;function Vi(e){return function(t){var n=fo(t);return n==x?on(t):n==A?ln(t):function(e,t){return Lt(t,(function(t){return[t,e[t]]}))}(t,e(t))}}function qi(e,t,n,a,c,d,f,h){var p=2&t;if(!p&&"function"!=typeof e)throw new Ae(o);var g=a?a.length:0;if(g||(t&=-97,a=c=i),f=f===i?f:mn(hs(f),0),h=h===i?h:hs(h),g-=c?c.length:0,64&t){var m=a,y=c;a=c=i}var v=p?i:no(e),b=[e,t,n,a,c,m,y,d,f,h];if(v&&function(e,t){var n=e[1],r=t[1],i=n|r,o=i<131,a=r==l&&8==n||r==l&&256==n&&e[7].length<=t[8]||384==r&&t[7].length<=t[8]&&8==n;if(!o&&!a)return e;1&r&&(e[2]=t[2],i|=1&n?0:4);var u=t[3];if(u){var c=e[3];e[3]=c?Ei(c,u,t[4]):u,e[4]=c?sn(e[3],s):t[4]}(u=t[5])&&(c=e[5],e[5]=c?Si(c,u,t[6]):u,e[6]=c?sn(e[5],s):t[6]),(u=t[7])&&(e[7]=u),r&l&&(e[8]=null==e[8]?t[8]:yn(e[8],t[8])),null==e[9]&&(e[9]=t[9]),e[0]=t[0],e[1]=i}(b,v),e=b[0],t=b[1],n=b[2],a=b[3],c=b[4],!(h=b[9]=b[9]===i?p?0:e.length:mn(b[9]-g,0))&&24&t&&(t&=-25),t&&1!=t)w=8==t||16==t?function(e,t,n){var o=Ni(e);return function a(){for(var s=arguments.length,u=r(s),l=s,c=io(a);l--;)u[l]=arguments[l];var d=s<3&&u[0]!==c&&u[s-1]!==c?[]:sn(u,c);return(s-=d.length)<n?Zi(e,t,Di,a.placeholder,i,u,d,i,i,n-s):kt(this&&this!==dt&&this instanceof a?o:e,this,u)}}(e,t,h):t!=u&&33!=t||c.length?Di.apply(i,b):function(e,t,n,i){var o=1&t,a=Ni(e);return function t(){for(var s=-1,u=arguments.length,l=-1,c=i.length,d=r(c+u),f=this&&this!==dt&&this instanceof t?a:e;++l<c;)d[l]=i[l];for(;u--;)d[l++]=arguments[++s];return kt(f,o?n:this,d)}}(e,t,n,a);else var w=function(e,t,n){var r=1&t,i=Ni(e);return function t(){return(this&&this!==dt&&this instanceof t?i:e).apply(r?n:this,arguments)}}(e,t,n);return To((v?Qr:Ao)(w,b),e,t)}function Ki(e,t,n,r){return e===i||ja(e,Te[n])&&!Me.call(r,n)?t:e}function Yi(e,t,n,r,o,a){return Ja(e)&&Ja(t)&&(a.set(t,e),jr(e,t,i,Yi,a),a.delete(t)),e}function Qi(e){return rs(e)?i:e}function Xi(e,t,n,r,o,a){var s=1&n,u=e.length,l=t.length;if(u!=l&&!(s&&l>u))return!1;var c=a.get(e),d=a.get(t);if(c&&d)return c==t&&d==e;var f=-1,h=!0,p=2&n?new Hn:i;for(a.set(e,t),a.set(t,e);++f<u;){var g=e[f],m=t[f];if(r)var y=s?r(m,g,f,t,e,a):r(g,m,f,e,t,a);if(y!==i){if(y)continue;h=!1;break}if(p){if(!zt(t,(function(e,t){if(!Qt(p,t)&&(g===e||o(g,e,n,r,a)))return p.push(t)}))){h=!1;break}}else if(g!==m&&!o(g,m,n,r,a)){h=!1;break}}return a.delete(e),a.delete(t),h}function Ji(e){return Po(Eo(e,i,Zo),e+"")}function eo(e){return xr(e,Ts,lo)}function to(e){return xr(e,Ls,co)}var no=Rn?function(e){return Rn.get(e)}:su;function ro(e){for(var t=e.name+"",n=Pn[t],r=Me.call(Pn,t)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==e)return i.name}return t}function io(e){return(Me.call($n,"placeholder")?$n:e).placeholder}function oo(){var e=$n.iteratee||ru;return e=e===ru?Mr:e,arguments.length?e(arguments[0],arguments[1]):e}function ao(e,t){var n,r,i=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof t?"string":"hash"]:i.map}function so(e){for(var t=Ts(e),n=t.length;n--;){var r=t[n],i=e[r];t[n]=[r,i,xo(i)]}return t}function uo(e,t){var n=function(e,t){return null==e?i:e[t]}(e,t);return Or(n)?n:i}var lo=gt?function(e){return null==e?[]:(e=Ee(e),Rt(gt(e),(function(t){return He.call(e,t)})))}:pu,co=gt?function(e){for(var t=[];e;)Ot(t,lo(e)),e=Ze(e);return t}:pu,fo=kr;function ho(e,t,n){for(var r=-1,i=(t=mi(t,e)).length,o=!1;++r<i;){var a=Fo(t[r]);if(!(o=null!=e&&n(e,a)))break;e=e[a]}return o||++r!=i?o:!!(i=null==e?0:e.length)&&Xa(i)&&mo(a,i)&&(Ua(e)||Ba(e))}function po(e){return"function"!=typeof e.constructor||_o(e)?{}:jn(Ze(e))}function go(e){return Ua(e)||Ba(e)||!!(qe&&e&&e[qe])}function mo(e,t){var n=typeof e;return!!(t=null==t?d:t)&&("number"==n||"symbol"!=n&&ye.test(e))&&e>-1&&e%1==0&&e<t}function yo(e,t,n){if(!Ja(n))return!1;var r=typeof t;return!!("number"==r?Wa(n)&&mo(t,n.length):"string"==r&&t in n)&&ja(n[t],e)}function vo(e,t){if(Ua(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!ss(e))||J.test(e)||!X.test(e)||null!=t&&e in Ee(t)}function bo(e){var t=ro(e),n=$n[t];if("function"!=typeof n||!(t in Bn.prototype))return!1;if(e===n)return!0;var r=no(n);return!!r&&e===r[0]}(xn&&fo(new xn(new ArrayBuffer(1)))!=O||kn&&fo(new kn)!=x||En&&fo(En.resolve())!=S||Sn&&fo(new Sn)!=A||Cn&&fo(new Cn)!=T)&&(fo=function(e){var t=kr(e),n=t==E?e.constructor:i,r=n?Do(n):"";if(r)switch(r){case Tn:return O;case Ln:return x;case On:return S;case Mn:return A;case Nn:return T}return t});var wo=Le?Ya:gu;function _o(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||Te)}function xo(e){return e==e&&!Ja(e)}function ko(e,t){return function(n){return null!=n&&n[e]===t&&(t!==i||e in Ee(n))}}function Eo(e,t,n){return t=mn(t===i?e.length-1:t,0),function(){for(var i=arguments,o=-1,a=mn(i.length-t,0),s=r(a);++o<a;)s[o]=i[t+o];o=-1;for(var u=r(t+1);++o<t;)u[o]=i[o];return u[t]=n(s),kt(e,this,u)}}function So(e,t){return t.length<2?e:_r(e,ei(t,0,-1))}function Co(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var Ao=Lo(Qr),Ro=ct||function(e,t){return dt.setTimeout(e,t)},Po=Lo(Xr);function To(e,t,n){var r=t+"";return Po(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(oe,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return St(p,(function(n){var r="_."+n[0];t&n[1]&&!Pt(e,r)&&e.push(r)})),e.sort()}(function(e){var t=e.match(ae);return t?t[1].split(se):[]}(r),n)))}function Lo(e){var t=0,n=0;return function(){var r=vn(),o=16-(r-n);if(n=r,o>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(i,arguments)}}function Oo(e,t){var n=-1,r=e.length,o=r-1;for(t=t===i?r:t;++n<t;){var a=Wr(n,o),s=e[a];e[a]=e[n],e[n]=s}return e.length=t,e}var Mo,No,zo=(Mo=Ma((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(ee,(function(e,n,r,i){t.push(r?i.replace(ce,"$1"):n||e)})),t}),(function(e){return 500===No.size&&No.clear(),e})),No=Mo.cache,Mo);function Fo(e){if("string"==typeof e||ss(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function Do(e){if(null!=e){try{return Oe.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function $o(e){if(e instanceof Bn)return e.clone();var t=new Gn(e.__wrapped__,e.__chain__);return t.__actions__=Ci(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var jo=Vr((function(e,t){return Ha(e)?lr(e,gr(t,1,Ha,!0)):[]})),Io=Vr((function(e,t){var n=Ko(t);return Ha(n)&&(n=i),Ha(e)?lr(e,gr(t,1,Ha,!0),oo(n,2)):[]})),Go=Vr((function(e,t){var n=Ko(t);return Ha(n)&&(n=i),Ha(e)?lr(e,gr(t,1,Ha,!0),i,n):[]}));function Bo(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:hs(n);return i<0&&(i=mn(r+i,0)),$t(e,oo(t,3),i)}function Uo(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r-1;return n!==i&&(o=hs(n),o=n<0?mn(r+o,0):yn(o,r-1)),$t(e,oo(t,3),o,!0)}function Zo(e){return null!=e&&e.length?gr(e,1):[]}function Wo(e){return e&&e.length?e[0]:i}var Ho=Vr((function(e){var t=Lt(e,pi);return t.length&&t[0]===e[0]?Ar(t):[]})),Vo=Vr((function(e){var t=Ko(e),n=Lt(e,pi);return t===Ko(n)?t=i:n.pop(),n.length&&n[0]===e[0]?Ar(n,oo(t,2)):[]})),qo=Vr((function(e){var t=Ko(e),n=Lt(e,pi);return(t="function"==typeof t?t:i)&&n.pop(),n.length&&n[0]===e[0]?Ar(n,i,t):[]}));function Ko(e){var t=null==e?0:e.length;return t?e[t-1]:i}var Yo=Vr(Qo);function Qo(e,t){return e&&e.length&&t&&t.length?Ur(e,t):e}var Xo=Ji((function(e,t){var n=null==e?0:e.length,r=ir(e,t);return Zr(e,Lt(t,(function(e){return mo(e,n)?+e:e})).sort(ki)),r}));function Jo(e){return null==e?e:_n.call(e)}var ea=Vr((function(e){return si(gr(e,1,Ha,!0))})),ta=Vr((function(e){var t=Ko(e);return Ha(t)&&(t=i),si(gr(e,1,Ha,!0),oo(t,2))})),na=Vr((function(e){var t=Ko(e);return t="function"==typeof t?t:i,si(gr(e,1,Ha,!0),i,t)}));function ra(e){if(!e||!e.length)return[];var t=0;return e=Rt(e,(function(e){if(Ha(e))return t=mn(e.length,t),!0})),Vt(t,(function(t){return Lt(e,Ut(t))}))}function ia(e,t){if(!e||!e.length)return[];var n=ra(e);return null==t?n:Lt(n,(function(e){return kt(t,i,e)}))}var oa=Vr((function(e,t){return Ha(e)?lr(e,t):[]})),aa=Vr((function(e){return fi(Rt(e,Ha))})),sa=Vr((function(e){var t=Ko(e);return Ha(t)&&(t=i),fi(Rt(e,Ha),oo(t,2))})),ua=Vr((function(e){var t=Ko(e);return t="function"==typeof t?t:i,fi(Rt(e,Ha),i,t)})),la=Vr(ra),ca=Vr((function(e){var t=e.length,n=t>1?e[t-1]:i;return n="function"==typeof n?(e.pop(),n):i,ia(e,n)}));function da(e){var t=$n(e);return t.__chain__=!0,t}function fa(e,t){return t(e)}var ha=Ji((function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,o=function(t){return ir(t,e)};return!(t>1||this.__actions__.length)&&r instanceof Bn&&mo(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:fa,args:[o],thisArg:i}),new Gn(r,this.__chain__).thru((function(e){return t&&!e.length&&e.push(i),e}))):this.thru(o)})),pa=Ri((function(e,t,n){Me.call(e,n)?++e[n]:rr(e,n,1)})),ga=zi(Bo),ma=zi(Uo);function ya(e,t){return(Ua(e)?St:cr)(e,oo(t,3))}function va(e,t){return(Ua(e)?Ct:dr)(e,oo(t,3))}var ba=Ri((function(e,t,n){Me.call(e,n)?e[n].push(t):rr(e,n,[t])})),wa=Vr((function(e,t,n){var i=-1,o="function"==typeof t,a=Wa(e)?r(e.length):[];return cr(e,(function(e){a[++i]=o?kt(t,e,n):Rr(e,t,n)})),a})),_a=Ri((function(e,t,n){rr(e,n,t)}));function xa(e,t){return(Ua(e)?Lt:Fr)(e,oo(t,3))}var ka=Ri((function(e,t,n){e[n?0:1].push(t)}),(function(){return[[],[]]})),Ea=Vr((function(e,t){if(null==e)return[];var n=t.length;return n>1&&yo(e,t[0],t[1])?t=[]:n>2&&yo(t[0],t[1],t[2])&&(t=[t[0]]),Gr(e,gr(t,1),[])})),Sa=lt||function(){return dt.Date.now()};function Ca(e,t,n){return t=n?i:t,t=e&&null==t?e.length:t,qi(e,l,i,i,i,i,t)}function Aa(e,t){var n;if("function"!=typeof t)throw new Ae(o);return e=hs(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=i),n}}var Ra=Vr((function(e,t,n){var r=1;if(n.length){var i=sn(n,io(Ra));r|=u}return qi(e,r,t,n,i)})),Pa=Vr((function(e,t,n){var r=3;if(n.length){var i=sn(n,io(Pa));r|=u}return qi(t,r,e,n,i)}));function Ta(e,t,n){var r,a,s,u,l,c,d=0,f=!1,h=!1,p=!0;if("function"!=typeof e)throw new Ae(o);function g(t){var n=r,o=a;return r=a=i,d=t,u=e.apply(o,n)}function m(e){var n=e-c;return c===i||n>=t||n<0||h&&e-d>=s}function y(){var e=Sa();if(m(e))return v(e);l=Ro(y,function(e){var n=t-(e-c);return h?yn(n,s-(e-d)):n}(e))}function v(e){return l=i,p&&r?g(e):(r=a=i,u)}function b(){var e=Sa(),n=m(e);if(r=arguments,a=this,c=e,n){if(l===i)return function(e){return d=e,l=Ro(y,t),f?g(e):u}(c);if(h)return bi(l),l=Ro(y,t),g(c)}return l===i&&(l=Ro(y,t)),u}return t=gs(t)||0,Ja(n)&&(f=!!n.leading,s=(h="maxWait"in n)?mn(gs(n.maxWait)||0,t):s,p="trailing"in n?!!n.trailing:p),b.cancel=function(){l!==i&&bi(l),d=0,r=c=a=l=i},b.flush=function(){return l===i?u:v(Sa())},b}var La=Vr((function(e,t){return ur(e,1,t)})),Oa=Vr((function(e,t,n){return ur(e,gs(t)||0,n)}));function Ma(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new Ae(o);var n=function(){var r=arguments,i=t?t.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=e.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(Ma.Cache||Wn),n}function Na(e){if("function"!=typeof e)throw new Ae(o);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}Ma.Cache=Wn;var za=yi((function(e,t){var n=(t=1==t.length&&Ua(t[0])?Lt(t[0],Kt(oo())):Lt(gr(t,1),Kt(oo()))).length;return Vr((function(r){for(var i=-1,o=yn(r.length,n);++i<o;)r[i]=t[i].call(this,r[i]);return kt(e,this,r)}))})),Fa=Vr((function(e,t){var n=sn(t,io(Fa));return qi(e,u,i,t,n)})),Da=Vr((function(e,t){var n=sn(t,io(Da));return qi(e,64,i,t,n)})),$a=Ji((function(e,t){return qi(e,256,i,i,i,t)}));function ja(e,t){return e===t||e!=e&&t!=t}var Ia=Ui(Er),Ga=Ui((function(e,t){return e>=t})),Ba=Pr(function(){return arguments}())?Pr:function(e){return es(e)&&Me.call(e,"callee")&&!He.call(e,"callee")},Ua=r.isArray,Za=yt?Kt(yt):function(e){return es(e)&&kr(e)==L};function Wa(e){return null!=e&&Xa(e.length)&&!Ya(e)}function Ha(e){return es(e)&&Wa(e)}var Va=mt||gu,qa=vt?Kt(vt):function(e){return es(e)&&kr(e)==v};function Ka(e){if(!es(e))return!1;var t=kr(e);return t==b||"[object DOMException]"==t||"string"==typeof e.message&&"string"==typeof e.name&&!rs(e)}function Ya(e){if(!Ja(e))return!1;var t=kr(e);return t==w||t==_||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Qa(e){return"number"==typeof e&&e==hs(e)}function Xa(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=d}function Ja(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function es(e){return null!=e&&"object"==typeof e}var ts=bt?Kt(bt):function(e){return es(e)&&fo(e)==x};function ns(e){return"number"==typeof e||es(e)&&kr(e)==k}function rs(e){if(!es(e)||kr(e)!=E)return!1;var t=Ze(e);if(null===t)return!0;var n=Me.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&Oe.call(n)==De}var is=wt?Kt(wt):function(e){return es(e)&&kr(e)==C},os=_t?Kt(_t):function(e){return es(e)&&fo(e)==A};function as(e){return"string"==typeof e||!Ua(e)&&es(e)&&kr(e)==R}function ss(e){return"symbol"==typeof e||es(e)&&kr(e)==P}var us=xt?Kt(xt):function(e){return es(e)&&Xa(e.length)&&!!it[kr(e)]},ls=Ui(zr),cs=Ui((function(e,t){return e<=t}));function ds(e){if(!e)return[];if(Wa(e))return as(e)?dn(e):Ci(e);if(Ke&&e[Ke])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[Ke]());var t=fo(e);return(t==x?on:t==A?un:js)(e)}function fs(e){return e?(e=gs(e))===c||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}function hs(e){var t=fs(e),n=t%1;return t==t?n?t-n:t:0}function ps(e){return e?or(hs(e),0,h):0}function gs(e){if("number"==typeof e)return e;if(ss(e))return f;if(Ja(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Ja(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=qt(e);var n=pe.test(e);return n||me.test(e)?ut(e.slice(2),n?2:8):he.test(e)?f:+e}function ms(e){return Ai(e,Ls(e))}function ys(e){return null==e?"":ai(e)}var vs=Pi((function(e,t){if(_o(t)||Wa(t))Ai(t,Ts(t),e);else for(var n in t)Me.call(t,n)&&Jn(e,n,t[n])})),bs=Pi((function(e,t){Ai(t,Ls(t),e)})),ws=Pi((function(e,t,n,r){Ai(t,Ls(t),e,r)})),_s=Pi((function(e,t,n,r){Ai(t,Ts(t),e,r)})),xs=Ji(ir),ks=Vr((function(e,t){e=Ee(e);var n=-1,r=t.length,o=r>2?t[2]:i;for(o&&yo(t[0],t[1],o)&&(r=1);++n<r;)for(var a=t[n],s=Ls(a),u=-1,l=s.length;++u<l;){var c=s[u],d=e[c];(d===i||ja(d,Te[c])&&!Me.call(e,c))&&(e[c]=a[c])}return e})),Es=Vr((function(e){return e.push(i,Yi),kt(Ms,i,e)}));function Ss(e,t,n){var r=null==e?i:_r(e,t);return r===i?n:r}function Cs(e,t){return null!=e&&ho(e,t,Cr)}var As=$i((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Fe.call(t)),e[t]=n}),Js(nu)),Rs=$i((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Fe.call(t)),Me.call(e,t)?e[t].push(n):e[t]=[n]}),oo),Ps=Vr(Rr);function Ts(e){return Wa(e)?qn(e):Nr(e)}function Ls(e){return Wa(e)?qn(e,!0):function(e){if(!Ja(e))return function(e){var t=[];if(null!=e)for(var n in Ee(e))t.push(n);return t}(e);var t=_o(e),n=[];for(var r in e)("constructor"!=r||!t&&Me.call(e,r))&&n.push(r);return n}(e)}var Os=Pi((function(e,t,n){jr(e,t,n)})),Ms=Pi((function(e,t,n,r){jr(e,t,n,r)})),Ns=Ji((function(e,t){var n={};if(null==e)return n;var r=!1;t=Lt(t,(function(t){return t=mi(t,e),r||(r=t.length>1),t})),Ai(e,to(e),n),r&&(n=ar(n,7,Qi));for(var i=t.length;i--;)ui(n,t[i]);return n})),zs=Ji((function(e,t){return null==e?{}:function(e,t){return Br(e,t,(function(t,n){return Cs(e,n)}))}(e,t)}));function Fs(e,t){if(null==e)return{};var n=Lt(to(e),(function(e){return[e]}));return t=oo(t),Br(e,n,(function(e,n){return t(e,n[0])}))}var Ds=Vi(Ts),$s=Vi(Ls);function js(e){return null==e?[]:Yt(e,Ts(e))}var Is=Mi((function(e,t,n){return t=t.toLowerCase(),e+(n?Gs(t):t)}));function Gs(e){return Ks(ys(e).toLowerCase())}function Bs(e){return(e=ys(e))&&e.replace(ve,en).replace(Qe,"")}var Us=Mi((function(e,t,n){return e+(n?"-":"")+t.toLowerCase()})),Zs=Mi((function(e,t,n){return e+(n?" ":"")+t.toLowerCase()})),Ws=Oi("toLowerCase"),Hs=Mi((function(e,t,n){return e+(n?"_":"")+t.toLowerCase()})),Vs=Mi((function(e,t,n){return e+(n?" ":"")+Ks(t)})),qs=Mi((function(e,t,n){return e+(n?" ":"")+t.toUpperCase()})),Ks=Oi("toUpperCase");function Ys(e,t,n){return e=ys(e),(t=n?i:t)===i?function(e){return tt.test(e)}(e)?function(e){return e.match(Je)||[]}(e):function(e){return e.match(ue)||[]}(e):e.match(t)||[]}var Qs=Vr((function(e,t){try{return kt(e,i,t)}catch(e){return Ka(e)?e:new _e(e)}})),Xs=Ji((function(e,t){return St(t,(function(t){t=Fo(t),rr(e,t,Ra(e[t],e))})),e}));function Js(e){return function(){return e}}var eu=Fi(),tu=Fi(!0);function nu(e){return e}function ru(e){return Mr("function"==typeof e?e:ar(e,1))}var iu=Vr((function(e,t){return function(n){return Rr(n,e,t)}})),ou=Vr((function(e,t){return function(n){return Rr(e,n,t)}}));function au(e,t,n){var r=Ts(t),i=wr(t,r);null!=n||Ja(t)&&(i.length||!r.length)||(n=t,t=e,e=this,i=wr(t,Ts(t)));var o=!(Ja(n)&&"chain"in n&&!n.chain),a=Ya(e);return St(i,(function(n){var r=t[n];e[n]=r,a&&(e.prototype[n]=function(){var t=this.__chain__;if(o||t){var n=e(this.__wrapped__);return(n.__actions__=Ci(this.__actions__)).push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,Ot([this.value()],arguments))})})),e}function su(){}var uu=Ii(Lt),lu=Ii(At),cu=Ii(zt);function du(e){return vo(e)?Ut(Fo(e)):function(e){return function(t){return _r(t,e)}}(e)}var fu=Bi(),hu=Bi(!0);function pu(){return[]}function gu(){return!1}var mu,yu=ji((function(e,t){return e+t}),0),vu=Wi("ceil"),bu=ji((function(e,t){return e/t}),1),wu=Wi("floor"),_u=ji((function(e,t){return e*t}),1),xu=Wi("round"),ku=ji((function(e,t){return e-t}),0);return $n.after=function(e,t){if("function"!=typeof t)throw new Ae(o);return e=hs(e),function(){if(--e<1)return t.apply(this,arguments)}},$n.ary=Ca,$n.assign=vs,$n.assignIn=bs,$n.assignInWith=ws,$n.assignWith=_s,$n.at=xs,$n.before=Aa,$n.bind=Ra,$n.bindAll=Xs,$n.bindKey=Pa,$n.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return Ua(e)?e:[e]},$n.chain=da,$n.chunk=function(e,t,n){t=(n?yo(e,t,n):t===i)?1:mn(hs(t),0);var o=null==e?0:e.length;if(!o||t<1)return[];for(var a=0,s=0,u=r(ft(o/t));a<o;)u[s++]=ei(e,a,a+=t);return u},$n.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,i=[];++t<n;){var o=e[t];o&&(i[r++]=o)}return i},$n.concat=function(){var e=arguments.length;if(!e)return[];for(var t=r(e-1),n=arguments[0],i=e;i--;)t[i-1]=arguments[i];return Ot(Ua(n)?Ci(n):[n],gr(t,1))},$n.cond=function(e){var t=null==e?0:e.length,n=oo();return e=t?Lt(e,(function(e){if("function"!=typeof e[1])throw new Ae(o);return[n(e[0]),e[1]]})):[],Vr((function(n){for(var r=-1;++r<t;){var i=e[r];if(kt(i[0],this,n))return kt(i[1],this,n)}}))},$n.conforms=function(e){return function(e){var t=Ts(e);return function(n){return sr(n,e,t)}}(ar(e,1))},$n.constant=Js,$n.countBy=pa,$n.create=function(e,t){var n=jn(e);return null==t?n:nr(n,t)},$n.curry=function e(t,n,r){var o=qi(t,8,i,i,i,i,i,n=r?i:n);return o.placeholder=e.placeholder,o},$n.curryRight=function e(t,n,r){var o=qi(t,16,i,i,i,i,i,n=r?i:n);return o.placeholder=e.placeholder,o},$n.debounce=Ta,$n.defaults=ks,$n.defaultsDeep=Es,$n.defer=La,$n.delay=Oa,$n.difference=jo,$n.differenceBy=Io,$n.differenceWith=Go,$n.drop=function(e,t,n){var r=null==e?0:e.length;return r?ei(e,(t=n||t===i?1:hs(t))<0?0:t,r):[]},$n.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?ei(e,0,(t=r-(t=n||t===i?1:hs(t)))<0?0:t):[]},$n.dropRightWhile=function(e,t){return e&&e.length?ci(e,oo(t,3),!0,!0):[]},$n.dropWhile=function(e,t){return e&&e.length?ci(e,oo(t,3),!0):[]},$n.fill=function(e,t,n,r){var o=null==e?0:e.length;return o?(n&&"number"!=typeof n&&yo(e,t,n)&&(n=0,r=o),function(e,t,n,r){var o=e.length;for((n=hs(n))<0&&(n=-n>o?0:o+n),(r=r===i||r>o?o:hs(r))<0&&(r+=o),r=n>r?0:ps(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},$n.filter=function(e,t){return(Ua(e)?Rt:pr)(e,oo(t,3))},$n.flatMap=function(e,t){return gr(xa(e,t),1)},$n.flatMapDeep=function(e,t){return gr(xa(e,t),c)},$n.flatMapDepth=function(e,t,n){return n=n===i?1:hs(n),gr(xa(e,t),n)},$n.flatten=Zo,$n.flattenDeep=function(e){return null!=e&&e.length?gr(e,c):[]},$n.flattenDepth=function(e,t){return null!=e&&e.length?gr(e,t=t===i?1:hs(t)):[]},$n.flip=function(e){return qi(e,512)},$n.flow=eu,$n.flowRight=tu,$n.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var i=e[t];r[i[0]]=i[1]}return r},$n.functions=function(e){return null==e?[]:wr(e,Ts(e))},$n.functionsIn=function(e){return null==e?[]:wr(e,Ls(e))},$n.groupBy=ba,$n.initial=function(e){return null!=e&&e.length?ei(e,0,-1):[]},$n.intersection=Ho,$n.intersectionBy=Vo,$n.intersectionWith=qo,$n.invert=As,$n.invertBy=Rs,$n.invokeMap=wa,$n.iteratee=ru,$n.keyBy=_a,$n.keys=Ts,$n.keysIn=Ls,$n.map=xa,$n.mapKeys=function(e,t){var n={};return t=oo(t,3),vr(e,(function(e,r,i){rr(n,t(e,r,i),e)})),n},$n.mapValues=function(e,t){var n={};return t=oo(t,3),vr(e,(function(e,r,i){rr(n,r,t(e,r,i))})),n},$n.matches=function(e){return Dr(ar(e,1))},$n.matchesProperty=function(e,t){return $r(e,ar(t,1))},$n.memoize=Ma,$n.merge=Os,$n.mergeWith=Ms,$n.method=iu,$n.methodOf=ou,$n.mixin=au,$n.negate=Na,$n.nthArg=function(e){return e=hs(e),Vr((function(t){return Ir(t,e)}))},$n.omit=Ns,$n.omitBy=function(e,t){return Fs(e,Na(oo(t)))},$n.once=function(e){return Aa(2,e)},$n.orderBy=function(e,t,n,r){return null==e?[]:(Ua(t)||(t=null==t?[]:[t]),Ua(n=r?i:n)||(n=null==n?[]:[n]),Gr(e,t,n))},$n.over=uu,$n.overArgs=za,$n.overEvery=lu,$n.overSome=cu,$n.partial=Fa,$n.partialRight=Da,$n.partition=ka,$n.pick=zs,$n.pickBy=Fs,$n.property=du,$n.propertyOf=function(e){return function(t){return null==e?i:_r(e,t)}},$n.pull=Yo,$n.pullAll=Qo,$n.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?Ur(e,t,oo(n,2)):e},$n.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?Ur(e,t,i,n):e},$n.pullAt=Xo,$n.range=fu,$n.rangeRight=hu,$n.rearg=$a,$n.reject=function(e,t){return(Ua(e)?Rt:pr)(e,Na(oo(t,3)))},$n.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,i=[],o=e.length;for(t=oo(t,3);++r<o;){var a=e[r];t(a,r,e)&&(n.push(a),i.push(r))}return Zr(e,i),n},$n.rest=function(e,t){if("function"!=typeof e)throw new Ae(o);return Vr(e,t=t===i?t:hs(t))},$n.reverse=Jo,$n.sampleSize=function(e,t,n){return t=(n?yo(e,t,n):t===i)?1:hs(t),(Ua(e)?Yn:Kr)(e,t)},$n.set=function(e,t,n){return null==e?e:Yr(e,t,n)},$n.setWith=function(e,t,n,r){return r="function"==typeof r?r:i,null==e?e:Yr(e,t,n,r)},$n.shuffle=function(e){return(Ua(e)?Qn:Jr)(e)},$n.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&yo(e,t,n)?(t=0,n=r):(t=null==t?0:hs(t),n=n===i?r:hs(n)),ei(e,t,n)):[]},$n.sortBy=Ea,$n.sortedUniq=function(e){return e&&e.length?ii(e):[]},$n.sortedUniqBy=function(e,t){return e&&e.length?ii(e,oo(t,2)):[]},$n.split=function(e,t,n){return n&&"number"!=typeof n&&yo(e,t,n)&&(t=n=i),(n=n===i?h:n>>>0)?(e=ys(e))&&("string"==typeof t||null!=t&&!is(t))&&!(t=ai(t))&&rn(e)?vi(dn(e),0,n):e.split(t,n):[]},$n.spread=function(e,t){if("function"!=typeof e)throw new Ae(o);return t=null==t?0:mn(hs(t),0),Vr((function(n){var r=n[t],i=vi(n,0,t);return r&&Ot(i,r),kt(e,this,i)}))},$n.tail=function(e){var t=null==e?0:e.length;return t?ei(e,1,t):[]},$n.take=function(e,t,n){return e&&e.length?ei(e,0,(t=n||t===i?1:hs(t))<0?0:t):[]},$n.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?ei(e,(t=r-(t=n||t===i?1:hs(t)))<0?0:t,r):[]},$n.takeRightWhile=function(e,t){return e&&e.length?ci(e,oo(t,3),!1,!0):[]},$n.takeWhile=function(e,t){return e&&e.length?ci(e,oo(t,3)):[]},$n.tap=function(e,t){return t(e),e},$n.throttle=function(e,t,n){var r=!0,i=!0;if("function"!=typeof e)throw new Ae(o);return Ja(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),Ta(e,t,{leading:r,maxWait:t,trailing:i})},$n.thru=fa,$n.toArray=ds,$n.toPairs=Ds,$n.toPairsIn=$s,$n.toPath=function(e){return Ua(e)?Lt(e,Fo):ss(e)?[e]:Ci(zo(ys(e)))},$n.toPlainObject=ms,$n.transform=function(e,t,n){var r=Ua(e),i=r||Va(e)||us(e);if(t=oo(t,4),null==n){var o=e&&e.constructor;n=i?r?new o:[]:Ja(e)&&Ya(o)?jn(Ze(e)):{}}return(i?St:vr)(e,(function(e,r,i){return t(n,e,r,i)})),n},$n.unary=function(e){return Ca(e,1)},$n.union=ea,$n.unionBy=ta,$n.unionWith=na,$n.uniq=function(e){return e&&e.length?si(e):[]},$n.uniqBy=function(e,t){return e&&e.length?si(e,oo(t,2)):[]},$n.uniqWith=function(e,t){return t="function"==typeof t?t:i,e&&e.length?si(e,i,t):[]},$n.unset=function(e,t){return null==e||ui(e,t)},$n.unzip=ra,$n.unzipWith=ia,$n.update=function(e,t,n){return null==e?e:li(e,t,gi(n))},$n.updateWith=function(e,t,n,r){return r="function"==typeof r?r:i,null==e?e:li(e,t,gi(n),r)},$n.values=js,$n.valuesIn=function(e){return null==e?[]:Yt(e,Ls(e))},$n.without=oa,$n.words=Ys,$n.wrap=function(e,t){return Fa(gi(t),e)},$n.xor=aa,$n.xorBy=sa,$n.xorWith=ua,$n.zip=la,$n.zipObject=function(e,t){return hi(e||[],t||[],Jn)},$n.zipObjectDeep=function(e,t){return hi(e||[],t||[],Yr)},$n.zipWith=ca,$n.entries=Ds,$n.entriesIn=$s,$n.extend=bs,$n.extendWith=ws,au($n,$n),$n.add=yu,$n.attempt=Qs,$n.camelCase=Is,$n.capitalize=Gs,$n.ceil=vu,$n.clamp=function(e,t,n){return n===i&&(n=t,t=i),n!==i&&(n=(n=gs(n))==n?n:0),t!==i&&(t=(t=gs(t))==t?t:0),or(gs(e),t,n)},$n.clone=function(e){return ar(e,4)},$n.cloneDeep=function(e){return ar(e,5)},$n.cloneDeepWith=function(e,t){return ar(e,5,t="function"==typeof t?t:i)},$n.cloneWith=function(e,t){return ar(e,4,t="function"==typeof t?t:i)},$n.conformsTo=function(e,t){return null==t||sr(e,t,Ts(t))},$n.deburr=Bs,$n.defaultTo=function(e,t){return null==e||e!=e?t:e},$n.divide=bu,$n.endsWith=function(e,t,n){e=ys(e),t=ai(t);var r=e.length,o=n=n===i?r:or(hs(n),0,r);return(n-=t.length)>=0&&e.slice(n,o)==t},$n.eq=ja,$n.escape=function(e){return(e=ys(e))&&q.test(e)?e.replace(H,tn):e},$n.escapeRegExp=function(e){return(e=ys(e))&&ne.test(e)?e.replace(te,"\\$&"):e},$n.every=function(e,t,n){var r=Ua(e)?At:fr;return n&&yo(e,t,n)&&(t=i),r(e,oo(t,3))},$n.find=ga,$n.findIndex=Bo,$n.findKey=function(e,t){return Dt(e,oo(t,3),vr)},$n.findLast=ma,$n.findLastIndex=Uo,$n.findLastKey=function(e,t){return Dt(e,oo(t,3),br)},$n.floor=wu,$n.forEach=ya,$n.forEachRight=va,$n.forIn=function(e,t){return null==e?e:mr(e,oo(t,3),Ls)},$n.forInRight=function(e,t){return null==e?e:yr(e,oo(t,3),Ls)},$n.forOwn=function(e,t){return e&&vr(e,oo(t,3))},$n.forOwnRight=function(e,t){return e&&br(e,oo(t,3))},$n.get=Ss,$n.gt=Ia,$n.gte=Ga,$n.has=function(e,t){return null!=e&&ho(e,t,Sr)},$n.hasIn=Cs,$n.head=Wo,$n.identity=nu,$n.includes=function(e,t,n,r){e=Wa(e)?e:js(e),n=n&&!r?hs(n):0;var i=e.length;return n<0&&(n=mn(i+n,0)),as(e)?n<=i&&e.indexOf(t,n)>-1:!!i&&jt(e,t,n)>-1},$n.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:hs(n);return i<0&&(i=mn(r+i,0)),jt(e,t,i)},$n.inRange=function(e,t,n){return t=fs(t),n===i?(n=t,t=0):n=fs(n),function(e,t,n){return e>=yn(t,n)&&e<mn(t,n)}(e=gs(e),t,n)},$n.invoke=Ps,$n.isArguments=Ba,$n.isArray=Ua,$n.isArrayBuffer=Za,$n.isArrayLike=Wa,$n.isArrayLikeObject=Ha,$n.isBoolean=function(e){return!0===e||!1===e||es(e)&&kr(e)==y},$n.isBuffer=Va,$n.isDate=qa,$n.isElement=function(e){return es(e)&&1===e.nodeType&&!rs(e)},$n.isEmpty=function(e){if(null==e)return!0;if(Wa(e)&&(Ua(e)||"string"==typeof e||"function"==typeof e.splice||Va(e)||us(e)||Ba(e)))return!e.length;var t=fo(e);if(t==x||t==A)return!e.size;if(_o(e))return!Nr(e).length;for(var n in e)if(Me.call(e,n))return!1;return!0},$n.isEqual=function(e,t){return Tr(e,t)},$n.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:i)?n(e,t):i;return r===i?Tr(e,t,i,n):!!r},$n.isError=Ka,$n.isFinite=function(e){return"number"==typeof e&&Ft(e)},$n.isFunction=Ya,$n.isInteger=Qa,$n.isLength=Xa,$n.isMap=ts,$n.isMatch=function(e,t){return e===t||Lr(e,t,so(t))},$n.isMatchWith=function(e,t,n){return n="function"==typeof n?n:i,Lr(e,t,so(t),n)},$n.isNaN=function(e){return ns(e)&&e!=+e},$n.isNative=function(e){if(wo(e))throw new _e("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Or(e)},$n.isNil=function(e){return null==e},$n.isNull=function(e){return null===e},$n.isNumber=ns,$n.isObject=Ja,$n.isObjectLike=es,$n.isPlainObject=rs,$n.isRegExp=is,$n.isSafeInteger=function(e){return Qa(e)&&e>=-9007199254740991&&e<=d},$n.isSet=os,$n.isString=as,$n.isSymbol=ss,$n.isTypedArray=us,$n.isUndefined=function(e){return e===i},$n.isWeakMap=function(e){return es(e)&&fo(e)==T},$n.isWeakSet=function(e){return es(e)&&"[object WeakSet]"==kr(e)},$n.join=function(e,t){return null==e?"":Zt.call(e,t)},$n.kebabCase=Us,$n.last=Ko,$n.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r;return n!==i&&(o=(o=hs(n))<0?mn(r+o,0):yn(o,r-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,o):$t(e,Gt,o,!0)},$n.lowerCase=Zs,$n.lowerFirst=Ws,$n.lt=ls,$n.lte=cs,$n.max=function(e){return e&&e.length?hr(e,nu,Er):i},$n.maxBy=function(e,t){return e&&e.length?hr(e,oo(t,2),Er):i},$n.mean=function(e){return Bt(e,nu)},$n.meanBy=function(e,t){return Bt(e,oo(t,2))},$n.min=function(e){return e&&e.length?hr(e,nu,zr):i},$n.minBy=function(e,t){return e&&e.length?hr(e,oo(t,2),zr):i},$n.stubArray=pu,$n.stubFalse=gu,$n.stubObject=function(){return{}},$n.stubString=function(){return""},$n.stubTrue=function(){return!0},$n.multiply=_u,$n.nth=function(e,t){return e&&e.length?Ir(e,hs(t)):i},$n.noConflict=function(){return dt._===this&&(dt._=$e),this},$n.noop=su,$n.now=Sa,$n.pad=function(e,t,n){e=ys(e);var r=(t=hs(t))?cn(e):0;if(!t||r>=t)return e;var i=(t-r)/2;return Gi(ht(i),n)+e+Gi(ft(i),n)},$n.padEnd=function(e,t,n){e=ys(e);var r=(t=hs(t))?cn(e):0;return t&&r<t?e+Gi(t-r,n):e},$n.padStart=function(e,t,n){e=ys(e);var r=(t=hs(t))?cn(e):0;return t&&r<t?Gi(t-r,n)+e:e},$n.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),bn(ys(e).replace(re,""),t||0)},$n.random=function(e,t,n){if(n&&"boolean"!=typeof n&&yo(e,t,n)&&(t=n=i),n===i&&("boolean"==typeof t?(n=t,t=i):"boolean"==typeof e&&(n=e,e=i)),e===i&&t===i?(e=0,t=1):(e=fs(e),t===i?(t=e,e=0):t=fs(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var o=wn();return yn(e+o*(t-e+st("1e-"+((o+"").length-1))),t)}return Wr(e,t)},$n.reduce=function(e,t,n){var r=Ua(e)?Mt:Wt,i=arguments.length<3;return r(e,oo(t,4),n,i,cr)},$n.reduceRight=function(e,t,n){var r=Ua(e)?Nt:Wt,i=arguments.length<3;return r(e,oo(t,4),n,i,dr)},$n.repeat=function(e,t,n){return t=(n?yo(e,t,n):t===i)?1:hs(t),Hr(ys(e),t)},$n.replace=function(){var e=arguments,t=ys(e[0]);return e.length<3?t:t.replace(e[1],e[2])},$n.result=function(e,t,n){var r=-1,o=(t=mi(t,e)).length;for(o||(o=1,e=i);++r<o;){var a=null==e?i:e[Fo(t[r])];a===i&&(r=o,a=n),e=Ya(a)?a.call(e):a}return e},$n.round=xu,$n.runInContext=e,$n.sample=function(e){return(Ua(e)?Kn:qr)(e)},$n.size=function(e){if(null==e)return 0;if(Wa(e))return as(e)?cn(e):e.length;var t=fo(e);return t==x||t==A?e.size:Nr(e).length},$n.snakeCase=Hs,$n.some=function(e,t,n){var r=Ua(e)?zt:ti;return n&&yo(e,t,n)&&(t=i),r(e,oo(t,3))},$n.sortedIndex=function(e,t){return ni(e,t)},$n.sortedIndexBy=function(e,t,n){return ri(e,t,oo(n,2))},$n.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=ni(e,t);if(r<n&&ja(e[r],t))return r}return-1},$n.sortedLastIndex=function(e,t){return ni(e,t,!0)},$n.sortedLastIndexBy=function(e,t,n){return ri(e,t,oo(n,2),!0)},$n.sortedLastIndexOf=function(e,t){if(null!=e&&e.length){var n=ni(e,t,!0)-1;if(ja(e[n],t))return n}return-1},$n.startCase=Vs,$n.startsWith=function(e,t,n){return e=ys(e),n=null==n?0:or(hs(n),0,e.length),t=ai(t),e.slice(n,n+t.length)==t},$n.subtract=ku,$n.sum=function(e){return e&&e.length?Ht(e,nu):0},$n.sumBy=function(e,t){return e&&e.length?Ht(e,oo(t,2)):0},$n.template=function(e,t,n){var r=$n.templateSettings;n&&yo(e,t,n)&&(t=i),e=ys(e),t=ws({},t,r,Ki);var o,a,s=ws({},t.imports,r.imports,Ki),u=Ts(s),l=Yt(s,u),c=0,d=t.interpolate||be,f="__p += '",h=Se((t.escape||be).source+"|"+d.source+"|"+(d===Q?de:be).source+"|"+(t.evaluate||be).source+"|$","g"),p="//# sourceURL="+(Me.call(t,"sourceURL")?(t.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++rt+"]")+"\n";e.replace(h,(function(t,n,r,i,s,u){return r||(r=i),f+=e.slice(c,u).replace(we,nn),n&&(o=!0,f+="' +\n__e("+n+") +\n'"),s&&(a=!0,f+="';\n"+s+";\n__p += '"),r&&(f+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=u+t.length,t})),f+="';\n";var g=Me.call(t,"variable")&&t.variable;if(g){if(le.test(g))throw new _e("Invalid `variable` option passed into `_.template`")}else f="with (obj) {\n"+f+"\n}\n";f=(a?f.replace(B,""):f).replace(U,"$1").replace(Z,"$1;"),f="function("+(g||"obj")+") {\n"+(g?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+f+"return __p\n}";var m=Qs((function(){return xe(u,p+"return "+f).apply(i,l)}));if(m.source=f,Ka(m))throw m;return m},$n.times=function(e,t){if((e=hs(e))<1||e>d)return[];var n=h,r=yn(e,h);t=oo(t),e-=h;for(var i=Vt(r,t);++n<e;)t(n);return i},$n.toFinite=fs,$n.toInteger=hs,$n.toLength=ps,$n.toLower=function(e){return ys(e).toLowerCase()},$n.toNumber=gs,$n.toSafeInteger=function(e){return e?or(hs(e),-9007199254740991,d):0===e?e:0},$n.toString=ys,$n.toUpper=function(e){return ys(e).toUpperCase()},$n.trim=function(e,t,n){if((e=ys(e))&&(n||t===i))return qt(e);if(!e||!(t=ai(t)))return e;var r=dn(e),o=dn(t);return vi(r,Xt(r,o),Jt(r,o)+1).join("")},$n.trimEnd=function(e,t,n){if((e=ys(e))&&(n||t===i))return e.slice(0,fn(e)+1);if(!e||!(t=ai(t)))return e;var r=dn(e);return vi(r,0,Jt(r,dn(t))+1).join("")},$n.trimStart=function(e,t,n){if((e=ys(e))&&(n||t===i))return e.replace(re,"");if(!e||!(t=ai(t)))return e;var r=dn(e);return vi(r,Xt(r,dn(t))).join("")},$n.truncate=function(e,t){var n=30,r="...";if(Ja(t)){var o="separator"in t?t.separator:o;n="length"in t?hs(t.length):n,r="omission"in t?ai(t.omission):r}var a=(e=ys(e)).length;if(rn(e)){var s=dn(e);a=s.length}if(n>=a)return e;var u=n-cn(r);if(u<1)return r;var l=s?vi(s,0,u).join(""):e.slice(0,u);if(o===i)return l+r;if(s&&(u+=l.length-u),is(o)){if(e.slice(u).search(o)){var c,d=l;for(o.global||(o=Se(o.source,ys(fe.exec(o))+"g")),o.lastIndex=0;c=o.exec(d);)var f=c.index;l=l.slice(0,f===i?u:f)}}else if(e.indexOf(ai(o),u)!=u){var h=l.lastIndexOf(o);h>-1&&(l=l.slice(0,h))}return l+r},$n.unescape=function(e){return(e=ys(e))&&V.test(e)?e.replace(W,hn):e},$n.uniqueId=function(e){var t=++Ne;return ys(e)+t},$n.upperCase=qs,$n.upperFirst=Ks,$n.each=ya,$n.eachRight=va,$n.first=Wo,au($n,(mu={},vr($n,(function(e,t){Me.call($n.prototype,t)||(mu[t]=e)})),mu),{chain:!1}),$n.VERSION="4.17.21",St(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(e){$n[e].placeholder=$n})),St(["drop","take"],(function(e,t){Bn.prototype[e]=function(n){n=n===i?1:mn(hs(n),0);var r=this.__filtered__&&!t?new Bn(this):this.clone();return r.__filtered__?r.__takeCount__=yn(n,r.__takeCount__):r.__views__.push({size:yn(n,h),type:e+(r.__dir__<0?"Right":"")}),r},Bn.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}})),St(["filter","map","takeWhile"],(function(e,t){var n=t+1,r=1==n||3==n;Bn.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:oo(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}})),St(["head","last"],(function(e,t){var n="take"+(t?"Right":"");Bn.prototype[e]=function(){return this[n](1).value()[0]}})),St(["initial","tail"],(function(e,t){var n="drop"+(t?"":"Right");Bn.prototype[e]=function(){return this.__filtered__?new Bn(this):this[n](1)}})),Bn.prototype.compact=function(){return this.filter(nu)},Bn.prototype.find=function(e){return this.filter(e).head()},Bn.prototype.findLast=function(e){return this.reverse().find(e)},Bn.prototype.invokeMap=Vr((function(e,t){return"function"==typeof e?new Bn(this):this.map((function(n){return Rr(n,e,t)}))})),Bn.prototype.reject=function(e){return this.filter(Na(oo(e)))},Bn.prototype.slice=function(e,t){e=hs(e);var n=this;return n.__filtered__&&(e>0||t<0)?new Bn(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==i&&(n=(t=hs(t))<0?n.dropRight(-t):n.take(t-e)),n)},Bn.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},Bn.prototype.toArray=function(){return this.take(h)},vr(Bn.prototype,(function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),o=$n[r?"take"+("last"==t?"Right":""):t],a=r||/^find/.test(t);o&&($n.prototype[t]=function(){var t=this.__wrapped__,s=r?[1]:arguments,u=t instanceof Bn,l=s[0],c=u||Ua(t),d=function(e){var t=o.apply($n,Ot([e],s));return r&&f?t[0]:t};c&&n&&"function"==typeof l&&1!=l.length&&(u=c=!1);var f=this.__chain__,h=!!this.__actions__.length,p=a&&!f,g=u&&!h;if(!a&&c){t=g?t:new Bn(this);var m=e.apply(t,s);return m.__actions__.push({func:fa,args:[d],thisArg:i}),new Gn(m,f)}return p&&g?e.apply(this,s):(m=this.thru(d),p?r?m.value()[0]:m.value():m)})})),St(["pop","push","shift","sort","splice","unshift"],(function(e){var t=Re[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);$n.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var i=this.value();return t.apply(Ua(i)?i:[],e)}return this[n]((function(n){return t.apply(Ua(n)?n:[],e)}))}})),vr(Bn.prototype,(function(e,t){var n=$n[t];if(n){var r=n.name+"";Me.call(Pn,r)||(Pn[r]=[]),Pn[r].push({name:t,func:n})}})),Pn[Di(i,2).name]=[{name:"wrapper",func:i}],Bn.prototype.clone=function(){var e=new Bn(this.__wrapped__);return e.__actions__=Ci(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=Ci(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=Ci(this.__views__),e},Bn.prototype.reverse=function(){if(this.__filtered__){var e=new Bn(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},Bn.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=Ua(e),r=t<0,i=n?e.length:0,o=function(e,t,n){for(var r=-1,i=n.length;++r<i;){var o=n[r],a=o.size;switch(o.type){case"drop":e+=a;break;case"dropRight":t-=a;break;case"take":t=yn(t,e+a);break;case"takeRight":e=mn(e,t-a)}}return{start:e,end:t}}(0,i,this.__views__),a=o.start,s=o.end,u=s-a,l=r?s:a-1,c=this.__iteratees__,d=c.length,f=0,h=yn(u,this.__takeCount__);if(!n||!r&&i==u&&h==u)return di(e,this.__actions__);var p=[];e:for(;u--&&f<h;){for(var g=-1,m=e[l+=t];++g<d;){var y=c[g],v=y.iteratee,b=y.type,w=v(m);if(2==b)m=w;else if(!w){if(1==b)continue e;break e}}p[f++]=m}return p},$n.prototype.at=ha,$n.prototype.chain=function(){return da(this)},$n.prototype.commit=function(){return new Gn(this.value(),this.__chain__)},$n.prototype.next=function(){this.__values__===i&&(this.__values__=ds(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?i:this.__values__[this.__index__++]}},$n.prototype.plant=function(e){for(var t,n=this;n instanceof In;){var r=$o(n);r.__index__=0,r.__values__=i,t?o.__wrapped__=r:t=r;var o=r;n=n.__wrapped__}return o.__wrapped__=e,t},$n.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof Bn){var t=e;return this.__actions__.length&&(t=new Bn(this)),(t=t.reverse()).__actions__.push({func:fa,args:[Jo],thisArg:i}),new Gn(t,this.__chain__)}return this.thru(Jo)},$n.prototype.toJSON=$n.prototype.valueOf=$n.prototype.value=function(){return di(this.__wrapped__,this.__actions__)},$n.prototype.first=$n.prototype.head,Ke&&($n.prototype[Ke]=function(){return this}),$n}();dt._=pn,(r=function(){return pn}.call(t,n,t,e))===i||(e.exports=r)}.call(this)},3011:(e,t,n)=>{var r=n(4993),i=n(2346);e.exports=function(){var e=arguments,t=null,n=-1;return new r((function(){for(var r=null;;){if(null===t){if(++n>=e.length)return{done:!0};t=i(e[n])}if(!0!==(r=t.next()).done)break;t=null}return r}))}},2346:(e,t,n)=>{var r=n(4993),i=n(8231),o=i.ARRAY_BUFFER_SUPPORT,a=i.SYMBOL_SUPPORT;e.exports=function(e){var t=function(e){return"string"==typeof e||Array.isArray(e)||o&&ArrayBuffer.isView(e)?r.fromSequence(e):"object"!=typeof e||null===e?null:a&&"function"==typeof e[Symbol.iterator]?e[Symbol.iterator]():"function"==typeof e.next?e:null}(e);if(!t)throw new Error("obliterator: target is not iterable nor a valid iterator.");return t}},4993:e=>{function t(e){if("function"!=typeof e)throw new Error("obliterator/iterator: expecting a function!");this.next=e}"undefined"!=typeof Symbol&&(t.prototype[Symbol.iterator]=function(){return this}),t.of=function(){var e=arguments,n=e.length,r=0;return new t((function(){return r>=n?{done:!0}:{done:!1,value:e[r++]}}))},t.empty=function(){return new t((function(){return{done:!0}}))},t.fromSequence=function(e){var n=0,r=e.length;return new t((function(){return n>=r?{done:!0}:{done:!1,value:e[n++]}}))},t.is=function(e){return e instanceof t||"object"==typeof e&&null!==e&&"function"==typeof e.next},e.exports=t},8231:(e,t)=>{t.ARRAY_BUFFER_SUPPORT="undefined"!=typeof ArrayBuffer,t.SYMBOL_SUPPORT="undefined"!=typeof Symbol},641:(e,t,n)=>{var r=n(2346);e.exports=function(e,t){for(var n,i=arguments.length>1?t:1/0,o=i!==1/0?new Array(i):[],a=0,s=r(e);;){if(a===i)return o;if((n=s.next()).done)return a!==t&&(o.length=a),o;o[a++]=n.value}}},4448:(e,t,n)=>{"use strict";var r=n(7294),i=n(3840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,s={};function u(e,t){l(e,t),l(e+"Capture",t)}function l(e,t){for(s[e]=t,e=0;e<t.length;e++)a.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,h={},p={};function g(e,t,n,r,i,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=a}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function b(e,t,n,r){var i=m.hasOwnProperty(t)?m[t]:null;(null!==i?0!==i.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!d.call(p,e)||!d.call(h,e)&&(f.test(e)?p[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,v);m[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,v);m[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,v);m[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,_=Symbol.for("react.element"),x=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),E=Symbol.for("react.strict_mode"),S=Symbol.for("react.profiler"),C=Symbol.for("react.provider"),A=Symbol.for("react.context"),R=Symbol.for("react.forward_ref"),P=Symbol.for("react.suspense"),T=Symbol.for("react.suspense_list"),L=Symbol.for("react.memo"),O=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var M=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var N=Symbol.iterator;function z(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=N&&e[N]||e["@@iterator"])?e:null}var F,D=Object.assign;function $(e){if(void 0===F)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);F=t&&t[1]||""}return"\n"+F+e}var j=!1;function I(e,t){if(!e||j)return"";j=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var i=t.stack.split("\n"),o=r.stack.split("\n"),a=i.length-1,s=o.length-1;1<=a&&0<=s&&i[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(i[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||i[a]!==o[s]){var u="\n"+i[a].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=a&&0<=s);break}}}finally{j=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?$(e):""}function G(e){switch(e.tag){case 5:return $(e.type);case 16:return $("Lazy");case 13:return $("Suspense");case 19:return $("SuspenseList");case 0:case 2:case 15:return I(e.type,!1);case 11:return I(e.type.render,!1);case 1:return I(e.type,!0);default:return""}}function B(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case x:return"Portal";case S:return"Profiler";case E:return"StrictMode";case P:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case A:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case R:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case L:return null!==(t=e.displayName||null)?t:B(e.type)||"Memo";case O:t=e._payload,e=e._init;try{return B(e(t))}catch(e){}}return null}function U(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return B(t);case 8:return t===E?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function Z(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function W(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function H(e){e._valueTracker||(e._valueTracker=function(e){var t=W(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function V(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=W(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function K(e,t){var n=t.checked;return D({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Y(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Z(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Q(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function X(e,t){Q(e,t);var n=Z(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,Z(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Z(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return D({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ie(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Z(n)}}function oe(e,t){var n=Z(t.value),r=Z(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?se(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var le,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((le=le||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=le.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var he={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function ge(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||he.hasOwnProperty(e)&&he[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=ge(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(he).forEach((function(e){pe.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),he[t]=he[e]}))}));var ye=D({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function _e(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var xe=null,ke=null,Ee=null;function Se(e){if(e=bi(e)){if("function"!=typeof xe)throw Error(o(280));var t=e.stateNode;t&&(t=_i(t),xe(e.stateNode,e.type,t))}}function Ce(e){ke?Ee?Ee.push(e):Ee=[e]:ke=e}function Ae(){if(ke){var e=ke,t=Ee;if(Ee=ke=null,Se(e),t)for(e=0;e<t.length;e++)Se(t[e])}}function Re(e,t){return e(t)}function Pe(){}var Te=!1;function Le(e,t,n){if(Te)return e(t,n);Te=!0;try{return Re(e,t,n)}finally{Te=!1,(null!==ke||null!==Ee)&&(Pe(),Ae())}}function Oe(e,t){var n=e.stateNode;if(null===n)return null;var r=_i(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Me=!1;if(c)try{var Ne={};Object.defineProperty(Ne,"passive",{get:function(){Me=!0}}),window.addEventListener("test",Ne,Ne),window.removeEventListener("test",Ne,Ne)}catch(ce){Me=!1}function ze(e,t,n,r,i,o,a,s,u){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}var Fe=!1,De=null,$e=!1,je=null,Ie={onError:function(e){Fe=!0,De=e}};function Ge(e,t,n,r,i,o,a,s,u){Fe=!1,De=null,ze.apply(Ie,arguments)}function Be(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ue(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ze(e){if(Be(e)!==e)throw Error(o(188))}function We(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Be(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var a=i.alternate;if(null===a){if(null!==(r=i.return)){n=r;continue}break}if(i.child===a.child){for(a=i.child;a;){if(a===n)return Ze(i),e;if(a===r)return Ze(i),t;a=a.sibling}throw Error(o(188))}if(n.return!==r.return)n=i,r=a;else{for(var s=!1,u=i.child;u;){if(u===n){s=!0,n=i,r=a;break}if(u===r){s=!0,r=i,n=a;break}u=u.sibling}if(!s){for(u=a.child;u;){if(u===n){s=!0,n=a,r=i;break}if(u===r){s=!0,r=a,n=i;break}u=u.sibling}if(!s)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?He(e):null}function He(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=He(e);if(null!==t)return t;e=e.sibling}return null}var Ve=i.unstable_scheduleCallback,qe=i.unstable_cancelCallback,Ke=i.unstable_shouldYield,Ye=i.unstable_requestPaint,Qe=i.unstable_now,Xe=i.unstable_getCurrentPriorityLevel,Je=i.unstable_ImmediatePriority,et=i.unstable_UserBlockingPriority,tt=i.unstable_NormalPriority,nt=i.unstable_LowPriority,rt=i.unstable_IdlePriority,it=null,ot=null,at=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(st(e)/ut|0)|0},st=Math.log,ut=Math.LN2,lt=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,i=e.suspendedLanes,o=e.pingedLanes,a=268435455&n;if(0!==a){var s=a&~i;0!==s?r=dt(s):0!=(o&=a)&&(r=dt(o))}else 0!=(a=n&~i)?r=dt(a):0!==o&&(r=dt(o));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&i)&&((i=r&-r)>=(o=t&-t)||16===i&&0!=(4194240&o)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)i=1<<(n=31-at(t)),r|=e[n],t&=~i;return r}function ht(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function pt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gt(){var e=lt;return 0==(4194240&(lt<<=1))&&(lt=64),e}function mt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=n}function vt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-at(n),i=1<<r;i&t|e[r]&t&&(e[r]|=t),n&=~i}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var _t,xt,kt,Et,St,Ct=!1,At=[],Rt=null,Pt=null,Tt=null,Lt=new Map,Ot=new Map,Mt=[],Nt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function zt(e,t){switch(e){case"focusin":case"focusout":Rt=null;break;case"dragenter":case"dragleave":Pt=null;break;case"mouseover":case"mouseout":Tt=null;break;case"pointerover":case"pointerout":Lt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ot.delete(t.pointerId)}}function Ft(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[i]},null!==t&&null!==(t=bi(t))&&xt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function Dt(e){var t=vi(e.target);if(null!==t){var n=Be(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ue(n)))return e.blockedOn=t,void St(e.priority,(function(){kt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function $t(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=bi(n))&&xt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function jt(e,t,n){$t(e)&&n.delete(t)}function It(){Ct=!1,null!==Rt&&$t(Rt)&&(Rt=null),null!==Pt&&$t(Pt)&&(Pt=null),null!==Tt&&$t(Tt)&&(Tt=null),Lt.forEach(jt),Ot.forEach(jt)}function Gt(e,t){e.blockedOn===t&&(e.blockedOn=null,Ct||(Ct=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,It)))}function Bt(e){function t(t){return Gt(t,e)}if(0<At.length){Gt(At[0],e);for(var n=1;n<At.length;n++){var r=At[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Rt&&Gt(Rt,e),null!==Pt&&Gt(Pt,e),null!==Tt&&Gt(Tt,e),Lt.forEach(t),Ot.forEach(t),n=0;n<Mt.length;n++)(r=Mt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Mt.length&&null===(n=Mt[0]).blockedOn;)Dt(n),null===n.blockedOn&&Mt.shift()}var Ut=w.ReactCurrentBatchConfig,Zt=!0;function Wt(e,t,n,r){var i=bt,o=Ut.transition;Ut.transition=null;try{bt=1,Vt(e,t,n,r)}finally{bt=i,Ut.transition=o}}function Ht(e,t,n,r){var i=bt,o=Ut.transition;Ut.transition=null;try{bt=4,Vt(e,t,n,r)}finally{bt=i,Ut.transition=o}}function Vt(e,t,n,r){if(Zt){var i=Kt(e,t,n,r);if(null===i)Zr(e,t,r,qt,n),zt(e,r);else if(function(e,t,n,r,i){switch(t){case"focusin":return Rt=Ft(Rt,e,t,n,r,i),!0;case"dragenter":return Pt=Ft(Pt,e,t,n,r,i),!0;case"mouseover":return Tt=Ft(Tt,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return Lt.set(o,Ft(Lt.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,Ot.set(o,Ft(Ot.get(o)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r))r.stopPropagation();else if(zt(e,r),4&t&&-1<Nt.indexOf(e)){for(;null!==i;){var o=bi(i);if(null!==o&&_t(o),null===(o=Kt(e,t,n,r))&&Zr(e,t,r,qt,n),o===i)break;i=o}null!==i&&r.stopPropagation()}else Zr(e,t,r,null,n)}}var qt=null;function Kt(e,t,n,r){if(qt=null,null!==(e=vi(e=_e(r))))if(null===(t=Be(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ue(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return qt=e,null}function Yt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Xe()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Qt=null,Xt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Xt,r=n.length,i="value"in Qt?Qt.value:Qt.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return Jt=i.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,i,o){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(i):i[a]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return D(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,sn,un,ln={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(ln),dn=D({},ln,{view:0,detail:0}),fn=on(dn),hn=D({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Sn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(an=e.screenX-un.screenX,sn=e.screenY-un.screenY):sn=an=0,un=e),an)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),pn=on(hn),gn=on(D({},hn,{dataTransfer:0})),mn=on(D({},dn,{relatedTarget:0})),yn=on(D({},ln,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=D({},ln,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(vn),wn=on(D({},ln,{data:0})),_n={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function Sn(){return En}var Cn=D({},dn,{key:function(e){if(e.key){var t=_n[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Sn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),An=on(Cn),Rn=on(D({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pn=on(D({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Sn})),Tn=on(D({},ln,{propertyName:0,elapsedTime:0,pseudoElement:0})),Ln=D({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),On=on(Ln),Mn=[9,13,27,32],Nn=c&&"CompositionEvent"in window,zn=null;c&&"documentMode"in document&&(zn=document.documentMode);var Fn=c&&"TextEvent"in window&&!zn,Dn=c&&(!Nn||zn&&8<zn&&11>=zn),$n=String.fromCharCode(32),jn=!1;function In(e,t){switch(e){case"keyup":return-1!==Mn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Gn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Bn=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function Wn(e,t,n,r){Ce(r),0<(t=Hr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,Vn=null;function qn(e){$r(e,0)}function Kn(e){if(V(wi(e)))return e}function Yn(e,t){if("change"===e)return t}var Qn=!1;if(c){var Xn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Xn=Jn}else Xn=!1;Qn=Xn&&(!document.documentMode||9<document.documentMode)}function tr(){Hn&&(Hn.detachEvent("onpropertychange",nr),Vn=Hn=null)}function nr(e){if("value"===e.propertyName&&Kn(Vn)){var t=[];Wn(t,Vn,e,_e(e)),Le(qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Vn=n,(Hn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(Vn)}function or(e,t){if("click"===e)return Kn(t)}function ar(e,t){if("input"===e||"change"===e)return Kn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!d.call(t,i)||!sr(e[i],t[i]))return!1}return!0}function lr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=lr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=lr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=q((e=t.contentWindow).document)}return t}function hr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function pr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&hr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var i=n.textContent.length,o=Math.min(r.start,i);r=void 0===r.end?o:Math.min(r.end,i),!e.extend&&o>r&&(i=r,r=o,o=i),i=cr(n,o);var a=cr(n,r);i&&a&&(1!==e.rangeCount||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(i.node,i.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var gr=c&&"documentMode"in document&&11>=document.documentMode,mr=null,yr=null,vr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==mr||mr!==q(r)||(r="selectionStart"in(r=mr)&&hr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&ur(vr,r)||(vr=r,0<(r=Hr(yr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}function _r(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xr={animationend:_r("Animation","AnimationEnd"),animationiteration:_r("Animation","AnimationIteration"),animationstart:_r("Animation","AnimationStart"),transitionend:_r("Transition","TransitionEnd")},kr={},Er={};function Sr(e){if(kr[e])return kr[e];if(!xr[e])return e;var t,n=xr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Er)return kr[e]=n[t];return e}c&&(Er=document.createElement("div").style,"AnimationEvent"in window||(delete xr.animationend.animation,delete xr.animationiteration.animation,delete xr.animationstart.animation),"TransitionEvent"in window||delete xr.transitionend.transition);var Cr=Sr("animationend"),Ar=Sr("animationiteration"),Rr=Sr("animationstart"),Pr=Sr("transitionend"),Tr=new Map,Lr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Or(e,t){Tr.set(e,t),u(t,[e])}for(var Mr=0;Mr<Lr.length;Mr++){var Nr=Lr[Mr];Or(Nr.toLowerCase(),"on"+(Nr[0].toUpperCase()+Nr.slice(1)))}Or(Cr,"onAnimationEnd"),Or(Ar,"onAnimationIteration"),Or(Rr,"onAnimationStart"),Or("dblclick","onDoubleClick"),Or("focusin","onFocus"),Or("focusout","onBlur"),Or(Pr,"onTransitionEnd"),l("onMouseEnter",["mouseout","mouseover"]),l("onMouseLeave",["mouseout","mouseover"]),l("onPointerEnter",["pointerout","pointerover"]),l("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var zr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Fr=new Set("cancel close invalid load scroll toggle".split(" ").concat(zr));function Dr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,i,a,s,u,l){if(Ge.apply(this,arguments),Fe){if(!Fe)throw Error(o(198));var c=De;Fe=!1,De=null,$e||($e=!0,je=c)}}(r,t,void 0,e),e.currentTarget=null}function $r(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],u=s.instance,l=s.currentTarget;if(s=s.listener,u!==o&&i.isPropagationStopped())break e;Dr(i,s,l),o=u}else for(a=0;a<r.length;a++){if(u=(s=r[a]).instance,l=s.currentTarget,s=s.listener,u!==o&&i.isPropagationStopped())break e;Dr(i,s,l),o=u}}}if($e)throw e=je,$e=!1,je=null,e}function jr(e,t){var n=t[gi];void 0===n&&(n=t[gi]=new Set);var r=e+"__bubble";n.has(r)||(Ur(t,e,2,!1),n.add(r))}function Ir(e,t,n){var r=0;t&&(r|=4),Ur(n,e,r,t)}var Gr="_reactListening"+Math.random().toString(36).slice(2);function Br(e){if(!e[Gr]){e[Gr]=!0,a.forEach((function(t){"selectionchange"!==t&&(Fr.has(t)||Ir(t,!1,e),Ir(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Gr]||(t[Gr]=!0,Ir("selectionchange",!1,t))}}function Ur(e,t,n,r){switch(Yt(t)){case 1:var i=Wt;break;case 4:i=Ht;break;default:i=Vt}n=i.bind(null,t,n,e),i=void 0,!Me||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Zr(e,t,n,r,i){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&((u=a.stateNode.containerInfo)===i||8===u.nodeType&&u.parentNode===i))return;a=a.return}for(;null!==s;){if(null===(a=vi(s)))return;if(5===(u=a.tag)||6===u){r=o=a;continue e}s=s.parentNode}}r=r.return}Le((function(){var r=o,i=_e(n),a=[];e:{var s=Tr.get(e);if(void 0!==s){var u=cn,l=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=An;break;case"focusin":l="focus",u=mn;break;case"focusout":l="blur",u=mn;break;case"beforeblur":case"afterblur":u=mn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=pn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Pn;break;case Cr:case Ar:case Rr:u=yn;break;case Pr:u=Tn;break;case"scroll":u=fn;break;case"wheel":u=On;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Rn}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==s?s+"Capture":null:s;c=[];for(var h,p=r;null!==p;){var g=(h=p).stateNode;if(5===h.tag&&null!==g&&(h=g,null!==f&&null!=(g=Oe(p,f))&&c.push(Wr(p,g,h))),d)break;p=p.return}0<c.length&&(s=new u(s,l,null,n,i),a.push({event:s,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||n===we||!(l=n.relatedTarget||n.fromElement)||!vi(l)&&!l[pi])&&(u||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,u?(u=r,null!==(l=(l=n.relatedTarget||n.toElement)?vi(l):null)&&(l!==(d=Be(l))||5!==l.tag&&6!==l.tag)&&(l=null)):(u=null,l=r),u!==l)){if(c=pn,g="onMouseLeave",f="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(c=Rn,g="onPointerLeave",f="onPointerEnter",p="pointer"),d=null==u?s:wi(u),h=null==l?s:wi(l),(s=new c(g,p+"leave",u,n,i)).target=d,s.relatedTarget=h,g=null,vi(i)===r&&((c=new c(f,p+"enter",l,n,i)).target=h,c.relatedTarget=d,g=c),d=g,u&&l)e:{for(f=l,p=0,h=c=u;h;h=Vr(h))p++;for(h=0,g=f;g;g=Vr(g))h++;for(;0<p-h;)c=Vr(c),p--;for(;0<h-p;)f=Vr(f),h--;for(;p--;){if(c===f||null!==f&&c===f.alternate)break e;c=Vr(c),f=Vr(f)}c=null}else c=null;null!==u&&qr(a,s,u,c,!1),null!==l&&null!==d&&qr(a,d,l,c,!0)}if("select"===(u=(s=r?wi(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===u&&"file"===s.type)var m=Yn;else if(Zn(s))if(Qn)m=ar;else{m=ir;var y=rr}else(u=s.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=or);switch(m&&(m=m(e,r))?Wn(a,m,n,i):(y&&y(e,s,r),"focusout"===e&&(y=s._wrapperState)&&y.controlled&&"number"===s.type&&ee(s,"number",s.value)),y=r?wi(r):window,e){case"focusin":(Zn(y)||"true"===y.contentEditable)&&(mr=y,yr=r,vr=null);break;case"focusout":vr=yr=mr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(a,n,i);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":wr(a,n,i)}var v;if(Nn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Bn?In(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Dn&&"ko"!==n.locale&&(Bn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Bn&&(v=en()):(Xt="value"in(Qt=i)?Qt.value:Qt.textContent,Bn=!0)),0<(y=Hr(r,b)).length&&(b=new wn(b,e,null,n,i),a.push({event:b,listeners:y}),(v||null!==(v=Gn(n)))&&(b.data=v))),(v=Fn?function(e,t){switch(e){case"compositionend":return Gn(t);case"keypress":return 32!==t.which?null:(jn=!0,$n);case"textInput":return(e=t.data)===$n&&jn?null:e;default:return null}}(e,n):function(e,t){if(Bn)return"compositionend"===e||!Nn&&In(e,t)?(e=en(),Jt=Xt=Qt=null,Bn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Hr(r,"onBeforeInput")).length&&(i=new wn("onBeforeInput","beforeinput",null,n,i),a.push({event:i,listeners:r}),i.data=v)}$r(a,t)}))}function Wr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Hr(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,o=i.stateNode;5===i.tag&&null!==o&&(i=o,null!=(o=Oe(e,n))&&r.unshift(Wr(e,o,i)),null!=(o=Oe(e,t))&&r.push(Wr(e,o,i))),e=e.return}return r}function Vr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function qr(e,t,n,r,i){for(var o=t._reactName,a=[];null!==n&&n!==r;){var s=n,u=s.alternate,l=s.stateNode;if(null!==u&&u===r)break;5===s.tag&&null!==l&&(s=l,i?null!=(u=Oe(n,o))&&a.unshift(Wr(n,u,s)):i||null!=(u=Oe(n,o))&&a.push(Wr(n,u,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var Kr=/\r\n?/g,Yr=/\u0000|\uFFFD/g;function Qr(e){return("string"==typeof e?e:""+e).replace(Kr,"\n").replace(Yr,"")}function Xr(e,t,n){if(t=Qr(t),Qr(e)!==t&&n)throw Error(o(425))}function Jr(){}var ei=null,ti=null;function ni(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ri="function"==typeof setTimeout?setTimeout:void 0,ii="function"==typeof clearTimeout?clearTimeout:void 0,oi="function"==typeof Promise?Promise:void 0,ai="function"==typeof queueMicrotask?queueMicrotask:void 0!==oi?function(e){return oi.resolve(null).then(e).catch(si)}:ri;function si(e){setTimeout((function(){throw e}))}function ui(e,t){var n=t,r=0;do{var i=n.nextSibling;if(e.removeChild(n),i&&8===i.nodeType)if("/$"===(n=i.data)){if(0===r)return e.removeChild(i),void Bt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=i}while(n);Bt(t)}function li(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ci(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var di=Math.random().toString(36).slice(2),fi="__reactFiber$"+di,hi="__reactProps$"+di,pi="__reactContainer$"+di,gi="__reactEvents$"+di,mi="__reactListeners$"+di,yi="__reactHandles$"+di;function vi(e){var t=e[fi];if(t)return t;for(var n=e.parentNode;n;){if(t=n[pi]||n[fi]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ci(e);null!==e;){if(n=e[fi])return n;e=ci(e)}return t}n=(e=n).parentNode}return null}function bi(e){return!(e=e[fi]||e[pi])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wi(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function _i(e){return e[hi]||null}var xi=[],ki=-1;function Ei(e){return{current:e}}function Si(e){0>ki||(e.current=xi[ki],xi[ki]=null,ki--)}function Ci(e,t){ki++,xi[ki]=e.current,e.current=t}var Ai={},Ri=Ei(Ai),Pi=Ei(!1),Ti=Ai;function Li(e,t){var n=e.type.contextTypes;if(!n)return Ai;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Oi(e){return null!=e.childContextTypes}function Mi(){Si(Pi),Si(Ri)}function Ni(e,t,n){if(Ri.current!==Ai)throw Error(o(168));Ci(Ri,t),Ci(Pi,n)}function zi(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in t))throw Error(o(108,U(e)||"Unknown",i));return D({},n,r)}function Fi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ai,Ti=Ri.current,Ci(Ri,e),Ci(Pi,Pi.current),!0}function Di(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=zi(e,t,Ti),r.__reactInternalMemoizedMergedChildContext=e,Si(Pi),Si(Ri),Ci(Ri,e)):Si(Pi),Ci(Pi,n)}var $i=null,ji=!1,Ii=!1;function Gi(e){null===$i?$i=[e]:$i.push(e)}function Bi(){if(!Ii&&null!==$i){Ii=!0;var e=0,t=bt;try{var n=$i;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}$i=null,ji=!1}catch(t){throw null!==$i&&($i=$i.slice(e+1)),Ve(Je,Bi),t}finally{bt=t,Ii=!1}}return null}var Ui=[],Zi=0,Wi=null,Hi=0,Vi=[],qi=0,Ki=null,Yi=1,Qi="";function Xi(e,t){Ui[Zi++]=Hi,Ui[Zi++]=Wi,Wi=e,Hi=t}function Ji(e,t,n){Vi[qi++]=Yi,Vi[qi++]=Qi,Vi[qi++]=Ki,Ki=e;var r=Yi;e=Qi;var i=32-at(r)-1;r&=~(1<<i),n+=1;var o=32-at(t)+i;if(30<o){var a=i-i%5;o=(r&(1<<a)-1).toString(32),r>>=a,i-=a,Yi=1<<32-at(t)+i|n<<i|r,Qi=o+e}else Yi=1<<o|n<<i|r,Qi=e}function eo(e){null!==e.return&&(Xi(e,1),Ji(e,1,0))}function to(e){for(;e===Wi;)Wi=Ui[--Zi],Ui[Zi]=null,Hi=Ui[--Zi],Ui[Zi]=null;for(;e===Ki;)Ki=Vi[--qi],Vi[qi]=null,Qi=Vi[--qi],Vi[qi]=null,Yi=Vi[--qi],Vi[qi]=null}var no=null,ro=null,io=!1,oo=null;function ao(e,t){var n=Ol(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function so(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=li(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ki?{id:Yi,overflow:Qi}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ol(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function uo(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function lo(e){if(io){var t=ro;if(t){var n=t;if(!so(e,t)){if(uo(e))throw Error(o(418));t=li(n.nextSibling);var r=no;t&&so(e,t)?ao(r,n):(e.flags=-4097&e.flags|2,io=!1,no=e)}}else{if(uo(e))throw Error(o(418));e.flags=-4097&e.flags|2,io=!1,no=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function fo(e){if(e!==no)return!1;if(!io)return co(e),io=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!ni(e.type,e.memoizedProps)),t&&(t=ro)){if(uo(e))throw ho(),Error(o(418));for(;t;)ao(e,t),t=li(t.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=li(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?li(e.stateNode.nextSibling):null;return!0}function ho(){for(var e=ro;e;)e=li(e.nextSibling)}function po(){ro=no=null,io=!1}function go(e){null===oo?oo=[e]:oo.push(e)}var mo=w.ReactCurrentBatchConfig;function yo(e,t){if(e&&e.defaultProps){for(var n in t=D({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var vo=Ei(null),bo=null,wo=null,_o=null;function xo(){_o=wo=bo=null}function ko(e){var t=vo.current;Si(vo),e._currentValue=t}function Eo(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function So(e,t){bo=e,_o=wo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(ws=!0),e.firstContext=null)}function Co(e){var t=e._currentValue;if(_o!==e)if(e={context:e,memoizedValue:t,next:null},null===wo){if(null===bo)throw Error(o(308));wo=e,bo.dependencies={lanes:0,firstContext:e}}else wo=wo.next=e;return t}var Ao=null;function Ro(e){null===Ao?Ao=[e]:Ao.push(e)}function Po(e,t,n,r){var i=t.interleaved;return null===i?(n.next=n,Ro(t)):(n.next=i.next,i.next=n),t.interleaved=n,To(e,r)}function To(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Lo=!1;function Oo(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Mo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function No(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function zo(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Pu)){var i=r.pending;return null===i?t.next=t:(t.next=i.next,i.next=t),r.pending=t,To(e,n)}return null===(i=r.interleaved)?(t.next=t,Ro(r)):(t.next=i.next,i.next=t),r.interleaved=t,To(e,n)}function Fo(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}function Do(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?i=o=a:o=o.next=a,n=n.next}while(null!==n);null===o?i=o=t:o=o.next=t}else i=o=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function $o(e,t,n,r){var i=e.updateQueue;Lo=!1;var o=i.firstBaseUpdate,a=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var u=s,l=u.next;u.next=null,null===a?o=l:a.next=l,a=u;var c=e.alternate;null!==c&&(s=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===s?c.firstBaseUpdate=l:s.next=l,c.lastBaseUpdate=u)}if(null!==o){var d=i.baseState;for(a=0,c=l=u=null,s=o;;){var f=s.lane,h=s.eventTime;if((r&f)===f){null!==c&&(c=c.next={eventTime:h,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var p=e,g=s;switch(f=t,h=n,g.tag){case 1:if("function"==typeof(p=g.payload)){d=p.call(h,d,f);break e}d=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(f="function"==typeof(p=g.payload)?p.call(h,d,f):p))break e;d=D({},d,f);break e;case 2:Lo=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(f=i.effects)?i.effects=[s]:f.push(s))}else h={eventTime:h,lane:f,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===c?(l=c=h,u=d):c=c.next=h,a|=f;if(null===(s=s.next)){if(null===(s=i.shared.pending))break;s=(f=s).next,f.next=null,i.lastBaseUpdate=f,i.shared.pending=null}}if(null===c&&(u=d),i.baseState=u,i.firstBaseUpdate=l,i.lastBaseUpdate=c,null!==(t=i.shared.interleaved)){i=t;do{a|=i.lane,i=i.next}while(i!==t)}else null===o&&(i.shared.lanes=0);Du|=a,e.lanes=a,e.memoizedState=d}}function jo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(o(191,i));i.call(r)}}}var Io=(new r.Component).refs;function Go(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:D({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Bo={isMounted:function(e){return!!(e=e._reactInternals)&&Be(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tl(),i=nl(e),o=No(r,i);o.payload=t,null!=n&&(o.callback=n),null!==(t=zo(e,o,i))&&(rl(t,e,i,r),Fo(t,e,i))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tl(),i=nl(e),o=No(r,i);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=zo(e,o,i))&&(rl(t,e,i,r),Fo(t,e,i))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tl(),r=nl(e),i=No(n,r);i.tag=2,null!=t&&(i.callback=t),null!==(t=zo(e,i,r))&&(rl(t,e,r,n),Fo(t,e,r))}};function Uo(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(i,o))}function Zo(e,t,n){var r=!1,i=Ai,o=t.contextType;return"object"==typeof o&&null!==o?o=Co(o):(i=Oi(t)?Ti:Ri.current,o=(r=null!=(r=t.contextTypes))?Li(e,i):Ai),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Bo,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function Wo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Bo.enqueueReplaceState(t,t.state,null)}function Ho(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=Io,Oo(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=Co(o):(o=Oi(t)?Ti:Ri.current,i.context=Li(e,o)),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(Go(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&Bo.enqueueReplaceState(i,i.state,null),$o(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4194308)}function Vo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var i=r,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=i.refs;t===Io&&(t=i.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function qo(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ko(e){return(0,e._init)(e._payload)}function Yo(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Nl(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function s(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=$l(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function l(e,t,n,r){var o=n.type;return o===k?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===O&&Ko(o)===t.type)?((r=i(t,n.props)).ref=Vo(e,t,n),r.return=e,r):((r=zl(n.type,n.key,n.props,null,e.mode,r)).ref=Vo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=jl(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Fl(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=$l(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case _:return(n=zl(t.type,t.key,t.props,null,e.mode,n)).ref=Vo(e,null,t),n.return=e,n;case x:return(t=jl(t,e.mode,n)).return=e,t;case O:return f(e,(0,t._init)(t._payload),n)}if(te(t)||z(t))return(t=Fl(t,e.mode,n,null)).return=e,t;qo(e,t)}return null}function h(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==i?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case _:return n.key===i?l(e,t,n,r):null;case x:return n.key===i?c(e,t,n,r):null;case O:return h(e,t,(i=n._init)(n._payload),r)}if(te(n)||z(n))return null!==i?null:d(e,t,n,r,null);qo(e,n)}return null}function p(e,t,n,r,i){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case _:return l(t,e=e.get(null===r.key?n:r.key)||null,r,i);case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i);case O:return p(e,t,n,(0,r._init)(r._payload),i)}if(te(r)||z(r))return d(t,e=e.get(n)||null,r,i,null);qo(t,r)}return null}function g(i,o,s,u){for(var l=null,c=null,d=o,g=o=0,m=null;null!==d&&g<s.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var y=h(i,d,s[g],u);if(null===y){null===d&&(d=m);break}e&&d&&null===y.alternate&&t(i,d),o=a(y,o,g),null===c?l=y:c.sibling=y,c=y,d=m}if(g===s.length)return n(i,d),io&&Xi(i,g),l;if(null===d){for(;g<s.length;g++)null!==(d=f(i,s[g],u))&&(o=a(d,o,g),null===c?l=d:c.sibling=d,c=d);return io&&Xi(i,g),l}for(d=r(i,d);g<s.length;g++)null!==(m=p(d,i,g,s[g],u))&&(e&&null!==m.alternate&&d.delete(null===m.key?g:m.key),o=a(m,o,g),null===c?l=m:c.sibling=m,c=m);return e&&d.forEach((function(e){return t(i,e)})),io&&Xi(i,g),l}function m(i,s,u,l){var c=z(u);if("function"!=typeof c)throw Error(o(150));if(null==(u=c.call(u)))throw Error(o(151));for(var d=c=null,g=s,m=s=0,y=null,v=u.next();null!==g&&!v.done;m++,v=u.next()){g.index>m?(y=g,g=null):y=g.sibling;var b=h(i,g,v.value,l);if(null===b){null===g&&(g=y);break}e&&g&&null===b.alternate&&t(i,g),s=a(b,s,m),null===d?c=b:d.sibling=b,d=b,g=y}if(v.done)return n(i,g),io&&Xi(i,m),c;if(null===g){for(;!v.done;m++,v=u.next())null!==(v=f(i,v.value,l))&&(s=a(v,s,m),null===d?c=v:d.sibling=v,d=v);return io&&Xi(i,m),c}for(g=r(i,g);!v.done;m++,v=u.next())null!==(v=p(g,i,m,v.value,l))&&(e&&null!==v.alternate&&g.delete(null===v.key?m:v.key),s=a(v,s,m),null===d?c=v:d.sibling=v,d=v);return e&&g.forEach((function(e){return t(i,e)})),io&&Xi(i,m),c}return function e(r,o,a,u){if("object"==typeof a&&null!==a&&a.type===k&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case _:e:{for(var l=a.key,c=o;null!==c;){if(c.key===l){if((l=a.type)===k){if(7===c.tag){n(r,c.sibling),(o=i(c,a.props.children)).return=r,r=o;break e}}else if(c.elementType===l||"object"==typeof l&&null!==l&&l.$$typeof===O&&Ko(l)===c.type){n(r,c.sibling),(o=i(c,a.props)).ref=Vo(r,c,a),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}a.type===k?((o=Fl(a.props.children,r.mode,u,a.key)).return=r,r=o):((u=zl(a.type,a.key,a.props,null,r.mode,u)).ref=Vo(r,o,a),u.return=r,r=u)}return s(r);case x:e:{for(c=a.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===a.containerInfo&&o.stateNode.implementation===a.implementation){n(r,o.sibling),(o=i(o,a.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=jl(a,r.mode,u)).return=r,r=o}return s(r);case O:return e(r,o,(c=a._init)(a._payload),u)}if(te(a))return g(r,o,a,u);if(z(a))return m(r,o,a,u);qo(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==o&&6===o.tag?(n(r,o.sibling),(o=i(o,a)).return=r,r=o):(n(r,o),(o=$l(a,r.mode,u)).return=r,r=o),s(r)):n(r,o)}}var Qo=Yo(!0),Xo=Yo(!1),Jo={},ea=Ei(Jo),ta=Ei(Jo),na=Ei(Jo);function ra(e){if(e===Jo)throw Error(o(174));return e}function ia(e,t){switch(Ci(na,t),Ci(ta,e),Ci(ea,Jo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Si(ea),Ci(ea,t)}function oa(){Si(ea),Si(ta),Si(na)}function aa(e){ra(na.current);var t=ra(ea.current),n=ue(t,e.type);t!==n&&(Ci(ta,e),Ci(ea,n))}function sa(e){ta.current===e&&(Si(ea),Si(ta))}var ua=Ei(0);function la(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ca=[];function da(){for(var e=0;e<ca.length;e++)ca[e]._workInProgressVersionPrimary=null;ca.length=0}var fa=w.ReactCurrentDispatcher,ha=w.ReactCurrentBatchConfig,pa=0,ga=null,ma=null,ya=null,va=!1,ba=!1,wa=0,_a=0;function xa(){throw Error(o(321))}function ka(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function Ea(e,t,n,r,i,a){if(pa=a,ga=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,fa.current=null===e||null===e.memoizedState?ss:us,e=n(r,i),ba){a=0;do{if(ba=!1,wa=0,25<=a)throw Error(o(301));a+=1,ya=ma=null,t.updateQueue=null,fa.current=ls,e=n(r,i)}while(ba)}if(fa.current=as,t=null!==ma&&null!==ma.next,pa=0,ya=ma=ga=null,va=!1,t)throw Error(o(300));return e}function Sa(){var e=0!==wa;return wa=0,e}function Ca(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ya?ga.memoizedState=ya=e:ya=ya.next=e,ya}function Aa(){if(null===ma){var e=ga.alternate;e=null!==e?e.memoizedState:null}else e=ma.next;var t=null===ya?ga.memoizedState:ya.next;if(null!==t)ya=t,ma=e;else{if(null===e)throw Error(o(310));e={memoizedState:(ma=e).memoizedState,baseState:ma.baseState,baseQueue:ma.baseQueue,queue:ma.queue,next:null},null===ya?ga.memoizedState=ya=e:ya=ya.next=e}return ya}function Ra(e,t){return"function"==typeof t?t(e):t}function Pa(e){var t=Aa(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=ma,i=r.baseQueue,a=n.pending;if(null!==a){if(null!==i){var s=i.next;i.next=a.next,a.next=s}r.baseQueue=i=a,n.pending=null}if(null!==i){a=i.next,r=r.baseState;var u=s=null,l=null,c=a;do{var d=c.lane;if((pa&d)===d)null!==l&&(l=l.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var f={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===l?(u=l=f,s=r):l=l.next=f,ga.lanes|=d,Du|=d}c=c.next}while(null!==c&&c!==a);null===l?s=r:l.next=u,sr(r,t.memoizedState)||(ws=!0),t.memoizedState=r,t.baseState=s,t.baseQueue=l,n.lastRenderedState=r}if(null!==(e=n.interleaved)){i=e;do{a=i.lane,ga.lanes|=a,Du|=a,i=i.next}while(i!==e)}else null===i&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ta(e){var t=Aa(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,a=t.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{a=e(a,s.action),s=s.next}while(s!==i);sr(a,t.memoizedState)||(ws=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function La(){}function Oa(e,t){var n=ga,r=Aa(),i=t(),a=!sr(r.memoizedState,i);if(a&&(r.memoizedState=i,ws=!0),r=r.queue,Za(za.bind(null,n,r,e),[e]),r.getSnapshot!==t||a||null!==ya&&1&ya.memoizedState.tag){if(n.flags|=2048,ja(9,Na.bind(null,n,r,i,t),void 0,null),null===Tu)throw Error(o(349));0!=(30&pa)||Ma(n,t,i)}return i}function Ma(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ga.updateQueue)?(t={lastEffect:null,stores:null},ga.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Na(e,t,n,r){t.value=n,t.getSnapshot=r,Fa(t)&&Da(e)}function za(e,t,n){return n((function(){Fa(t)&&Da(e)}))}function Fa(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!sr(e,n)}catch(e){return!0}}function Da(e){var t=To(e,1);null!==t&&rl(t,e,1,-1)}function $a(e){var t=Ca();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ra,lastRenderedState:e},t.queue=e,e=e.dispatch=ns.bind(null,ga,e),[t.memoizedState,e]}function ja(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ga.updateQueue)?(t={lastEffect:null,stores:null},ga.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Ia(){return Aa().memoizedState}function Ga(e,t,n,r){var i=Ca();ga.flags|=e,i.memoizedState=ja(1|t,n,void 0,void 0===r?null:r)}function Ba(e,t,n,r){var i=Aa();r=void 0===r?null:r;var o=void 0;if(null!==ma){var a=ma.memoizedState;if(o=a.destroy,null!==r&&ka(r,a.deps))return void(i.memoizedState=ja(t,n,o,r))}ga.flags|=e,i.memoizedState=ja(1|t,n,o,r)}function Ua(e,t){return Ga(8390656,8,e,t)}function Za(e,t){return Ba(2048,8,e,t)}function Wa(e,t){return Ba(4,2,e,t)}function Ha(e,t){return Ba(4,4,e,t)}function Va(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function qa(e,t,n){return n=null!=n?n.concat([e]):null,Ba(4,4,Va.bind(null,t,e),n)}function Ka(){}function Ya(e,t){var n=Aa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ka(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Qa(e,t){var n=Aa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ka(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Xa(e,t,n){return 0==(21&pa)?(e.baseState&&(e.baseState=!1,ws=!0),e.memoizedState=n):(sr(n,t)||(n=gt(),ga.lanes|=n,Du|=n,e.baseState=!0),t)}function Ja(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=ha.transition;ha.transition={};try{e(!1),t()}finally{bt=n,ha.transition=r}}function es(){return Aa().memoizedState}function ts(e,t,n){var r=nl(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rs(e)?is(t,n):null!==(n=Po(e,t,n,r))&&(rl(n,e,r,tl()),os(n,t,r))}function ns(e,t,n){var r=nl(e),i={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rs(e))is(t,i);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var a=t.lastRenderedState,s=o(a,n);if(i.hasEagerState=!0,i.eagerState=s,sr(s,a)){var u=t.interleaved;return null===u?(i.next=i,Ro(t)):(i.next=u.next,u.next=i),void(t.interleaved=i)}}catch(e){}null!==(n=Po(e,t,i,r))&&(rl(n,e,r,i=tl()),os(n,t,r))}}function rs(e){var t=e.alternate;return e===ga||null!==t&&t===ga}function is(e,t){ba=va=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function os(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}var as={readContext:Co,useCallback:xa,useContext:xa,useEffect:xa,useImperativeHandle:xa,useInsertionEffect:xa,useLayoutEffect:xa,useMemo:xa,useReducer:xa,useRef:xa,useState:xa,useDebugValue:xa,useDeferredValue:xa,useTransition:xa,useMutableSource:xa,useSyncExternalStore:xa,useId:xa,unstable_isNewReconciler:!1},ss={readContext:Co,useCallback:function(e,t){return Ca().memoizedState=[e,void 0===t?null:t],e},useContext:Co,useEffect:Ua,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ga(4194308,4,Va.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ga(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ga(4,2,e,t)},useMemo:function(e,t){var n=Ca();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ca();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=ts.bind(null,ga,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ca().memoizedState=e},useState:$a,useDebugValue:Ka,useDeferredValue:function(e){return Ca().memoizedState=e},useTransition:function(){var e=$a(!1),t=e[0];return e=Ja.bind(null,e[1]),Ca().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ga,i=Ca();if(io){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Tu)throw Error(o(349));0!=(30&pa)||Ma(r,t,n)}i.memoizedState=n;var a={value:n,getSnapshot:t};return i.queue=a,Ua(za.bind(null,r,a,e),[e]),r.flags|=2048,ja(9,Na.bind(null,r,a,n,t),void 0,null),n},useId:function(){var e=Ca(),t=Tu.identifierPrefix;if(io){var n=Qi;t=":"+t+"R"+(n=(Yi&~(1<<32-at(Yi)-1)).toString(32)+n),0<(n=wa++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=_a++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},us={readContext:Co,useCallback:Ya,useContext:Co,useEffect:Za,useImperativeHandle:qa,useInsertionEffect:Wa,useLayoutEffect:Ha,useMemo:Qa,useReducer:Pa,useRef:Ia,useState:function(){return Pa(Ra)},useDebugValue:Ka,useDeferredValue:function(e){return Xa(Aa(),ma.memoizedState,e)},useTransition:function(){return[Pa(Ra)[0],Aa().memoizedState]},useMutableSource:La,useSyncExternalStore:Oa,useId:es,unstable_isNewReconciler:!1},ls={readContext:Co,useCallback:Ya,useContext:Co,useEffect:Za,useImperativeHandle:qa,useInsertionEffect:Wa,useLayoutEffect:Ha,useMemo:Qa,useReducer:Ta,useRef:Ia,useState:function(){return Ta(Ra)},useDebugValue:Ka,useDeferredValue:function(e){var t=Aa();return null===ma?t.memoizedState=e:Xa(t,ma.memoizedState,e)},useTransition:function(){return[Ta(Ra)[0],Aa().memoizedState]},useMutableSource:La,useSyncExternalStore:Oa,useId:es,unstable_isNewReconciler:!1};function cs(e,t){try{var n="",r=t;do{n+=G(r),r=r.return}while(r);var i=n}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:i,digest:null}}function ds(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fs(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var hs="function"==typeof WeakMap?WeakMap:Map;function ps(e,t,n){(n=No(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wu||(Wu=!0,Hu=r),fs(0,t)},n}function gs(e,t,n){(n=No(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return r(i)},n.callback=function(){fs(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){fs(0,t),"function"!=typeof r&&(null===Vu?Vu=new Set([this]):Vu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ms(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new hs;var i=new Set;r.set(t,i)}else void 0===(i=r.get(t))&&(i=new Set,r.set(t,i));i.has(n)||(i.add(n),e=Cl.bind(null,e,t,n),t.then(e,e))}function ys(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function vs(e,t,n,r,i){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=No(-1,1)).tag=2,zo(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=i,e)}var bs=w.ReactCurrentOwner,ws=!1;function _s(e,t,n,r){t.child=null===e?Xo(t,null,n,r):Qo(t,e.child,n,r)}function xs(e,t,n,r,i){n=n.render;var o=t.ref;return So(t,i),r=Ea(e,t,n,r,o,i),n=Sa(),null===e||ws?(io&&n&&eo(t),t.flags|=1,_s(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Ws(e,t,i))}function ks(e,t,n,r,i){if(null===e){var o=n.type;return"function"!=typeof o||Ml(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=zl(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Es(e,t,o,r,i))}if(o=e.child,0==(e.lanes&i)){var a=o.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(a,r)&&e.ref===t.ref)return Ws(e,t,i)}return t.flags|=1,(e=Nl(o,r)).ref=t.ref,e.return=t,t.child=e}function Es(e,t,n,r,i){if(null!==e){var o=e.memoizedProps;if(ur(o,r)&&e.ref===t.ref){if(ws=!1,t.pendingProps=r=o,0==(e.lanes&i))return t.lanes=e.lanes,Ws(e,t,i);0!=(131072&e.flags)&&(ws=!0)}}return As(e,t,n,r,i)}function Ss(e,t,n){var r=t.pendingProps,i=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Ci(Nu,Mu),Mu|=n;else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Ci(Nu,Mu),Mu|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Ci(Nu,Mu),Mu|=r}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Ci(Nu,Mu),Mu|=r;return _s(e,t,i,n),t.child}function Cs(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function As(e,t,n,r,i){var o=Oi(n)?Ti:Ri.current;return o=Li(t,o),So(t,i),n=Ea(e,t,n,r,o,i),r=Sa(),null===e||ws?(io&&r&&eo(t),t.flags|=1,_s(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Ws(e,t,i))}function Rs(e,t,n,r,i){if(Oi(n)){var o=!0;Fi(t)}else o=!1;if(So(t,i),null===t.stateNode)Zs(e,t),Zo(t,n,r),Ho(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var u=a.context,l=n.contextType;l="object"==typeof l&&null!==l?Co(l):Li(t,l=Oi(n)?Ti:Ri.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||u!==l)&&Wo(t,a,r,l),Lo=!1;var f=t.memoizedState;a.state=f,$o(t,r,a,i),u=t.memoizedState,s!==r||f!==u||Pi.current||Lo?("function"==typeof c&&(Go(t,n,c,r),u=t.memoizedState),(s=Lo||Uo(t,n,s,r,f,u,l))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=l,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Mo(e,t),s=t.memoizedProps,l=t.type===t.elementType?s:yo(t.type,s),a.props=l,d=t.pendingProps,f=a.context,u="object"==typeof(u=n.contextType)&&null!==u?Co(u):Li(t,u=Oi(n)?Ti:Ri.current);var h=n.getDerivedStateFromProps;(c="function"==typeof h||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==d||f!==u)&&Wo(t,a,r,u),Lo=!1,f=t.memoizedState,a.state=f,$o(t,r,a,i);var p=t.memoizedState;s!==d||f!==p||Pi.current||Lo?("function"==typeof h&&(Go(t,n,h,r),p=t.memoizedState),(l=Lo||Uo(t,n,l,r,f,p,u)||!1)?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,u)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=u,r=l):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Ps(e,t,n,r,o,i)}function Ps(e,t,n,r,i,o){Cs(e,t);var a=0!=(128&t.flags);if(!r&&!a)return i&&Di(t,n,!1),Ws(e,t,o);r=t.stateNode,bs.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Qo(t,e.child,null,o),t.child=Qo(t,null,s,o)):_s(e,t,s,o),t.memoizedState=r.state,i&&Di(t,n,!0),t.child}function Ts(e){var t=e.stateNode;t.pendingContext?Ni(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ni(0,t.context,!1),ia(e,t.containerInfo)}function Ls(e,t,n,r,i){return po(),go(i),t.flags|=256,_s(e,t,n,r),t.child}var Os,Ms,Ns,zs,Fs={dehydrated:null,treeContext:null,retryLane:0};function Ds(e){return{baseLanes:e,cachePool:null,transitions:null}}function $s(e,t,n){var r,i=t.pendingProps,a=ua.current,s=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(s=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),Ci(ua,1&a),null===e)return lo(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=i.children,e=i.fallback,s?(i=t.mode,s=t.child,u={mode:"hidden",children:u},0==(1&i)&&null!==s?(s.childLanes=0,s.pendingProps=u):s=Dl(u,i,0,null),e=Fl(e,i,n,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=Ds(n),t.memoizedState=Fs,e):js(t,u));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,t,n,r,i,a,s){if(n)return 256&t.flags?(t.flags&=-257,Is(e,t,s,r=ds(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=r.fallback,i=t.mode,r=Dl({mode:"visible",children:r.children},i,0,null),(a=Fl(a,i,s,null)).flags|=2,r.return=t,a.return=t,r.sibling=a,t.child=r,0!=(1&t.mode)&&Qo(t,e.child,null,s),t.child.memoizedState=Ds(s),t.memoizedState=Fs,a);if(0==(1&t.mode))return Is(e,t,s,null);if("$!"===i.data){if(r=i.nextSibling&&i.nextSibling.dataset)var u=r.dgst;return r=u,Is(e,t,s,r=ds(a=Error(o(419)),r,void 0))}if(u=0!=(s&e.childLanes),ws||u){if(null!==(r=Tu)){switch(s&-s){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}0!==(i=0!=(i&(r.suspendedLanes|s))?0:i)&&i!==a.retryLane&&(a.retryLane=i,To(e,i),rl(r,e,i,-1))}return ml(),Is(e,t,s,r=ds(Error(o(421))))}return"$?"===i.data?(t.flags|=128,t.child=e.child,t=Rl.bind(null,e),i._reactRetry=t,null):(e=a.treeContext,ro=li(i.nextSibling),no=t,io=!0,oo=null,null!==e&&(Vi[qi++]=Yi,Vi[qi++]=Qi,Vi[qi++]=Ki,Yi=e.id,Qi=e.overflow,Ki=t),(t=js(t,r.children)).flags|=4096,t)}(e,t,u,i,r,a,n);if(s){s=i.fallback,u=t.mode,r=(a=e.child).sibling;var l={mode:"hidden",children:i.children};return 0==(1&u)&&t.child!==a?((i=t.child).childLanes=0,i.pendingProps=l,t.deletions=null):(i=Nl(a,l)).subtreeFlags=14680064&a.subtreeFlags,null!==r?s=Nl(r,s):(s=Fl(s,u,n,null)).flags|=2,s.return=t,i.return=t,i.sibling=s,t.child=i,i=s,s=t.child,u=null===(u=e.child.memoizedState)?Ds(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},s.memoizedState=u,s.childLanes=e.childLanes&~n,t.memoizedState=Fs,i}return e=(s=e.child).sibling,i=Nl(s,{mode:"visible",children:i.children}),0==(1&t.mode)&&(i.lanes=n),i.return=t,i.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=i,t.memoizedState=null,i}function js(e,t){return(t=Dl({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Is(e,t,n,r){return null!==r&&go(r),Qo(t,e.child,null,n),(e=js(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Gs(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Eo(e.return,t,n)}function Bs(e,t,n,r,i){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=i)}function Us(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(_s(e,t,r.children,n),0!=(2&(r=ua.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Gs(e,n,t);else if(19===e.tag)Gs(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Ci(ua,r),0==(1&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===la(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Bs(t,!1,i,n,o);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===la(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Bs(t,!0,n,null,o);break;case"together":Bs(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Zs(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Ws(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Du|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Nl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Nl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Hs(e,t){if(!io)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Vs(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=14680064&i.subtreeFlags,r|=14680064&i.flags,i.return=e,i=i.sibling;else for(i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function qs(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Vs(t),null;case 1:case 17:return Oi(t.type)&&Mi(),Vs(t),null;case 3:return r=t.stateNode,oa(),Si(Pi),Si(Ri),da(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==oo&&(sl(oo),oo=null))),Ms(e,t),Vs(t),null;case 5:sa(t);var i=ra(na.current);if(n=t.type,null!==e&&null!=t.stateNode)Ns(e,t,n,r,i),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Vs(t),null}if(e=ra(ea.current),fo(t)){r=t.stateNode,n=t.type;var a=t.memoizedProps;switch(r[fi]=t,r[hi]=a,e=0!=(1&t.mode),n){case"dialog":jr("cancel",r),jr("close",r);break;case"iframe":case"object":case"embed":jr("load",r);break;case"video":case"audio":for(i=0;i<zr.length;i++)jr(zr[i],r);break;case"source":jr("error",r);break;case"img":case"image":case"link":jr("error",r),jr("load",r);break;case"details":jr("toggle",r);break;case"input":Y(r,a),jr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},jr("invalid",r);break;case"textarea":ie(r,a),jr("invalid",r)}for(var u in ve(n,a),i=null,a)if(a.hasOwnProperty(u)){var l=a[u];"children"===u?"string"==typeof l?r.textContent!==l&&(!0!==a.suppressHydrationWarning&&Xr(r.textContent,l,e),i=["children",l]):"number"==typeof l&&r.textContent!==""+l&&(!0!==a.suppressHydrationWarning&&Xr(r.textContent,l,e),i=["children",""+l]):s.hasOwnProperty(u)&&null!=l&&"onScroll"===u&&jr("scroll",r)}switch(n){case"input":H(r),J(r,a,!0);break;case"textarea":H(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Jr)}r=i,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===i.nodeType?i:i.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[fi]=t,e[hi]=r,Os(e,t,!1,!1),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":jr("cancel",e),jr("close",e),i=r;break;case"iframe":case"object":case"embed":jr("load",e),i=r;break;case"video":case"audio":for(i=0;i<zr.length;i++)jr(zr[i],e);i=r;break;case"source":jr("error",e),i=r;break;case"img":case"image":case"link":jr("error",e),jr("load",e),i=r;break;case"details":jr("toggle",e),i=r;break;case"input":Y(e,r),i=K(e,r),jr("invalid",e);break;case"option":default:i=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=D({},r,{value:void 0}),jr("invalid",e);break;case"textarea":ie(e,r),i=re(e,r),jr("invalid",e)}for(a in ve(n,i),l=i)if(l.hasOwnProperty(a)){var c=l[a];"style"===a?me(e,c):"dangerouslySetInnerHTML"===a?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===a?"string"==typeof c?("textarea"!==n||""!==c)&&fe(e,c):"number"==typeof c&&fe(e,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(s.hasOwnProperty(a)?null!=c&&"onScroll"===a&&jr("scroll",e):null!=c&&b(e,a,c,u))}switch(n){case"input":H(e),J(e,r,!1);break;case"textarea":H(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Z(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?ne(e,!!r.multiple,a,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Vs(t),null;case 6:if(e&&null!=t.stateNode)zs(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=ra(na.current),ra(ea.current),fo(t)){if(r=t.stateNode,n=t.memoizedProps,r[fi]=t,(a=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Xr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Xr(r.nodeValue,n,0!=(1&e.mode))}a&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[fi]=t,t.stateNode=r}return Vs(t),null;case 13:if(Si(ua),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(io&&null!==ro&&0!=(1&t.mode)&&0==(128&t.flags))ho(),po(),t.flags|=98560,a=!1;else if(a=fo(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(o(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(o(317));a[fi]=t}else po(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Vs(t),a=!1}else null!==oo&&(sl(oo),oo=null),a=!0;if(!a)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ua.current)?0===zu&&(zu=3):ml())),null!==t.updateQueue&&(t.flags|=4),Vs(t),null);case 4:return oa(),Ms(e,t),null===e&&Br(t.stateNode.containerInfo),Vs(t),null;case 10:return ko(t.type._context),Vs(t),null;case 19:if(Si(ua),null===(a=t.memoizedState))return Vs(t),null;if(r=0!=(128&t.flags),null===(u=a.rendering))if(r)Hs(a,!1);else{if(0!==zu||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=la(e))){for(t.flags|=128,Hs(a,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(a=n).flags&=14680066,null===(u=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=u.childLanes,a.lanes=u.lanes,a.child=u.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=u.memoizedProps,a.memoizedState=u.memoizedState,a.updateQueue=u.updateQueue,a.type=u.type,e=u.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Ci(ua,1&ua.current|2),t.child}e=e.sibling}null!==a.tail&&Qe()>Uu&&(t.flags|=128,r=!0,Hs(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=la(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Hs(a,!0),null===a.tail&&"hidden"===a.tailMode&&!u.alternate&&!io)return Vs(t),null}else 2*Qe()-a.renderingStartTime>Uu&&1073741824!==n&&(t.flags|=128,r=!0,Hs(a,!1),t.lanes=4194304);a.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=a.last)?n.sibling=u:t.child=u,a.last=u)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Qe(),t.sibling=null,n=ua.current,Ci(ua,r?1&n|2:1&n),t):(Vs(t),null);case 22:case 23:return fl(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Mu)&&(Vs(t),6&t.subtreeFlags&&(t.flags|=8192)):Vs(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Ks(e,t){switch(to(t),t.tag){case 1:return Oi(t.type)&&Mi(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return oa(),Si(Pi),Si(Ri),da(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return sa(t),null;case 13:if(Si(ua),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));po()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Si(ua),null;case 4:return oa(),null;case 10:return ko(t.type._context),null;case 22:case 23:return fl(),null;default:return null}}Os=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ms=function(){},Ns=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,ra(ea.current);var o,a=null;switch(n){case"input":i=K(e,i),r=K(e,r),a=[];break;case"select":i=D({},i,{value:void 0}),r=D({},r,{value:void 0}),a=[];break;case"textarea":i=re(e,i),r=re(e,r),a=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ve(n,r),n=null,i)if(!r.hasOwnProperty(c)&&i.hasOwnProperty(c)&&null!=i[c])if("style"===c){var u=i[c];for(o in u)u.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(s.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in r){var l=r[c];if(u=null!=i?i[c]:void 0,r.hasOwnProperty(c)&&l!==u&&(null!=l||null!=u))if("style"===c)if(u){for(o in u)!u.hasOwnProperty(o)||l&&l.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in l)l.hasOwnProperty(o)&&u[o]!==l[o]&&(n||(n={}),n[o]=l[o])}else n||(a||(a=[]),a.push(c,n)),n=l;else"dangerouslySetInnerHTML"===c?(l=l?l.__html:void 0,u=u?u.__html:void 0,null!=l&&u!==l&&(a=a||[]).push(c,l)):"children"===c?"string"!=typeof l&&"number"!=typeof l||(a=a||[]).push(c,""+l):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(s.hasOwnProperty(c)?(null!=l&&"onScroll"===c&&jr("scroll",e),a||u===l||(a=[])):(a=a||[]).push(c,l))}n&&(a=a||[]).push("style",n);var c=a;(t.updateQueue=c)&&(t.flags|=4)}},zs=function(e,t,n,r){n!==r&&(t.flags|=4)};var Ys=!1,Qs=!1,Xs="function"==typeof WeakSet?WeakSet:Set,Js=null;function eu(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Sl(e,t,n)}else n.current=null}function tu(e,t,n){try{n()}catch(n){Sl(e,t,n)}}var nu=!1;function ru(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var i=r=r.next;do{if((i.tag&e)===e){var o=i.destroy;i.destroy=void 0,void 0!==o&&tu(t,n,o)}i=i.next}while(i!==r)}}function iu(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ou(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function au(e){var t=e.alternate;null!==t&&(e.alternate=null,au(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fi],delete t[hi],delete t[gi],delete t[mi],delete t[yi]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function su(e){return 5===e.tag||3===e.tag||4===e.tag}function uu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||su(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function lu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(lu(e,t,n),e=e.sibling;null!==e;)lu(e,t,n),e=e.sibling}function cu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cu(e,t,n),e=e.sibling;null!==e;)cu(e,t,n),e=e.sibling}var du=null,fu=!1;function hu(e,t,n){for(n=n.child;null!==n;)pu(e,t,n),n=n.sibling}function pu(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(it,n)}catch(e){}switch(n.tag){case 5:Qs||eu(n,t);case 6:var r=du,i=fu;du=null,hu(e,t,n),fu=i,null!==(du=r)&&(fu?(e=du,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):du.removeChild(n.stateNode));break;case 18:null!==du&&(fu?(e=du,n=n.stateNode,8===e.nodeType?ui(e.parentNode,n):1===e.nodeType&&ui(e,n),Bt(e)):ui(du,n.stateNode));break;case 4:r=du,i=fu,du=n.stateNode.containerInfo,fu=!0,hu(e,t,n),du=r,fu=i;break;case 0:case 11:case 14:case 15:if(!Qs&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){i=r=r.next;do{var o=i,a=o.destroy;o=o.tag,void 0!==a&&(0!=(2&o)||0!=(4&o))&&tu(n,t,a),i=i.next}while(i!==r)}hu(e,t,n);break;case 1:if(!Qs&&(eu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Sl(n,t,e)}hu(e,t,n);break;case 21:hu(e,t,n);break;case 22:1&n.mode?(Qs=(r=Qs)||null!==n.memoizedState,hu(e,t,n),Qs=r):hu(e,t,n);break;default:hu(e,t,n)}}function gu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xs),t.forEach((function(t){var r=Pl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function mu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var i=n[r];try{var a=e,s=t,u=s;e:for(;null!==u;){switch(u.tag){case 5:du=u.stateNode,fu=!1;break e;case 3:case 4:du=u.stateNode.containerInfo,fu=!0;break e}u=u.return}if(null===du)throw Error(o(160));pu(a,s,i),du=null,fu=!1;var l=i.alternate;null!==l&&(l.return=null),i.return=null}catch(e){Sl(i,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)yu(t,e),t=t.sibling}function yu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(mu(t,e),vu(e),4&r){try{ru(3,e,e.return),iu(3,e)}catch(t){Sl(e,e.return,t)}try{ru(5,e,e.return)}catch(t){Sl(e,e.return,t)}}break;case 1:mu(t,e),vu(e),512&r&&null!==n&&eu(n,n.return);break;case 5:if(mu(t,e),vu(e),512&r&&null!==n&&eu(n,n.return),32&e.flags){var i=e.stateNode;try{fe(i,"")}catch(t){Sl(e,e.return,t)}}if(4&r&&null!=(i=e.stateNode)){var a=e.memoizedProps,s=null!==n?n.memoizedProps:a,u=e.type,l=e.updateQueue;if(e.updateQueue=null,null!==l)try{"input"===u&&"radio"===a.type&&null!=a.name&&Q(i,a),be(u,s);var c=be(u,a);for(s=0;s<l.length;s+=2){var d=l[s],f=l[s+1];"style"===d?me(i,f):"dangerouslySetInnerHTML"===d?de(i,f):"children"===d?fe(i,f):b(i,d,f,c)}switch(u){case"input":X(i,a);break;case"textarea":oe(i,a);break;case"select":var h=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!a.multiple;var p=a.value;null!=p?ne(i,!!a.multiple,p,!1):h!==!!a.multiple&&(null!=a.defaultValue?ne(i,!!a.multiple,a.defaultValue,!0):ne(i,!!a.multiple,a.multiple?[]:"",!1))}i[hi]=a}catch(t){Sl(e,e.return,t)}}break;case 6:if(mu(t,e),vu(e),4&r){if(null===e.stateNode)throw Error(o(162));i=e.stateNode,a=e.memoizedProps;try{i.nodeValue=a}catch(t){Sl(e,e.return,t)}}break;case 3:if(mu(t,e),vu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Bt(t.containerInfo)}catch(t){Sl(e,e.return,t)}break;case 4:default:mu(t,e),vu(e);break;case 13:mu(t,e),vu(e),8192&(i=e.child).flags&&(a=null!==i.memoizedState,i.stateNode.isHidden=a,!a||null!==i.alternate&&null!==i.alternate.memoizedState||(Bu=Qe())),4&r&&gu(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Qs=(c=Qs)||d,mu(t,e),Qs=c):mu(t,e),vu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&0!=(1&e.mode))for(Js=e,d=e.child;null!==d;){for(f=Js=d;null!==Js;){switch(p=(h=Js).child,h.tag){case 0:case 11:case 14:case 15:ru(4,h,h.return);break;case 1:eu(h,h.return);var g=h.stateNode;if("function"==typeof g.componentWillUnmount){r=h,n=h.return;try{t=r,g.props=t.memoizedProps,g.state=t.memoizedState,g.componentWillUnmount()}catch(e){Sl(r,n,e)}}break;case 5:eu(h,h.return);break;case 22:if(null!==h.memoizedState){xu(f);continue}}null!==p?(p.return=h,Js=p):xu(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{i=f.stateNode,c?"function"==typeof(a=i.style).setProperty?a.setProperty("display","none","important"):a.display="none":(u=f.stateNode,s=null!=(l=f.memoizedProps.style)&&l.hasOwnProperty("display")?l.display:null,u.style.display=ge("display",s))}catch(t){Sl(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=c?"":f.memoizedProps}catch(t){Sl(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:mu(t,e),vu(e),4&r&&gu(e);case 21:}}function vu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(su(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var i=r.stateNode;32&r.flags&&(fe(i,""),r.flags&=-33),cu(e,uu(e),i);break;case 3:case 4:var a=r.stateNode.containerInfo;lu(e,uu(e),a);break;default:throw Error(o(161))}}catch(t){Sl(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bu(e,t,n){Js=e,wu(e,t,n)}function wu(e,t,n){for(var r=0!=(1&e.mode);null!==Js;){var i=Js,o=i.child;if(22===i.tag&&r){var a=null!==i.memoizedState||Ys;if(!a){var s=i.alternate,u=null!==s&&null!==s.memoizedState||Qs;s=Ys;var l=Qs;if(Ys=a,(Qs=u)&&!l)for(Js=i;null!==Js;)u=(a=Js).child,22===a.tag&&null!==a.memoizedState?ku(i):null!==u?(u.return=a,Js=u):ku(i);for(;null!==o;)Js=o,wu(o,t,n),o=o.sibling;Js=i,Ys=s,Qs=l}_u(e)}else 0!=(8772&i.subtreeFlags)&&null!==o?(o.return=i,Js=o):_u(e)}}function _u(e){for(;null!==Js;){var t=Js;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Qs||iu(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Qs)if(null===n)r.componentDidMount();else{var i=t.elementType===t.type?n.memoizedProps:yo(t.type,n.memoizedProps);r.componentDidUpdate(i,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&jo(t,a,r);break;case 3:var s=t.updateQueue;if(null!==s){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}jo(t,s,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var l=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":l.autoFocus&&n.focus();break;case"img":l.src&&(n.src=l.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Bt(f)}}}break;default:throw Error(o(163))}Qs||512&t.flags&&ou(t)}catch(e){Sl(t,t.return,e)}}if(t===e){Js=null;break}if(null!==(n=t.sibling)){n.return=t.return,Js=n;break}Js=t.return}}function xu(e){for(;null!==Js;){var t=Js;if(t===e){Js=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Js=n;break}Js=t.return}}function ku(e){for(;null!==Js;){var t=Js;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{iu(4,t)}catch(e){Sl(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var i=t.return;try{r.componentDidMount()}catch(e){Sl(t,i,e)}}var o=t.return;try{ou(t)}catch(e){Sl(t,o,e)}break;case 5:var a=t.return;try{ou(t)}catch(e){Sl(t,a,e)}}}catch(e){Sl(t,t.return,e)}if(t===e){Js=null;break}var s=t.sibling;if(null!==s){s.return=t.return,Js=s;break}Js=t.return}}var Eu,Su=Math.ceil,Cu=w.ReactCurrentDispatcher,Au=w.ReactCurrentOwner,Ru=w.ReactCurrentBatchConfig,Pu=0,Tu=null,Lu=null,Ou=0,Mu=0,Nu=Ei(0),zu=0,Fu=null,Du=0,$u=0,ju=0,Iu=null,Gu=null,Bu=0,Uu=1/0,Zu=null,Wu=!1,Hu=null,Vu=null,qu=!1,Ku=null,Yu=0,Qu=0,Xu=null,Ju=-1,el=0;function tl(){return 0!=(6&Pu)?Qe():-1!==Ju?Ju:Ju=Qe()}function nl(e){return 0==(1&e.mode)?1:0!=(2&Pu)&&0!==Ou?Ou&-Ou:null!==mo.transition?(0===el&&(el=gt()),el):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Yt(e.type)}function rl(e,t,n,r){if(50<Qu)throw Qu=0,Xu=null,Error(o(185));yt(e,n,r),0!=(2&Pu)&&e===Tu||(e===Tu&&(0==(2&Pu)&&($u|=n),4===zu&&ul(e,Ou)),il(e,r),1===n&&0===Pu&&0==(1&t.mode)&&(Uu=Qe()+500,ji&&Bi()))}function il(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,o=e.pendingLanes;0<o;){var a=31-at(o),s=1<<a,u=i[a];-1===u?0!=(s&n)&&0==(s&r)||(i[a]=ht(s,t)):u<=t&&(e.expiredLanes|=s),o&=~s}}(e,t);var r=ft(e,e===Tu?Ou:0);if(0===r)null!==n&&qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&qe(n),1===t)0===e.tag?function(e){ji=!0,Gi(e)}(ll.bind(null,e)):Gi(ll.bind(null,e)),ai((function(){0==(6&Pu)&&Bi()})),n=null;else{switch(wt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Tl(n,ol.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ol(e,t){if(Ju=-1,el=0,0!=(6&Pu))throw Error(o(327));var n=e.callbackNode;if(kl()&&e.callbackNode!==n)return null;var r=ft(e,e===Tu?Ou:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=yl(e,r);else{t=r;var i=Pu;Pu|=2;var a=gl();for(Tu===e&&Ou===t||(Zu=null,Uu=Qe()+500,hl(e,t));;)try{bl();break}catch(t){pl(e,t)}xo(),Cu.current=a,Pu=i,null!==Lu?t=0:(Tu=null,Ou=0,t=zu)}if(0!==t){if(2===t&&0!==(i=pt(e))&&(r=i,t=al(e,i)),1===t)throw n=Fu,hl(e,0),ul(e,r),il(e,Qe()),n;if(6===t)ul(e,r);else{if(i=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var i=n[r],o=i.getSnapshot;i=i.value;try{if(!sr(o(),i))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(i)&&(2===(t=yl(e,r))&&0!==(a=pt(e))&&(r=a,t=al(e,a)),1===t))throw n=Fu,hl(e,0),ul(e,r),il(e,Qe()),n;switch(e.finishedWork=i,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:xl(e,Gu,Zu);break;case 3:if(ul(e,r),(130023424&r)===r&&10<(t=Bu+500-Qe())){if(0!==ft(e,0))break;if(((i=e.suspendedLanes)&r)!==r){tl(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=ri(xl.bind(null,e,Gu,Zu),t);break}xl(e,Gu,Zu);break;case 4:if(ul(e,r),(4194240&r)===r)break;for(t=e.eventTimes,i=-1;0<r;){var s=31-at(r);a=1<<s,(s=t[s])>i&&(i=s),r&=~a}if(r=i,10<(r=(120>(r=Qe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Su(r/1960))-r)){e.timeoutHandle=ri(xl.bind(null,e,Gu,Zu),r);break}xl(e,Gu,Zu);break;default:throw Error(o(329))}}}return il(e,Qe()),e.callbackNode===n?ol.bind(null,e):null}function al(e,t){var n=Iu;return e.current.memoizedState.isDehydrated&&(hl(e,t).flags|=256),2!==(e=yl(e,t))&&(t=Gu,Gu=n,null!==t&&sl(t)),e}function sl(e){null===Gu?Gu=e:Gu.push.apply(Gu,e)}function ul(e,t){for(t&=~ju,t&=~$u,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),r=1<<n;e[n]=-1,t&=~r}}function ll(e){if(0!=(6&Pu))throw Error(o(327));kl();var t=ft(e,0);if(0==(1&t))return il(e,Qe()),null;var n=yl(e,t);if(0!==e.tag&&2===n){var r=pt(e);0!==r&&(t=r,n=al(e,r))}if(1===n)throw n=Fu,hl(e,0),ul(e,t),il(e,Qe()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,xl(e,Gu,Zu),il(e,Qe()),null}function cl(e,t){var n=Pu;Pu|=1;try{return e(t)}finally{0===(Pu=n)&&(Uu=Qe()+500,ji&&Bi())}}function dl(e){null!==Ku&&0===Ku.tag&&0==(6&Pu)&&kl();var t=Pu;Pu|=1;var n=Ru.transition,r=bt;try{if(Ru.transition=null,bt=1,e)return e()}finally{bt=r,Ru.transition=n,0==(6&(Pu=t))&&Bi()}}function fl(){Mu=Nu.current,Si(Nu)}function hl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ii(n)),null!==Lu)for(n=Lu.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Mi();break;case 3:oa(),Si(Pi),Si(Ri),da();break;case 5:sa(r);break;case 4:oa();break;case 13:case 19:Si(ua);break;case 10:ko(r.type._context);break;case 22:case 23:fl()}n=n.return}if(Tu=e,Lu=e=Nl(e.current,null),Ou=Mu=t,zu=0,Fu=null,ju=$u=Du=0,Gu=Iu=null,null!==Ao){for(t=0;t<Ao.length;t++)if(null!==(r=(n=Ao[t]).interleaved)){n.interleaved=null;var i=r.next,o=n.pending;if(null!==o){var a=o.next;o.next=i,r.next=a}n.pending=r}Ao=null}return e}function pl(e,t){for(;;){var n=Lu;try{if(xo(),fa.current=as,va){for(var r=ga.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}va=!1}if(pa=0,ya=ma=ga=null,ba=!1,wa=0,Au.current=null,null===n||null===n.return){zu=1,Fu=t,Lu=null;break}e:{var a=e,s=n.return,u=n,l=t;if(t=Ou,u.flags|=32768,null!==l&&"object"==typeof l&&"function"==typeof l.then){var c=l,d=u,f=d.tag;if(0==(1&d.mode)&&(0===f||11===f||15===f)){var h=d.alternate;h?(d.updateQueue=h.updateQueue,d.memoizedState=h.memoizedState,d.lanes=h.lanes):(d.updateQueue=null,d.memoizedState=null)}var p=ys(s);if(null!==p){p.flags&=-257,vs(p,s,u,0,t),1&p.mode&&ms(a,c,t),l=c;var g=(t=p).updateQueue;if(null===g){var m=new Set;m.add(l),t.updateQueue=m}else g.add(l);break e}if(0==(1&t)){ms(a,c,t),ml();break e}l=Error(o(426))}else if(io&&1&u.mode){var y=ys(s);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),vs(y,s,u,0,t),go(cs(l,u));break e}}a=l=cs(l,u),4!==zu&&(zu=2),null===Iu?Iu=[a]:Iu.push(a),a=s;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,Do(a,ps(0,l,t));break e;case 1:u=l;var v=a.type,b=a.stateNode;if(0==(128&a.flags)&&("function"==typeof v.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Vu||!Vu.has(b)))){a.flags|=65536,t&=-t,a.lanes|=t,Do(a,gs(a,u,t));break e}}a=a.return}while(null!==a)}_l(n)}catch(e){t=e,Lu===n&&null!==n&&(Lu=n=n.return);continue}break}}function gl(){var e=Cu.current;return Cu.current=as,null===e?as:e}function ml(){0!==zu&&3!==zu&&2!==zu||(zu=4),null===Tu||0==(268435455&Du)&&0==(268435455&$u)||ul(Tu,Ou)}function yl(e,t){var n=Pu;Pu|=2;var r=gl();for(Tu===e&&Ou===t||(Zu=null,hl(e,t));;)try{vl();break}catch(t){pl(e,t)}if(xo(),Pu=n,Cu.current=r,null!==Lu)throw Error(o(261));return Tu=null,Ou=0,zu}function vl(){for(;null!==Lu;)wl(Lu)}function bl(){for(;null!==Lu&&!Ke();)wl(Lu)}function wl(e){var t=Eu(e.alternate,e,Mu);e.memoizedProps=e.pendingProps,null===t?_l(e):Lu=t,Au.current=null}function _l(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=qs(n,t,Mu)))return void(Lu=n)}else{if(null!==(n=Ks(n,t)))return n.flags&=32767,void(Lu=n);if(null===e)return zu=6,void(Lu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Lu=t);Lu=t=e}while(null!==t);0===zu&&(zu=5)}function xl(e,t,n){var r=bt,i=Ru.transition;try{Ru.transition=null,bt=1,function(e,t,n,r){do{kl()}while(null!==Ku);if(0!=(6&Pu))throw Error(o(327));n=e.finishedWork;var i=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var i=31-at(n),o=1<<i;t[i]=0,r[i]=-1,e[i]=-1,n&=~o}}(e,a),e===Tu&&(Lu=Tu=null,Ou=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||qu||(qu=!0,Tl(tt,(function(){return kl(),null}))),a=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||a){a=Ru.transition,Ru.transition=null;var s=bt;bt=1;var u=Pu;Pu|=4,Au.current=null,function(e,t){if(ei=Zt,hr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var i=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var s=0,u=-1,l=-1,c=0,d=0,f=e,h=null;t:for(;;){for(var p;f!==n||0!==i&&3!==f.nodeType||(u=s+i),f!==a||0!==r&&3!==f.nodeType||(l=s+r),3===f.nodeType&&(s+=f.nodeValue.length),null!==(p=f.firstChild);)h=f,f=p;for(;;){if(f===e)break t;if(h===n&&++c===i&&(u=s),h===a&&++d===r&&(l=s),null!==(p=f.nextSibling))break;h=(f=h).parentNode}f=p}n=-1===u||-1===l?null:{start:u,end:l}}else n=null}n=n||{start:0,end:0}}else n=null;for(ti={focusedElem:e,selectionRange:n},Zt=!1,Js=t;null!==Js;)if(e=(t=Js).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Js=e;else for(;null!==Js;){t=Js;try{var g=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==g){var m=g.memoizedProps,y=g.memoizedState,v=t.stateNode,b=v.getSnapshotBeforeUpdate(t.elementType===t.type?m:yo(t.type,m),y);v.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(o(163))}}catch(e){Sl(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Js=e;break}Js=t.return}g=nu,nu=!1}(e,n),yu(n,e),pr(ti),Zt=!!ei,ti=ei=null,e.current=n,bu(n,e,i),Ye(),Pu=u,bt=s,Ru.transition=a}else e.current=n;if(qu&&(qu=!1,Ku=e,Yu=i),0===(a=e.pendingLanes)&&(Vu=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(it,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),il(e,Qe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((i=t[n]).value,{componentStack:i.stack,digest:i.digest});if(Wu)throw Wu=!1,e=Hu,Hu=null,e;0!=(1&Yu)&&0!==e.tag&&kl(),0!=(1&(a=e.pendingLanes))?e===Xu?Qu++:(Qu=0,Xu=e):Qu=0,Bi()}(e,t,n,r)}finally{Ru.transition=i,bt=r}return null}function kl(){if(null!==Ku){var e=wt(Yu),t=Ru.transition,n=bt;try{if(Ru.transition=null,bt=16>e?16:e,null===Ku)var r=!1;else{if(e=Ku,Ku=null,Yu=0,0!=(6&Pu))throw Error(o(331));var i=Pu;for(Pu|=4,Js=e.current;null!==Js;){var a=Js,s=a.child;if(0!=(16&Js.flags)){var u=a.deletions;if(null!==u){for(var l=0;l<u.length;l++){var c=u[l];for(Js=c;null!==Js;){var d=Js;switch(d.tag){case 0:case 11:case 15:ru(8,d,a)}var f=d.child;if(null!==f)f.return=d,Js=f;else for(;null!==Js;){var h=(d=Js).sibling,p=d.return;if(au(d),d===c){Js=null;break}if(null!==h){h.return=p,Js=h;break}Js=p}}}var g=a.alternate;if(null!==g){var m=g.child;if(null!==m){g.child=null;do{var y=m.sibling;m.sibling=null,m=y}while(null!==m)}}Js=a}}if(0!=(2064&a.subtreeFlags)&&null!==s)s.return=a,Js=s;else e:for(;null!==Js;){if(0!=(2048&(a=Js).flags))switch(a.tag){case 0:case 11:case 15:ru(9,a,a.return)}var v=a.sibling;if(null!==v){v.return=a.return,Js=v;break e}Js=a.return}}var b=e.current;for(Js=b;null!==Js;){var w=(s=Js).child;if(0!=(2064&s.subtreeFlags)&&null!==w)w.return=s,Js=w;else e:for(s=b;null!==Js;){if(0!=(2048&(u=Js).flags))try{switch(u.tag){case 0:case 11:case 15:iu(9,u)}}catch(e){Sl(u,u.return,e)}if(u===s){Js=null;break e}var _=u.sibling;if(null!==_){_.return=u.return,Js=_;break e}Js=u.return}}if(Pu=i,Bi(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(it,e)}catch(e){}r=!0}return r}finally{bt=n,Ru.transition=t}}return!1}function El(e,t,n){e=zo(e,t=ps(0,t=cs(n,t),1),1),t=tl(),null!==e&&(yt(e,1,t),il(e,t))}function Sl(e,t,n){if(3===e.tag)El(e,e,n);else for(;null!==t;){if(3===t.tag){El(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Vu||!Vu.has(r))){t=zo(t,e=gs(t,e=cs(n,e),1),1),e=tl(),null!==t&&(yt(t,1,e),il(t,e));break}}t=t.return}}function Cl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tl(),e.pingedLanes|=e.suspendedLanes&n,Tu===e&&(Ou&n)===n&&(4===zu||3===zu&&(130023424&Ou)===Ou&&500>Qe()-Bu?hl(e,0):ju|=n),il(e,t)}function Al(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=tl();null!==(e=To(e,t))&&(yt(e,t,n),il(e,n))}function Rl(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Al(e,n)}function Pl(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;null!==i&&(n=i.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),Al(e,n)}function Tl(e,t){return Ve(e,t)}function Ll(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ol(e,t,n,r){return new Ll(e,t,n,r)}function Ml(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Nl(e,t){var n=e.alternate;return null===n?((n=Ol(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function zl(e,t,n,r,i,a){var s=2;if(r=e,"function"==typeof e)Ml(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case k:return Fl(n.children,i,a,t);case E:s=8,i|=8;break;case S:return(e=Ol(12,n,t,2|i)).elementType=S,e.lanes=a,e;case P:return(e=Ol(13,n,t,i)).elementType=P,e.lanes=a,e;case T:return(e=Ol(19,n,t,i)).elementType=T,e.lanes=a,e;case M:return Dl(n,i,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:s=10;break e;case A:s=9;break e;case R:s=11;break e;case L:s=14;break e;case O:s=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Ol(s,n,t,i)).elementType=e,t.type=r,t.lanes=a,t}function Fl(e,t,n,r){return(e=Ol(7,e,r,t)).lanes=n,e}function Dl(e,t,n,r){return(e=Ol(22,e,r,t)).elementType=M,e.lanes=n,e.stateNode={isHidden:!1},e}function $l(e,t,n){return(e=Ol(6,e,null,t)).lanes=n,e}function jl(e,t,n){return(t=Ol(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Il(e,t,n,r,i){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mt(0),this.expirationTimes=mt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mt(0),this.identifierPrefix=r,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function Gl(e,t,n,r,i,o,a,s,u){return e=new Il(e,t,n,s,u),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Ol(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Oo(o),e}function Bl(e){if(!e)return Ai;e:{if(Be(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Oi(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Oi(n))return zi(e,n,t)}return t}function Ul(e,t,n,r,i,o,a,s,u){return(e=Gl(n,r,!0,e,0,o,0,s,u)).context=Bl(null),n=e.current,(o=No(r=tl(),i=nl(n))).callback=null!=t?t:null,zo(n,o,i),e.current.lanes=i,yt(e,i,r),il(e,r),e}function Zl(e,t,n,r){var i=t.current,o=tl(),a=nl(i);return n=Bl(n),null===t.context?t.context=n:t.pendingContext=n,(t=No(o,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=zo(i,t,a))&&(rl(e,i,a,o),Fo(e,i,a)),a}function Wl(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Hl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Vl(e,t){Hl(e,t),(e=e.alternate)&&Hl(e,t)}Eu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Pi.current)ws=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return ws=!1,function(e,t,n){switch(t.tag){case 3:Ts(t),po();break;case 5:aa(t);break;case 1:Oi(t.type)&&Fi(t);break;case 4:ia(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,i=t.memoizedProps.value;Ci(vo,r._currentValue),r._currentValue=i;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Ci(ua,1&ua.current),t.flags|=128,null):0!=(n&t.child.childLanes)?$s(e,t,n):(Ci(ua,1&ua.current),null!==(e=Ws(e,t,n))?e.sibling:null);Ci(ua,1&ua.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Us(e,t,n);t.flags|=128}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),Ci(ua,ua.current),r)break;return null;case 22:case 23:return t.lanes=0,Ss(e,t,n)}return Ws(e,t,n)}(e,t,n);ws=0!=(131072&e.flags)}else ws=!1,io&&0!=(1048576&t.flags)&&Ji(t,Hi,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Zs(e,t),e=t.pendingProps;var i=Li(t,Ri.current);So(t,n),i=Ea(null,t,r,e,i,n);var a=Sa();return t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Oi(r)?(a=!0,Fi(t)):a=!1,t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,Oo(t),i.updater=Bo,t.stateNode=i,i._reactInternals=t,Ho(t,r,e,n),t=Ps(null,t,r,!0,a,n)):(t.tag=0,io&&a&&eo(t),_s(null,t,i,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Zs(e,t),e=t.pendingProps,r=(i=r._init)(r._payload),t.type=r,i=t.tag=function(e){if("function"==typeof e)return Ml(e)?1:0;if(null!=e){if((e=e.$$typeof)===R)return 11;if(e===L)return 14}return 2}(r),e=yo(r,e),i){case 0:t=As(null,t,r,e,n);break e;case 1:t=Rs(null,t,r,e,n);break e;case 11:t=xs(null,t,r,e,n);break e;case 14:t=ks(null,t,r,yo(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,i=t.pendingProps,As(e,t,r,i=t.elementType===r?i:yo(r,i),n);case 1:return r=t.type,i=t.pendingProps,Rs(e,t,r,i=t.elementType===r?i:yo(r,i),n);case 3:e:{if(Ts(t),null===e)throw Error(o(387));r=t.pendingProps,i=(a=t.memoizedState).element,Mo(e,t),$o(t,r,null,n);var s=t.memoizedState;if(r=s.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Ls(e,t,r,n,i=cs(Error(o(423)),t));break e}if(r!==i){t=Ls(e,t,r,n,i=cs(Error(o(424)),t));break e}for(ro=li(t.stateNode.containerInfo.firstChild),no=t,io=!0,oo=null,n=Xo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(po(),r===i){t=Ws(e,t,n);break e}_s(e,t,r,n)}t=t.child}return t;case 5:return aa(t),null===e&&lo(t),r=t.type,i=t.pendingProps,a=null!==e?e.memoizedProps:null,s=i.children,ni(r,i)?s=null:null!==a&&ni(r,a)&&(t.flags|=32),Cs(e,t),_s(e,t,s,n),t.child;case 6:return null===e&&lo(t),null;case 13:return $s(e,t,n);case 4:return ia(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Qo(t,null,r,n):_s(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,xs(e,t,r,i=t.elementType===r?i:yo(r,i),n);case 7:return _s(e,t,t.pendingProps,n),t.child;case 8:case 12:return _s(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,a=t.memoizedProps,s=i.value,Ci(vo,r._currentValue),r._currentValue=s,null!==a)if(sr(a.value,s)){if(a.children===i.children&&!Pi.current){t=Ws(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var u=a.dependencies;if(null!==u){s=a.child;for(var l=u.firstContext;null!==l;){if(l.context===r){if(1===a.tag){(l=No(-1,n&-n)).tag=2;var c=a.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?l.next=l:(l.next=d.next,d.next=l),c.pending=l}}a.lanes|=n,null!==(l=a.alternate)&&(l.lanes|=n),Eo(a.return,n,t),u.lanes|=n;break}l=l.next}}else if(10===a.tag)s=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(s=a.return))throw Error(o(341));s.lanes|=n,null!==(u=s.alternate)&&(u.lanes|=n),Eo(s,n,t),s=a.sibling}else s=a.child;if(null!==s)s.return=a;else for(s=a;null!==s;){if(s===t){s=null;break}if(null!==(a=s.sibling)){a.return=s.return,s=a;break}s=s.return}a=s}_s(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=t.pendingProps.children,So(t,n),r=r(i=Co(i)),t.flags|=1,_s(e,t,r,n),t.child;case 14:return i=yo(r=t.type,t.pendingProps),ks(e,t,r,i=yo(r.type,i),n);case 15:return Es(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:yo(r,i),Zs(e,t),t.tag=1,Oi(r)?(e=!0,Fi(t)):e=!1,So(t,n),Zo(t,r,i),Ho(t,r,i,n),Ps(null,t,r,!0,e,n);case 19:return Us(e,t,n);case 22:return Ss(e,t,n)}throw Error(o(156,t.tag))};var ql="function"==typeof reportError?reportError:function(e){console.error(e)};function Kl(e){this._internalRoot=e}function Yl(e){this._internalRoot=e}function Ql(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Jl(){}function ec(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o;if("function"==typeof i){var s=i;i=function(){var e=Wl(a);s.call(e)}}Zl(t,a,e,i)}else a=function(e,t,n,r,i){if(i){if("function"==typeof r){var o=r;r=function(){var e=Wl(a);o.call(e)}}var a=Ul(t,r,e,0,null,!1,0,"",Jl);return e._reactRootContainer=a,e[pi]=a.current,Br(8===e.nodeType?e.parentNode:e),dl(),a}for(;i=e.lastChild;)e.removeChild(i);if("function"==typeof r){var s=r;r=function(){var e=Wl(u);s.call(e)}}var u=Gl(e,0,!1,null,0,!1,0,"",Jl);return e._reactRootContainer=u,e[pi]=u.current,Br(8===e.nodeType?e.parentNode:e),dl((function(){Zl(t,u,n,r)})),u}(n,t,e,i,r);return Wl(a)}Yl.prototype.render=Kl.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Zl(e,t,null,null)},Yl.prototype.unmount=Kl.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;dl((function(){Zl(null,e,null,null)})),t[pi]=null}},Yl.prototype.unstable_scheduleHydration=function(e){if(e){var t=Et();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Mt.length&&0!==t&&t<Mt[n].priority;n++);Mt.splice(n,0,e),0===n&&Dt(e)}},_t=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(vt(t,1|n),il(t,Qe()),0==(6&Pu)&&(Uu=Qe()+500,Bi()))}break;case 13:dl((function(){var t=To(e,1);if(null!==t){var n=tl();rl(t,e,1,n)}})),Vl(e,1)}},xt=function(e){if(13===e.tag){var t=To(e,134217728);null!==t&&rl(t,e,134217728,tl()),Vl(e,134217728)}},kt=function(e){if(13===e.tag){var t=nl(e),n=To(e,t);null!==n&&rl(n,e,t,tl()),Vl(e,t)}},Et=function(){return bt},St=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},xe=function(e,t,n){switch(t){case"input":if(X(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=_i(r);if(!i)throw Error(o(90));V(r),X(r,i)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Re=cl,Pe=dl;var tc={usingClientEntryPoint:!1,Events:[bi,wi,_i,Ce,Ae,cl]},nc={findFiberByHostInstance:vi,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=We(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ic=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ic.isDisabled&&ic.supportsFiber)try{it=ic.inject(rc),ot=ic}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ql(t))throw Error(o(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Ql(e))throw Error(o(299));var n=!1,r="",i=ql;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(i=t.onRecoverableError)),t=Gl(e,1,!1,null,0,n,0,r,i),e[pi]=t.current,Br(8===e.nodeType?e.parentNode:e),new Kl(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=We(t))?null:e.stateNode},t.flushSync=function(e){return dl(e)},t.hydrate=function(e,t,n){if(!Xl(t))throw Error(o(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Ql(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,i=!1,a="",s=ql;if(null!=n&&(!0===n.unstable_strictMode&&(i=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(s=n.onRecoverableError)),t=Ul(t,null,e,1,null!=n?n:null,i,0,a,s),e[pi]=t.current,Br(e),r)for(e=0;e<r.length;e++)i=(i=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,i]:t.mutableSourceEagerHydrationData.push(n,i);return new Yl(t)},t.render=function(e,t,n){if(!Xl(t))throw Error(o(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xl(e))throw Error(o(40));return!!e._reactRootContainer&&(dl((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[pi]=null}))})),!0)},t.unstable_batchedUpdates=cl,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xl(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(3935);t.s=r.createRoot,r.hydrateRoot},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},5251:(e,t,n)=>{"use strict";var r=n(7294),i=Symbol.for("react.element"),o=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,s=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,u={key:!0,ref:!0,__self:!0,__source:!0};function l(e,t,n){var r,o={},l=null,c=null;for(r in void 0!==n&&(l=""+n),void 0!==t.key&&(l=""+t.key),void 0!==t.ref&&(c=t.ref),t)a.call(t,r)&&!u.hasOwnProperty(r)&&(o[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===o[r]&&(o[r]=t[r]);return{$$typeof:i,type:e,key:l,ref:c,props:o,_owner:s.current}}t.Fragment=o,t.jsx=l,t.jsxs=l},2408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),u=Symbol.for("react.context"),l=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),h=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,m={};function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||p}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||p}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var w=b.prototype=new v;w.constructor=b,g(w,y.prototype),w.isPureReactComponent=!0;var _=Array.isArray,x=Object.prototype.hasOwnProperty,k={current:null},E={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,r){var i,o={},a=null,s=null;if(null!=t)for(i in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)x.call(t,i)&&!E.hasOwnProperty(i)&&(o[i]=t[i]);var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){for(var l=Array(u),c=0;c<u;c++)l[c]=arguments[c+2];o.children=l}if(e&&e.defaultProps)for(i in u=e.defaultProps)void 0===o[i]&&(o[i]=u[i]);return{$$typeof:n,type:e,key:a,ref:s,props:o,_owner:k.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var A=/\/+/g;function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,i,o,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var u=!1;if(null===e)u=!0;else switch(s){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return a=a(u=e),e=""===o?"."+R(u,0):o,_(a)?(i="",null!=e&&(i=e.replace(A,"$&/")+"/"),P(a,t,i,"",(function(e){return e}))):null!=a&&(C(a)&&(a=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,i+(!a.key||u&&u.key===a.key?"":(""+a.key).replace(A,"$&/")+"/")+e)),t.push(a)),1;if(u=0,o=""===o?".":o+":",_(e))for(var l=0;l<e.length;l++){var c=o+R(s=e[l],l);u+=P(s,t,i,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=h&&e[h]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),l=0;!(s=e.next()).done;)u+=P(s=s.value,t,i,c=o+R(s,l++),a);else if("object"===s)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function T(e,t,n){if(null==e)return e;var r=[],i=0;return P(e,r,"","",(function(e){return t.call(n,e,i++)})),r}function L(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var O={current:null},M={transition:null},N={ReactCurrentDispatcher:O,ReactCurrentBatchConfig:M,ReactCurrentOwner:k};t.Children={map:T,forEach:function(e,t,n){T(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=i,t.Profiler=a,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var i=g({},e.props),o=e.key,a=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,s=k.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(l in t)x.call(t,l)&&!E.hasOwnProperty(l)&&(i[l]=void 0===t[l]&&void 0!==u?u[l]:t[l])}var l=arguments.length-2;if(1===l)i.children=r;else if(1<l){u=Array(l);for(var c=0;c<l;c++)u[c]=arguments[c+2];i.children=u}return{$$typeof:n,type:e.type,key:o,ref:a,props:i,_owner:s}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:L}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=M.transition;M.transition={};try{e()}finally{M.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return O.current.useCallback(e,t)},t.useContext=function(e){return O.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return O.current.useDeferredValue(e)},t.useEffect=function(e,t){return O.current.useEffect(e,t)},t.useId=function(){return O.current.useId()},t.useImperativeHandle=function(e,t,n){return O.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return O.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return O.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return O.current.useMemo(e,t)},t.useReducer=function(e,t,n){return O.current.useReducer(e,t,n)},t.useRef=function(e){return O.current.useRef(e)},t.useState=function(e){return O.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return O.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return O.current.useTransition()},t.version="18.2.0"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},5893:(e,t,n)=>{"use strict";e.exports=n(5251)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,i=e[r];if(!(0<o(i,t)))break e;e[r]=t,e[n]=i,n=r}}function r(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length,a=i>>>1;r<a;){var s=2*(r+1)-1,u=e[s],l=s+1,c=e[l];if(0>o(u,n))l<i&&0>o(c,u)?(e[r]=c,e[l]=n,r=l):(e[r]=u,e[s]=n,r=s);else{if(!(l<i&&0>o(c,n)))break e;e[r]=c,e[l]=n,r=l}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,u=s.now();t.unstable_now=function(){return s.now()-u}}var l=[],c=[],d=1,f=null,h=3,p=!1,g=!1,m=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)i(c);else{if(!(t.startTime<=e))break;i(c),t.sortIndex=t.expirationTime,n(l,t)}t=r(c)}}function _(e){if(m=!1,w(e),!g)if(null!==r(l))g=!0,M(x);else{var t=r(c);null!==t&&N(_,t.startTime-e)}}function x(e,n){g=!1,m&&(m=!1,v(C),C=-1),p=!0;var o=h;try{for(w(n),f=r(l);null!==f&&(!(f.expirationTime>n)||e&&!P());){var a=f.callback;if("function"==typeof a){f.callback=null,h=f.priorityLevel;var s=a(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?f.callback=s:f===r(l)&&i(l),w(n)}else i(l);f=r(l)}if(null!==f)var u=!0;else{var d=r(c);null!==d&&N(_,d.startTime-n),u=!1}return u}finally{f=null,h=o,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,E=!1,S=null,C=-1,A=5,R=-1;function P(){return!(t.unstable_now()-R<A)}function T(){if(null!==S){var e=t.unstable_now();R=e;var n=!0;try{n=S(!0,e)}finally{n?k():(E=!1,S=null)}}else E=!1}if("function"==typeof b)k=function(){b(T)};else if("undefined"!=typeof MessageChannel){var L=new MessageChannel,O=L.port2;L.port1.onmessage=T,k=function(){O.postMessage(null)}}else k=function(){y(T,0)};function M(e){S=e,E||(E=!0,k())}function N(e,n){C=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){g||p||(g=!0,M(x))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):A=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return h},t.unstable_getFirstCallbackNode=function(){return r(l)},t.unstable_next=function(e){switch(h){case 1:case 2:case 3:var t=3;break;default:t=h}var n=h;h=t;try{return e()}finally{h=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=h;h=e;try{return t()}finally{h=n}},t.unstable_scheduleCallback=function(e,i,o){var a=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?a+o:a,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:d++,callback:i,priorityLevel:e,startTime:o,expirationTime:s=o+s,sortIndex:-1},o>a?(e.sortIndex=o,n(c,e),null===r(l)&&e===r(c)&&(m?(v(C),C=-1):m=!0,N(_,o-a))):(e.sortIndex=s,n(l,e),g||p||(g=!0,M(x))),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=h;return function(){var n=h;h=t;try{return e.apply(this,arguments)}finally{h=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},7554:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(5227),s=o(n(8941)),u=n(4524),l=n(3291),c=1.5,d=function(e){function t(){var t=e.call(this)||this;return t.x=.5,t.y=.5,t.angle=0,t.ratio=1,t.minRatio=null,t.maxRatio=null,t.nextFrame=null,t.previousState=null,t.enabled=!0,t.previousState=t.getState(),t}return i(t,e),t.from=function(e){return(new t).setState(e)},t.prototype.enable=function(){return this.enabled=!0,this},t.prototype.disable=function(){return this.enabled=!1,this},t.prototype.getState=function(){return{x:this.x,y:this.y,angle:this.angle,ratio:this.ratio}},t.prototype.hasState=function(e){return this.x===e.x&&this.y===e.y&&this.ratio===e.ratio&&this.angle===e.angle},t.prototype.getPreviousState=function(){var e=this.previousState;return e?{x:e.x,y:e.y,angle:e.angle,ratio:e.ratio}:null},t.prototype.getBoundedRatio=function(e){var t=e;return"number"==typeof this.minRatio&&(t=Math.max(t,this.minRatio)),"number"==typeof this.maxRatio&&(t=Math.min(t,this.maxRatio)),t},t.prototype.validateState=function(e){var t={};return"number"==typeof e.x&&(t.x=e.x),"number"==typeof e.y&&(t.y=e.y),"number"==typeof e.angle&&(t.angle=e.angle),"number"==typeof e.ratio&&(t.ratio=this.getBoundedRatio(e.ratio)),t},t.prototype.isAnimated=function(){return!!this.nextFrame},t.prototype.setState=function(e){if(!this.enabled)return this;this.previousState=this.getState();var t=this.validateState(e);return"number"==typeof t.x&&(this.x=t.x),"number"==typeof t.y&&(this.y=t.y),"number"==typeof t.angle&&(this.angle=t.angle),"number"==typeof t.ratio&&(this.ratio=t.ratio),this.hasState(this.previousState)||this.emit("updated",this.getState()),this},t.prototype.updateState=function(e){return this.setState(e(this.getState())),this},t.prototype.animate=function(e,t,n){var r=this;if(this.enabled){var i=Object.assign({},a.ANIMATE_DEFAULTS,t),o=this.validateState(e),l="function"==typeof i.easing?i.easing:s.default[i.easing],c=Date.now(),d=this.getState(),f=function(){var e=(Date.now()-c)/i.duration;if(e>=1)return r.nextFrame=null,r.setState(o),void(r.animationCallback&&(r.animationCallback.call(null),r.animationCallback=void 0));var t=l(e),n={};"number"==typeof o.x&&(n.x=d.x+(o.x-d.x)*t),"number"==typeof o.y&&(n.y=d.y+(o.y-d.y)*t),"number"==typeof o.angle&&(n.angle=d.angle+(o.angle-d.angle)*t),"number"==typeof o.ratio&&(n.ratio=d.ratio+(o.ratio-d.ratio)*t),r.setState(n),r.nextFrame=(0,u.requestFrame)(f)};this.nextFrame?((0,u.cancelFrame)(this.nextFrame),this.animationCallback&&this.animationCallback.call(null),this.nextFrame=(0,u.requestFrame)(f)):f(),this.animationCallback=n}},t.prototype.animatedZoom=function(e){if(e){if("number"==typeof e)return this.animate({ratio:this.ratio/e});this.animate({ratio:this.ratio/(e.factor||c)},e)}else this.animate({ratio:this.ratio/c})},t.prototype.animatedUnzoom=function(e){if(e){if("number"==typeof e)return this.animate({ratio:this.ratio*e});this.animate({ratio:this.ratio*(e.factor||c)},e)}else this.animate({ratio:this.ratio*c})},t.prototype.animatedReset=function(e){this.animate({x:.5,y:.5,ratio:1,angle:0},e)},t.prototype.copy=function(){return t.from(this.getState())},t}(l.TypedEventEmitter);t.default=d},3760:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.getWheelDelta=t.getTouchCoords=t.getTouchesArray=t.getWheelCoords=t.getMouseCoords=t.getPosition=void 0;var a=n(3291);function s(e,t){var n=t.getBoundingClientRect();return{x:e.clientX-n.left,y:e.clientY-n.top}}function u(e,t){var n=o(o({},s(e,t)),{sigmaDefaultPrevented:!1,preventSigmaDefault:function(){n.sigmaDefaultPrevented=!0},original:e});return n}t.getPosition=s,t.getMouseCoords=u,t.getWheelCoords=function(e,t){return o(o({},u(e,t)),{delta:c(e)})};function l(e){for(var t=[],n=0,r=Math.min(e.length,2);n<r;n++)t.push(e[n]);return t}function c(e){if(void 0!==e.deltaY)return-3*e.deltaY/360;if(void 0!==e.detail)return e.detail/-9;throw new Error("Captor: could not extract delta from event.")}t.getTouchesArray=l,t.getTouchCoords=function(e,t){return{touches:l(e.touches).map((function(e){return s(e,t)})),original:e}},t.getWheelDelta=c;var d=function(e){function t(t,n){var r=e.call(this)||this;return r.container=t,r.renderer=n,r}return i(t,e),t}(a.TypedEventEmitter);t.default=d},9886:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});var u=s(n(3760)),l=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.enabled=!0,r.draggedEvents=0,r.downStartTime=null,r.lastMouseX=null,r.lastMouseY=null,r.isMouseDown=!1,r.isMoving=!1,r.movingTimeout=null,r.startCameraState=null,r.clicks=0,r.doubleClickTimeout=null,r.currentWheelDirection=0,r.handleClick=r.handleClick.bind(r),r.handleRightClick=r.handleRightClick.bind(r),r.handleDown=r.handleDown.bind(r),r.handleUp=r.handleUp.bind(r),r.handleMove=r.handleMove.bind(r),r.handleWheel=r.handleWheel.bind(r),r.handleOut=r.handleOut.bind(r),t.addEventListener("click",r.handleClick,!1),t.addEventListener("contextmenu",r.handleRightClick,!1),t.addEventListener("mousedown",r.handleDown,!1),t.addEventListener("wheel",r.handleWheel,!1),t.addEventListener("mouseout",r.handleOut,!1),document.addEventListener("mousemove",r.handleMove,!1),document.addEventListener("mouseup",r.handleUp,!1),r}return i(t,e),t.prototype.kill=function(){var e=this.container;e.removeEventListener("click",this.handleClick),e.removeEventListener("contextmenu",this.handleRightClick),e.removeEventListener("mousedown",this.handleDown),e.removeEventListener("wheel",this.handleWheel),e.removeEventListener("mouseout",this.handleOut),document.removeEventListener("mousemove",this.handleMove),document.removeEventListener("mouseup",this.handleUp)},t.prototype.handleClick=function(e){var t=this;if(this.enabled){if(this.clicks++,2===this.clicks)return this.clicks=0,"number"==typeof this.doubleClickTimeout&&(clearTimeout(this.doubleClickTimeout),this.doubleClickTimeout=null),this.handleDoubleClick(e);setTimeout((function(){t.clicks=0,t.doubleClickTimeout=null}),300),this.draggedEvents<3&&this.emit("click",(0,u.getMouseCoords)(e,this.container))}},t.prototype.handleRightClick=function(e){this.enabled&&this.emit("rightClick",(0,u.getMouseCoords)(e,this.container))},t.prototype.handleDoubleClick=function(e){if(this.enabled){e.preventDefault(),e.stopPropagation();var t=(0,u.getMouseCoords)(e,this.container);if(this.emit("doubleClick",t),!t.sigmaDefaultPrevented){var n=this.renderer.getCamera(),r=n.getBoundedRatio(n.getState().ratio/2.2);n.animate(this.renderer.getViewportZoomedState((0,u.getPosition)(e,this.container),r),{easing:"quadraticInOut",duration:200})}}},t.prototype.handleDown=function(e){if(this.enabled){if(0===e.button){this.startCameraState=this.renderer.getCamera().getState();var t=(0,u.getPosition)(e,this.container),n=t.x,r=t.y;this.lastMouseX=n,this.lastMouseY=r,this.draggedEvents=0,this.downStartTime=Date.now(),this.isMouseDown=!0}this.emit("mousedown",(0,u.getMouseCoords)(e,this.container))}},t.prototype.handleUp=function(e){var t=this;if(this.enabled&&this.isMouseDown){var n=this.renderer.getCamera();this.isMouseDown=!1,"number"==typeof this.movingTimeout&&(clearTimeout(this.movingTimeout),this.movingTimeout=null);var r=(0,u.getPosition)(e,this.container),i=r.x,o=r.y,a=n.getState(),s=n.getPreviousState()||{x:0,y:0};this.isMoving?n.animate({x:a.x+3*(a.x-s.x),y:a.y+3*(a.y-s.y)},{duration:200,easing:"quadraticOut"}):this.lastMouseX===i&&this.lastMouseY===o||n.setState({x:a.x,y:a.y}),this.isMoving=!1,setTimeout((function(){t.draggedEvents=0,t.renderer.refresh()}),0),this.emit("mouseup",(0,u.getMouseCoords)(e,this.container))}},t.prototype.handleMove=function(e){var t=this;if(this.enabled){var n=(0,u.getMouseCoords)(e,this.container);if(this.emit("mousemovebody",n),e.target===this.container&&this.emit("mousemove",n),!n.sigmaDefaultPrevented&&this.isMouseDown){this.isMoving=!0,this.draggedEvents++,"number"==typeof this.movingTimeout&&clearTimeout(this.movingTimeout),this.movingTimeout=window.setTimeout((function(){t.movingTimeout=null,t.isMoving=!1}),100);var r=this.renderer.getCamera(),i=(0,u.getPosition)(e,this.container),o=i.x,a=i.y,s=this.renderer.viewportToFramedGraph({x:this.lastMouseX,y:this.lastMouseY}),l=this.renderer.viewportToFramedGraph({x:o,y:a}),c=s.x-l.x,d=s.y-l.y,f=r.getState(),h=f.x+c,p=f.y+d;r.setState({x:h,y:p}),this.lastMouseX=o,this.lastMouseY=a,e.preventDefault(),e.stopPropagation()}}},t.prototype.handleWheel=function(e){var t=this;if(this.enabled){e.preventDefault(),e.stopPropagation();var n=(0,u.getWheelDelta)(e);if(n){var r=(0,u.getWheelCoords)(e,this.container);if(this.emit("wheel",r),!r.sigmaDefaultPrevented){var i=n>0?1/1.7:1.7,o=this.renderer.getCamera(),a=o.getBoundedRatio(o.getState().ratio*i),s=n>0?1:-1,l=Date.now();this.currentWheelDirection===s&&this.lastWheelTriggerTime&&l-this.lastWheelTriggerTime<50||(o.animate(this.renderer.getViewportZoomedState((0,u.getPosition)(e,this.container),a),{easing:"quadraticOut",duration:250},(function(){t.currentWheelDirection=0})),this.currentWheelDirection=s,this.lastWheelTriggerTime=l)}}}},t.prototype.handleOut=function(){},t}(u.default);t.default=l},9311:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return a(t,e),t},u=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a};Object.defineProperty(t,"__esModule",{value:!0});var l=s(n(3760)),c=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.enabled=!0,r.isMoving=!1,r.hasMoved=!1,r.touchMode=0,r.startTouchesPositions=[],r.handleStart=r.handleStart.bind(r),r.handleLeave=r.handleLeave.bind(r),r.handleMove=r.handleMove.bind(r),t.addEventListener("touchstart",r.handleStart,!1),t.addEventListener("touchend",r.handleLeave,!1),t.addEventListener("touchcancel",r.handleLeave,!1),t.addEventListener("touchmove",r.handleMove,!1),r}return i(t,e),t.prototype.kill=function(){var e=this.container;e.removeEventListener("touchstart",this.handleStart),e.removeEventListener("touchend",this.handleLeave),e.removeEventListener("touchcancel",this.handleLeave),e.removeEventListener("touchmove",this.handleMove)},t.prototype.getDimensions=function(){return{width:this.container.offsetWidth,height:this.container.offsetHeight}},t.prototype.dispatchRelatedMouseEvent=function(e,t,n,r){var i=n||t.touches[0],o=new MouseEvent(e,{clientX:i.clientX,clientY:i.clientY,altKey:t.altKey,ctrlKey:t.ctrlKey});o.isFakeSigmaMouseEvent=!0,(r||this.container).dispatchEvent(o)},t.prototype.handleStart=function(e){var t=this;if(this.enabled){e.preventDefault(),1===e.touches.length&&this.dispatchRelatedMouseEvent("mousedown",e);var n=(0,l.getTouchesArray)(e.touches);if(this.touchMode=n.length,this.startCameraState=this.renderer.getCamera().getState(),this.startTouchesPositions=n.map((function(e){return(0,l.getPosition)(e,t.container)})),this.lastTouches=n,this.lastTouchesPositions=this.startTouchesPositions,2===this.touchMode){var r=u(this.startTouchesPositions,2),i=r[0],o=i.x,a=i.y,s=r[1],c=s.x,d=s.y;this.startTouchesAngle=Math.atan2(d-a,c-o),this.startTouchesDistance=Math.sqrt(Math.pow(c-o,2)+Math.pow(d-a,2))}this.emit("touchdown",(0,l.getTouchCoords)(e,this.container))}},t.prototype.handleLeave=function(e){if(this.enabled){switch(e.preventDefault(),0===e.touches.length&&this.lastTouches&&this.lastTouches.length&&(this.dispatchRelatedMouseEvent("mouseup",e,this.lastTouches[0],document),this.hasMoved||this.dispatchRelatedMouseEvent("click",e,this.lastTouches[0])),this.movingTimeout&&(this.isMoving=!1,clearTimeout(this.movingTimeout)),this.touchMode){case 2:if(1===e.touches.length){this.handleStart(e),e.preventDefault();break}case 1:if(this.isMoving){var t=this.renderer.getCamera(),n=t.getState(),r=t.getPreviousState()||{x:0,y:0};t.animate({x:n.x+3*(n.x-r.x),y:n.y+3*(n.y-r.y)},{duration:200,easing:"quadraticOut"})}this.hasMoved=!1,this.isMoving=!1,this.touchMode=0}this.emit("touchup",(0,l.getTouchCoords)(e,this.container))}},t.prototype.handleMove=function(e){var t,n=this;if(this.enabled){e.preventDefault(),1===e.touches.length&&this.dispatchRelatedMouseEvent("mousemove",e);var r=(0,l.getTouchesArray)(e.touches),i=r.map((function(e){return(0,l.getPosition)(e,n.container)}));if(this.lastTouches=r,this.lastTouchesPositions=i,this.hasMoved||(this.hasMoved=i.some((function(e,t){var r=n.startTouchesPositions[t];return e.x!==r.x||e.y!==r.y}))),this.hasMoved){this.isMoving=!0,this.movingTimeout&&clearTimeout(this.movingTimeout),this.movingTimeout=window.setTimeout((function(){n.isMoving=!1}),200);var o=this.renderer.getCamera(),a=this.startCameraState;switch(this.touchMode){case 1:var s=this.renderer.viewportToFramedGraph((this.startTouchesPositions||[])[0]),c=s.x,d=s.y,f=this.renderer.viewportToFramedGraph(i[0]),h=f.x,p=f.y;o.setState({x:a.x+c-h,y:a.y+d-p});break;case 2:var g={},m=i[0],y=m.x,v=m.y,b=i[1],w=b.x,_=b.y,x=Math.atan2(_-v,w-y)-this.startTouchesAngle,k=Math.hypot(_-v,w-y)/this.startTouchesDistance,E=o.getBoundedRatio(a.ratio/k);g.ratio=E,g.angle=a.angle+x;var S=this.getDimensions(),C=this.renderer.viewportToFramedGraph((this.startTouchesPositions||[])[0],{cameraState:a}),A=Math.min(S.width,S.height),R=A/S.width,P=E/A;p=v-A/2/(A/S.height),h=(t=u([(h=y-A/2/R)*Math.cos(-g.angle)-p*Math.sin(-g.angle),p*Math.cos(-g.angle)+h*Math.sin(-g.angle)],2))[0],p=t[1],g.x=C.x-h*P,g.y=C.y+p*P,o.setState(g)}this.emit("touchmove",(0,l.getTouchCoords)(e,this.container))}}},t}(l.default);t.default=c},8098:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.edgeLabelsToDisplayFromNodes=t.LabelGrid=void 0;var n=function(){function e(e,t){this.key=e,this.size=t}return e.compare=function(e,t){return e.size>t.size?-1:e.size<t.size||e.key>t.key?1:-1},e}(),r=function(){function e(){this.width=0,this.height=0,this.cellSize=0,this.columns=0,this.rows=0,this.cells={}}return e.prototype.resizeAndClear=function(e,t){this.width=e.width,this.height=e.height,this.cellSize=t,this.columns=Math.ceil(e.width/t),this.rows=Math.ceil(e.height/t),this.cells={}},e.prototype.getIndex=function(e){var t=Math.floor(e.x/this.cellSize);return Math.floor(e.y/this.cellSize)*this.columns+t},e.prototype.add=function(e,t,r){var i=new n(e,t),o=this.getIndex(r),a=this.cells[o];a||(a=[],this.cells[o]=a),a.push(i)},e.prototype.organize=function(){for(var e in this.cells)this.cells[e].sort(n.compare)},e.prototype.getLabelsToDisplay=function(e,t){var n=this.cellSize*this.cellSize,r=n/e/e*t/n,i=Math.ceil(r),o=[];for(var a in this.cells)for(var s=this.cells[a],u=0;u<Math.min(i,s.length);u++)o.push(s[u].key);return o},e}();t.LabelGrid=r,t.edgeLabelsToDisplayFromNodes=function(e){var t=e.graph,n=e.hoveredNode,r=e.highlightedNodes,i=e.displayedNodeLabels,o=[];return t.forEachEdge((function(e,t,a,s){(a===n||s===n||r.has(a)||r.has(s)||i.has(a)&&i.has(s))&&o.push(e)})),o}},1461:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.rectangleCollidesWithQuad=t.squareCollidesWithQuad=t.getCircumscribedAlignedRectangle=t.isRectangleAligned=void 0;var i=r(n(3796)),o=!1;function a(e){return e.x1===e.x2||e.y1===e.y2}function s(e){var t=Math.sqrt(Math.pow(e.x2-e.x1,2)+Math.pow(e.y2-e.y1,2)),n=(e.y1-e.y2)*e.height/t,r=(e.x2-e.x1)*e.height/t,i={x:e.x1,y:e.y1},o={x:e.x2,y:e.y2},a={x:e.x1+n,y:e.y1+r},s={x:e.x2+n,y:e.y2+r},u=Math.min(i.x,o.x,a.x,s.x),l=Math.max(i.x,o.x,a.x,s.x),c=Math.min(i.y,o.y,a.y,s.y);return{x1:u,y1:c,x2:l,y2:c,height:Math.max(i.y,o.y,a.y,s.y)-c}}function u(e,t,n,r,i,o,a){return e<r+o&&e+n>r&&t<i+a&&t+n>i}function l(e,t,n,r,i,o,a,s){return e<i+a&&e+n>i&&t<o+s&&t+r>o}function c(e,t,n,r,i,o){var a=e<n+i/2;return t<r+o/2?a?1:2:a?3:4}t.isRectangleAligned=a,t.getCircumscribedAlignedRectangle=s,t.squareCollidesWithQuad=u,t.rectangleCollidesWithQuad=l;var d=function(){function e(e){var t;void 0===e&&(e={}),this.containers=((t={})[5460]=[],t),this.cache=null,this.lastRectangle=null;var n=Math.pow(4,5);this.data=new Float32Array((4*n-1)/3*4),e.boundaries?this.resize(e.boundaries):this.resize({x:0,y:0,width:1,height:1})}return e.prototype.add=function(e,t,n,r){return function(e,t,n,r,i,a,s){for(var l=i-s,c=a-s,d=2*s,f=0,h=0;;){if(f>=5)return n[h]=n[h]||[],void n[h].push(r);var p=4*h+4,g=4*h+8,m=4*h+12,y=4*h+16,v=u(l,c,d,t[p+0],t[p+1],t[p+2],t[p+3]),b=u(l,c,d,t[g+0],t[g+1],t[g+2],t[g+3]),w=u(l,c,d,t[m+0],t[m+1],t[m+2],t[m+3]),_=u(l,c,d,t[y+0],t[y+1],t[y+2],t[y+3]),x=[v,b,w,_].reduce((function(e,t){return t?e+1:e}),0);if(0===x&&0===f)return n[5460].push(r),void(!o&&n[5460].length>=5&&(o=!0,console.warn("sigma/quadtree.insertNode: At least 5 nodes are outside the global quadtree zone. You might have a problem with the normalization function or the custom bounding box.")));if(0===x)throw new Error("sigma/quadtree.insertNode: no collision (level: ".concat(f,", key: ").concat(r,", x: ").concat(i,", y: ").concat(a,", size: ").concat(s,")."));if(3===x)throw new Error("sigma/quadtree.insertNode: 3 impossible collisions (level: ".concat(f,", key: ").concat(r,", x: ").concat(i,", y: ").concat(a,", size: ").concat(s,")."));if(x>1)return n[h]=n[h]||[],void n[h].push(r);f++,v&&(h=p),b&&(h=g),w&&(h=m),_&&(h=y)}}(0,this.data,this.containers,e,t,n,r),this},e.prototype.resize=function(e){this.clear(),this.data[0]=e.x,this.data[1]=e.y,this.data[2]=e.width,this.data[3]=e.height,function(e,t){for(var n=[0,0];n.length;){var r=n.pop(),i=n.pop(),o=4*i+4,a=4*i+8,s=4*i+12,u=4*i+16,l=t[i+0],c=t[i+1],d=t[i+2]/2,f=t[i+3]/2;t[o+0]=l,t[o+1]=c,t[o+2]=d,t[o+3]=f,t[a+0]=l+d,t[a+1]=c,t[a+2]=d,t[a+3]=f,t[s+0]=l,t[s+1]=c+f,t[s+2]=d,t[s+3]=f,t[u+0]=l+d,t[u+1]=c+f,t[u+2]=d,t[u+3]=f,r<4&&(n.push(u,r+1),n.push(s,r+1),n.push(a,r+1),n.push(o,r+1))}}(0,this.data)},e.prototype.clear=function(){var e;return this.containers=((e={})[5460]=[],e),this},e.prototype.point=function(e,t){var n=this.containers[5460].slice(),r=0,o=0;do{this.containers[r]&&(0,i.default)(n,this.containers[r]),r=4*r+4*c(e,t,this.data[r+0],this.data[r+1],this.data[r+2],this.data[r+3]),o++}while(o<=5);return n},e.prototype.rectangle=function(e,t,n,r,o){var u=this.lastRectangle;return u&&e===u.x1&&n===u.x2&&t===u.y1&&r===u.y2&&o===u.height||(this.lastRectangle={x1:e,y1:t,x2:n,y2:r,height:o},a(this.lastRectangle)||(this.lastRectangle=s(this.lastRectangle)),this.cache=function(e,t,n,r,o,a,s){for(var u,c=[0,0],d=[];c.length;){var f=c.pop(),h=c.pop();if((u=n[h])&&(0,i.default)(d,u),!(f>=5)){var p=4*h+4,g=4*h+8,m=4*h+12,y=4*h+16,v=l(r,o,a,s,t[p+0],t[p+1],t[p+2],t[p+3]),b=l(r,o,a,s,t[g+0],t[g+1],t[g+2],t[g+3]),w=l(r,o,a,s,t[m+0],t[m+1],t[m+2],t[m+3]),_=l(r,o,a,s,t[y+0],t[y+1],t[y+2],t[y+3]);v&&c.push(p,f+1),b&&c.push(g,f+1),w&&c.push(m,f+1),_&&c.push(y,f+1)}}return d}(0,this.data,this.containers,e,t,Math.abs(e-n)||Math.abs(t-r),o),(0,i.default)(this.cache,this.containers[5460])),this.cache},e}();t.default=d},9026:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Sigma=t.MouseCaptor=t.QuadTree=t.Camera=void 0;var i=r(n(248));t.Sigma=i.default;var o=r(n(7554));t.Camera=o.default;var a=r(n(1461));t.QuadTree=a.default;var s=r(n(9886));t.MouseCaptor=s.default,t.default=i.default},2294:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r,i){var o=i.edgeLabelSize,a=i.edgeLabelFont,s=i.edgeLabelWeight,u=i.edgeLabelColor.attribute?t[i.edgeLabelColor.attribute]||i.edgeLabelColor.color||"#000":i.edgeLabelColor.color,l=t.label;if(l){e.fillStyle=u,e.font="".concat(s," ").concat(o,"px ").concat(a);var c,d,f=n.size,h=r.size,p=n.x,g=n.y,m=r.x,y=r.y,v=m-p,b=y-g,w=Math.sqrt(v*v+b*b);if(!(w<f+h)){c=((p+=v*f/w)+(m-=v*h/w))/2,d=((g+=b*f/w)+(y-=b*h/w))/2,v=m-p,b=y-g,w=Math.sqrt(v*v+b*b);var _,x=e.measureText(l).width;if(x>w){for(l+="…",x=e.measureText(l).width;x>w&&l.length>1;)l=l.slice(0,-2)+"…",x=e.measureText(l).width;if(l.length<4)return}_=v>0?b>0?Math.acos(v/w):Math.asin(b/w):b>0?Math.acos(v/w)+Math.PI:Math.asin(v/w)+Math.PI/2,e.save(),e.translate(c,d),e.rotate(_),e.fillText(l,-x/2,t.size/2+o),e.restore()}}}},4607:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(4577));t.default=function(e,t,n){var r=n.labelSize,o=n.labelFont,a=n.labelWeight;if(e.font="".concat(a," ").concat(r,"px ").concat(o),e.fillStyle="#FFF",e.shadowOffsetX=0,e.shadowOffsetY=0,e.shadowBlur=8,e.shadowColor="#000","string"==typeof t.label){var s=e.measureText(t.label).width,u=Math.round(s+5),l=Math.round(r+4),c=Math.max(t.size,r/2)+2,d=Math.asin(l/2/c),f=Math.sqrt(Math.abs(Math.pow(c,2)-Math.pow(l/2,2)));e.beginPath(),e.moveTo(t.x+f,t.y+l/2),e.lineTo(t.x+c+u,t.y+l/2),e.lineTo(t.x+c+u,t.y-l/2),e.lineTo(t.x+f,t.y-l/2),e.arc(t.x,t.y,c,d,-d),e.closePath(),e.fill()}else e.beginPath(),e.arc(t.x,t.y,t.size+2,0,2*Math.PI),e.closePath(),e.fill();e.shadowOffsetX=0,e.shadowOffsetY=0,e.shadowBlur=0,(0,i.default)(e,t,n)}},4577:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if(t.label){var r=n.labelSize,i=n.labelFont,o=n.labelWeight,a=n.labelColor.attribute?t[n.labelColor.attribute]||n.labelColor.color||"#000":n.labelColor.color;e.fillStyle=a,e.font="".concat(o," ").concat(r,"px ").concat(i),e.fillText(t.label,t.x+t.size+3,t.y+r/3)}}},4917:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.createEdgeCompoundProgram=t.EdgeProgram=t.AbstractEdgeProgram=void 0;var o=n(7973),a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t}(o.AbstractProgram);t.AbstractEdgeProgram=a;var s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.process=function(e,t,n,r){var i=e*this.STRIDE;if(!(r.hidden||t.hidden||n.hidden))return this.processVisibleItem(i,t,n,r);for(var o=i+this.STRIDE;i<o;i++)this.array[i]=0},t}(o.Program);t.EdgeProgram=s,t.createEdgeCompoundProgram=function(e){return function(){function t(t,n){this.programs=e.map((function(e){return new e(t,n)}))}return t.prototype.reallocate=function(e){this.programs.forEach((function(t){return t.reallocate(e)}))},t.prototype.process=function(e,t,n,r){this.programs.forEach((function(i){return i.process(e,t,n,r)}))},t.prototype.render=function(e){this.programs.forEach((function(t){return t.render(e)}))},t}()}},3533:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.createNodeCompoundProgram=t.NodeProgram=t.AbstractNodeProgram=void 0;var o=n(7973),a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t}(o.AbstractProgram);t.AbstractNodeProgram=a;var s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.process=function(e,t){var n=e*this.STRIDE;if(!t.hidden)return this.processVisibleItem(n,t);for(var r=n+this.STRIDE;n<r;n++)this.array[n]=0},t}(o.Program);t.NodeProgram=s,t.createNodeCompoundProgram=function(e){return function(){function t(t,n){this.programs=e.map((function(e){return new e(t,n)}))}return t.prototype.reallocate=function(e){this.programs.forEach((function(t){return t.reallocate(e)}))},t.prototype.process=function(e,t){this.programs.forEach((function(n){return n.process(e,t)}))},t.prototype.render=function(e){this.programs.forEach((function(t){return t.render(e)}))},t}()}},7973:(e,t,n)=>{"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.Program=t.AbstractProgram=void 0;var i=n(4524),o=n(1538),a=((r={})[WebGL2RenderingContext.BOOL]=1,r[WebGL2RenderingContext.BYTE]=1,r[WebGL2RenderingContext.UNSIGNED_BYTE]=1,r[WebGL2RenderingContext.SHORT]=2,r[WebGL2RenderingContext.UNSIGNED_SHORT]=2,r[WebGL2RenderingContext.INT]=4,r[WebGL2RenderingContext.UNSIGNED_INT]=4,r[WebGL2RenderingContext.FLOAT]=4,r);t.AbstractProgram=function(e,t){};var s=function(){function e(e,t){var n=this;this.array=new Float32Array,this.indicesArray=null,this.uniformLocations={},this.attributeLocations={},this.capacity=0,this.verticesCount=0;var r=this.getDefinition();this.VERTICES=r.VERTICES,this.ARRAY_ITEMS_PER_VERTEX=r.ARRAY_ITEMS_PER_VERTEX,this.VERTEX_SHADER_SOURCE=r.VERTEX_SHADER_SOURCE,this.FRAGMENT_SHADER_SOURCE=r.FRAGMENT_SHADER_SOURCE,this.UNIFORMS=r.UNIFORMS,this.ATTRIBUTES=r.ATTRIBUTES,this.STRIDE=this.VERTICES*this.ARRAY_ITEMS_PER_VERTEX,this.gl=e,this.renderer=t;var a=e.createBuffer();if(null===a)throw new Error("Program: error while creating the webgl buffer.");this.buffer=a;var s=e.createBuffer();if(null===s)throw new Error("Program: error while creating the webgl indices buffer.");this.indicesBuffer=s,this.vertexShader=(0,o.loadVertexShader)(this.gl,this.VERTEX_SHADER_SOURCE),this.fragmentShader=(0,o.loadFragmentShader)(this.gl,this.FRAGMENT_SHADER_SOURCE),this.program=(0,o.loadProgram)(this.gl,[this.vertexShader,this.fragmentShader]),this.canUse32BitsIndices=(0,i.canUse32BitsIndices)(this.gl),this.indicesType=this.canUse32BitsIndices?e.UNSIGNED_INT:e.UNSIGNED_SHORT,this.IndicesArray=this.canUse32BitsIndices?Uint32Array:Uint16Array,this.UNIFORMS.forEach((function(e){var t=n.gl.getUniformLocation(n.program,e);if(null===t)throw new Error('Program: error while getting location for uniform "'.concat(e,'".'));n.uniformLocations[e]=t})),this.ATTRIBUTES.forEach((function(e){var t=n.gl.getAttribLocation(n.program,e.name);if(-1===t)throw new Error('Program: error while getting location for attribute "'.concat(e.name,'".'));n.attributeLocations[e.name]=t}))}return e.prototype.bind=function(){var e=this,t=this.gl;for(var n in t.bindBuffer(t.ARRAY_BUFFER,this.buffer),this.indicesArray&&t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indicesBuffer),this.attributeLocations)t.enableVertexAttribArray(this.attributeLocations[n]);var r=0;this.ATTRIBUTES.forEach((function(n){var i=e.attributeLocations[n.name];t.vertexAttribPointer(i,n.size,n.type,n.normalized||!1,e.ARRAY_ITEMS_PER_VERTEX*Float32Array.BYTES_PER_ELEMENT,r);var o=a[n.type];if("number"!=typeof o)throw new Error('Program.bind: yet unsupported attribute type "'.concat(n.type,'"!'));r+=n.size*o}))},e.prototype.bufferData=function(){var e=this.gl;this.gl.bufferData(e.ARRAY_BUFFER,this.array,e.DYNAMIC_DRAW),this.indicesArray&&this.gl.bufferData(e.ELEMENT_ARRAY_BUFFER,this.indicesArray,e.STATIC_DRAW)},e.prototype.reallocateIndices=function(){},e.prototype.reallocate=function(e){e!==this.capacity&&(this.capacity=e,this.verticesCount=this.VERTICES*e,this.array=new Float32Array(this.verticesCount*this.ARRAY_ITEMS_PER_VERTEX),"function"==typeof this.reallocateIndices&&this.reallocateIndices())},e.prototype.hasNothingToRender=function(){return 0===this.verticesCount},e.prototype.render=function(e){this.hasNothingToRender()||(this.bind(),this.bufferData(),this.gl.useProgram(this.program),this.draw(e))},e}();t.Program=s},4638:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(4917),o=r(n(8747)),a=r(n(2874)),s=(0,i.createEdgeCompoundProgram)([a.default,o.default]);t.default=s},8747:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(4524),s=n(4917),u=o(n(5191)),l=o(n(7083)),c=WebGLRenderingContext.UNSIGNED_BYTE,d=WebGLRenderingContext.FLOAT,f=["u_matrix","u_sizeRatio","u_correctionRatio"],h=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.getDefinition=function(){return{VERTICES:3,ARRAY_ITEMS_PER_VERTEX:9,VERTEX_SHADER_SOURCE:u.default,FRAGMENT_SHADER_SOURCE:l.default,UNIFORMS:f,ATTRIBUTES:[{name:"a_position",size:2,type:d},{name:"a_normal",size:2,type:d},{name:"a_radius",size:1,type:d},{name:"a_color",size:4,type:c,normalized:!0},{name:"a_barycentric",size:3,type:d}]}},t.prototype.processVisibleItem=function(e,t,n,r){var i=r.size||1,o=n.size||1,s=t.x,u=t.y,l=n.x,c=n.y,d=(0,a.floatColor)(r.color),f=l-s,h=c-u,p=f*f+h*h,g=0,m=0;p&&(g=-h*(p=1/Math.sqrt(p))*i,m=f*p*i);var y=this.array;y[e++]=l,y[e++]=c,y[e++]=-g,y[e++]=-m,y[e++]=o,y[e++]=d,y[e++]=1,y[e++]=0,y[e++]=0,y[e++]=l,y[e++]=c,y[e++]=-g,y[e++]=-m,y[e++]=o,y[e++]=d,y[e++]=0,y[e++]=1,y[e++]=0,y[e++]=l,y[e++]=c,y[e++]=-g,y[e++]=-m,y[e++]=o,y[e++]=d,y[e++]=0,y[e++]=0,y[e]=1},t.prototype.draw=function(e){var t=this.gl,n=this.uniformLocations,r=n.u_matrix,i=n.u_sizeRatio,o=n.u_correctionRatio;t.uniformMatrix3fv(r,!1,e.matrix),t.uniform1f(i,e.sizeRatio),t.uniform1f(o,e.correctionRatio),t.drawArrays(t.TRIANGLES,0,this.verticesCount)},t}(s.EdgeProgram);t.default=h},2874:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=a(n(6076)),u=a(n(8073)),l=n(4524),c=WebGLRenderingContext.UNSIGNED_BYTE,d=WebGLRenderingContext.FLOAT,f=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.getDefinition=function(){return o(o({},e.prototype.getDefinition.call(this)),{ARRAY_ITEMS_PER_VERTEX:6,VERTEX_SHADER_SOURCE:u.default,ATTRIBUTES:[{name:"a_position",size:2,type:d},{name:"a_normal",size:2,type:d},{name:"a_color",size:4,type:c,normalized:!0},{name:"a_radius",size:1,type:d}]})},t.prototype.processVisibleItem=function(e,t,n,r){var i=r.size||1,o=t.x,a=t.y,s=n.x,u=n.y,c=(0,l.floatColor)(r.color),d=s-o,f=u-a,h=n.size||1,p=d*d+f*f,g=0,m=0;p&&(g=-f*(p=1/Math.sqrt(p))*i,m=d*p*i);var y=this.array;y[e++]=o,y[e++]=a,y[e++]=g,y[e++]=m,y[e++]=c,y[e++]=0,y[e++]=o,y[e++]=a,y[e++]=-g,y[e++]=-m,y[e++]=c,y[e++]=0,y[e++]=s,y[e++]=u,y[e++]=g,y[e++]=m,y[e++]=c,y[e++]=h,y[e++]=s,y[e++]=u,y[e++]=-g,y[e++]=-m,y[e++]=c,y[e]=-h},t}(s.default);t.default=f},6076:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(4524),s=n(4917),u=o(n(2684)),l=o(n(8009)),c=WebGLRenderingContext.UNSIGNED_BYTE,d=WebGLRenderingContext.FLOAT,f=["u_matrix","u_zoomRatio","u_sizeRatio","u_correctionRatio"],h=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.getDefinition=function(){return{VERTICES:4,ARRAY_ITEMS_PER_VERTEX:5,VERTEX_SHADER_SOURCE:u.default,FRAGMENT_SHADER_SOURCE:l.default,UNIFORMS:f,ATTRIBUTES:[{name:"a_position",size:2,type:d},{name:"a_normal",size:2,type:d},{name:"a_color",size:4,type:c,normalized:!0}]}},t.prototype.reallocateIndices=function(){for(var e=this.verticesCount,t=e+e/2,n=new this.IndicesArray(t),r=0,i=0;r<e;r+=4)n[i++]=r,n[i++]=r+1,n[i++]=r+2,n[i++]=r+2,n[i++]=r+1,n[i++]=r+3;this.indicesArray=n},t.prototype.processVisibleItem=function(e,t,n,r){var i=r.size||1,o=t.x,s=t.y,u=n.x,l=n.y,c=(0,a.floatColor)(r.color),d=u-o,f=l-s,h=d*d+f*f,p=0,g=0;h&&(p=-f*(h=1/Math.sqrt(h))*i,g=d*h*i);var m=this.array;m[e++]=o,m[e++]=s,m[e++]=p,m[e++]=g,m[e++]=c,m[e++]=o,m[e++]=s,m[e++]=-p,m[e++]=-g,m[e++]=c,m[e++]=u,m[e++]=l,m[e++]=p,m[e++]=g,m[e++]=c,m[e++]=u,m[e++]=l,m[e++]=-p,m[e++]=-g,m[e]=c},t.prototype.draw=function(e){var t=this.gl,n=this.uniformLocations,r=n.u_matrix,i=n.u_zoomRatio,o=n.u_correctionRatio,a=n.u_sizeRatio;if(t.uniformMatrix3fv(r,!1,e.matrix),t.uniform1f(i,e.zoomRatio),t.uniform1f(a,e.sizeRatio),t.uniform1f(o,e.correctionRatio),!this.indicesArray)throw new Error("EdgeRectangleProgram: indicesArray should be allocated when drawing!");t.drawElements(t.TRIANGLES,this.indicesArray.length,this.indicesType,0)},t}(s.EdgeProgram);t.default=h},690:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(4524),s=n(3533),u=o(n(1057)),l=o(n(5384)),c=WebGLRenderingContext.UNSIGNED_BYTE,d=WebGLRenderingContext.FLOAT,f=["u_sizeRatio","u_pixelRatio","u_matrix"],h=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.getDefinition=function(){return{VERTICES:1,ARRAY_ITEMS_PER_VERTEX:4,VERTEX_SHADER_SOURCE:u.default,FRAGMENT_SHADER_SOURCE:l.default,UNIFORMS:f,ATTRIBUTES:[{name:"a_position",size:2,type:d},{name:"a_size",size:1,type:d},{name:"a_color",size:4,type:c,normalized:!0}]}},t.prototype.processVisibleItem=function(e,t){var n=this.array;n[e++]=t.x,n[e++]=t.y,n[e++]=t.size,n[e]=(0,a.floatColor)(t.color)},t.prototype.draw=function(e){var t=this.gl,n=this.uniformLocations,r=n.u_sizeRatio,i=n.u_pixelRatio,o=n.u_matrix;t.uniform1f(r,e.sizeRatio),t.uniform1f(i,e.pixelRatio),t.uniformMatrix3fv(o,!1,e.matrix),t.drawArrays(t.POINTS,0,this.verticesCount)},t}(s.NodeProgram);t.default=h},7083:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="precision mediump float;\n\nvarying vec4 v_color;\n\nvoid main(void) {\n  gl_FragColor = v_color;\n}\n";e.exports=n})()},5191:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="attribute vec2 a_position;\nattribute vec2 a_normal;\nattribute float a_radius;\nattribute vec4 a_color;\nattribute vec3 a_barycentric;\n\nuniform mat3 u_matrix;\nuniform float u_sizeRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\nconst float arrowHeadWidthLengthRatio = 0.66;\nconst float arrowHeadLengthThicknessRatio = 2.5;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // These first computations are taken from edge.vert.glsl and\n  // edge.clamped.vert.glsl. Please read it to get better comments on what's\n  // happening:\n  float pixelsThickness = max(normalLength, minThickness * u_sizeRatio);\n  float webGLThickness = pixelsThickness * u_correctionRatio / u_sizeRatio;\n  float webGLNodeRadius = a_radius * 2.0 * u_correctionRatio / u_sizeRatio;\n  float webGLArrowHeadLength = webGLThickness * 2.0 * arrowHeadLengthThicknessRatio;\n  float webGLArrowHeadHalfWidth = webGLArrowHeadLength * arrowHeadWidthLengthRatio / 2.0;\n\n  float da = a_barycentric.x;\n  float db = a_barycentric.y;\n  float dc = a_barycentric.z;\n\n  vec2 delta = vec2(\n      da * (webGLNodeRadius * unitNormal.y)\n    + db * ((webGLNodeRadius + webGLArrowHeadLength) * unitNormal.y + webGLArrowHeadHalfWidth * unitNormal.x)\n    + dc * ((webGLNodeRadius + webGLArrowHeadLength) * unitNormal.y - webGLArrowHeadHalfWidth * unitNormal.x),\n\n      da * (-webGLNodeRadius * unitNormal.x)\n    + db * (-(webGLNodeRadius + webGLArrowHeadLength) * unitNormal.x + webGLArrowHeadHalfWidth * unitNormal.y)\n    + dc * (-(webGLNodeRadius + webGLArrowHeadLength) * unitNormal.x - webGLArrowHeadHalfWidth * unitNormal.y)\n  );\n\n  vec2 position = (u_matrix * vec3(a_position + delta, 1)).xy;\n\n  gl_Position = vec4(position, 0, 1);\n\n  // Extract the color:\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";e.exports=n})()},8073:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="attribute vec4 a_color;\nattribute vec2 a_normal;\nattribute vec2 a_position;\nattribute float a_radius;\n\nuniform mat3 u_matrix;\nuniform float u_zoomRatio;\nuniform float u_sizeRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\nconst float arrowHeadLengthThicknessRatio = 2.5;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // These first computations are taken from edge.vert.glsl. Please read it to\n  // get better comments on what's happening:\n  float pixelsThickness = max(normalLength, minThickness * u_sizeRatio);\n  float webGLThickness = pixelsThickness * u_correctionRatio / u_sizeRatio;\n\n  // Here, we move the point to leave space for the arrow head:\n  float direction = sign(a_radius);\n  float webGLNodeRadius = direction * a_radius * 2.0 * u_correctionRatio / u_sizeRatio;\n  float webGLArrowHeadLength = webGLThickness * 2.0 * arrowHeadLengthThicknessRatio;\n\n  vec2 compensationVector = vec2(-direction * unitNormal.y, direction * unitNormal.x) * (webGLNodeRadius + webGLArrowHeadLength);\n\n  // Here is the proper position of the vertex\n  gl_Position = vec4((u_matrix * vec3(a_position + unitNormal * webGLThickness + compensationVector, 1)).xy, 0, 1);\n\n  v_thickness = webGLThickness / u_zoomRatio;\n\n  v_normal = unitNormal;\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";e.exports=n})()},8009:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="precision mediump float;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float feather = 0.001;\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\nvoid main(void) {\n  float dist = length(v_normal) * v_thickness;\n\n  float t = smoothstep(\n    v_thickness - feather,\n    v_thickness,\n    dist\n  );\n\n  gl_FragColor = mix(v_color, transparent, t);\n}\n";e.exports=n})()},2684:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r='attribute vec4 a_color;\nattribute vec2 a_normal;\nattribute vec2 a_position;\n\nuniform mat3 u_matrix;\nuniform float u_sizeRatio;\nuniform float u_zoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // We require edges to be at least `minThickness` pixels thick *on screen*\n  // (so we need to compensate the size ratio):\n  float pixelsThickness = max(normalLength, minThickness * u_sizeRatio);\n\n  // Then, we need to retrieve the normalized thickness of the edge in the WebGL\n  // referential (in a ([0, 1], [0, 1]) space), using our "magic" correction\n  // ratio:\n  float webGLThickness = pixelsThickness * u_correctionRatio / u_sizeRatio;\n\n  // Here is the proper position of the vertex\n  gl_Position = vec4((u_matrix * vec3(a_position + unitNormal * webGLThickness, 1)).xy, 0, 1);\n\n  // For the fragment shader though, we need a thickness that takes the "magic"\n  // correction ratio into account (as in webGLThickness), but so that the\n  // antialiasing effect does not depend on the zoom level. So here\'s yet\n  // another thickness version:\n  v_thickness = webGLThickness / u_zoomRatio;\n\n  v_normal = unitNormal;\n  v_color = a_color;\n  v_color.a *= bias;\n}\n';e.exports=n})()},5384:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="precision mediump float;\n\nvarying vec4 v_color;\nvarying float v_border;\n\nconst float radius = 0.5;\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\nvoid main(void) {\n  vec2 m = gl_PointCoord - vec2(0.5, 0.5);\n  float dist = radius - length(m);\n\n  float t = 0.0;\n  if (dist > v_border)\n    t = 1.0;\n  else if (dist > 0.0)\n    t = dist / v_border;\n\n  gl_FragColor = mix(transparent, v_color, t);\n}\n";e.exports=n})()},1057:e=>{(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{default:()=>r});const r="attribute vec2 a_position;\nattribute float a_size;\nattribute vec4 a_color;\n\nuniform float u_sizeRatio;\nuniform float u_pixelRatio;\nuniform mat3 u_matrix;\n\nvarying vec4 v_color;\nvarying float v_border;\n\nconst float bias = 255.0 / 254.0;\n\nvoid main() {\n  gl_Position = vec4(\n    (u_matrix * vec3(a_position, 1)).xy,\n    0,\n    1\n  );\n\n  // Multiply the point size twice:\n  //  - x SCALING_RATIO to correct the canvas scaling\n  //  - x 2 to correct the formulae\n  gl_PointSize = a_size / u_sizeRatio * u_pixelRatio * 2.0;\n\n  v_border = (0.5 / a_size) * u_sizeRatio;\n\n  // Extract the color:\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";e.exports=n})()},1538:(e,t)=>{"use strict";function n(e,t,n){var r="VERTEX"===e?t.VERTEX_SHADER:t.FRAGMENT_SHADER,i=t.createShader(r);if(null===i)throw new Error("loadShader: error while creating the shader");if(t.shaderSource(i,n),t.compileShader(i),!t.getShaderParameter(i,t.COMPILE_STATUS)){var o=t.getShaderInfoLog(i);throw t.deleteShader(i),new Error("loadShader: error while compiling the shader:\n".concat(o,"\n").concat(n))}return i}Object.defineProperty(t,"__esModule",{value:!0}),t.loadProgram=t.loadFragmentShader=t.loadVertexShader=void 0,t.loadVertexShader=function(e,t){return n("VERTEX",e,t)},t.loadFragmentShader=function(e,t){return n("FRAGMENT",e,t)},t.loadProgram=function(e,t){var n,r,i=e.createProgram();if(null===i)throw new Error("loadProgram: error while creating the program.");for(n=0,r=t.length;n<r;n++)e.attachShader(i,t[n]);if(e.linkProgram(i),!e.getProgramParameter(i,e.LINK_STATUS))throw e.deleteProgram(i),new Error("loadProgram: error while linking the program.");return i}},6482:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.resolveSettings=t.validateSettings=t.DEFAULT_EDGE_PROGRAM_CLASSES=t.DEFAULT_NODE_PROGRAM_CLASSES=t.DEFAULT_SETTINGS=void 0;var i=n(4524),o=r(n(4577)),a=r(n(4607)),s=r(n(2294)),u=r(n(690)),l=r(n(6076)),c=r(n(4638));t.DEFAULT_SETTINGS={hideEdgesOnMove:!1,hideLabelsOnMove:!1,renderLabels:!0,renderEdgeLabels:!1,enableEdgeClickEvents:!1,enableEdgeWheelEvents:!1,enableEdgeHoverEvents:!1,defaultNodeColor:"#999",defaultNodeType:"circle",defaultEdgeColor:"#ccc",defaultEdgeType:"line",labelFont:"Arial",labelSize:14,labelWeight:"normal",labelColor:{color:"#000"},edgeLabelFont:"Arial",edgeLabelSize:14,edgeLabelWeight:"normal",edgeLabelColor:{attribute:"color"},stagePadding:30,zoomToSizeRatioFunction:Math.sqrt,itemSizesReference:"screen",labelDensity:1,labelGridCellSize:100,labelRenderedSizeThreshold:6,nodeReducer:null,edgeReducer:null,zIndex:!1,minCameraRatio:null,maxCameraRatio:null,labelRenderer:o.default,hoverRenderer:a.default,edgeLabelRenderer:s.default,allowInvalidContainer:!1,nodeProgramClasses:{},nodeHoverProgramClasses:{},edgeProgramClasses:{}},t.DEFAULT_NODE_PROGRAM_CLASSES={circle:u.default},t.DEFAULT_EDGE_PROGRAM_CLASSES={arrow:c.default,line:l.default},t.validateSettings=function(e){if("number"!=typeof e.labelDensity||e.labelDensity<0)throw new Error("Settings: invalid `labelDensity`. Expecting a positive number.");var t=e.minCameraRatio,n=e.maxCameraRatio;if("number"==typeof t&&"number"==typeof n&&n<t)throw new Error("Settings: invalid camera ratio boundaries. Expecting `maxCameraRatio` to be greater than `minCameraRatio`.")},t.resolveSettings=function(e){var n=(0,i.assign)({},t.DEFAULT_SETTINGS,e);return n.nodeProgramClasses=(0,i.assign)({},t.DEFAULT_NODE_PROGRAM_CLASSES,n.nodeProgramClasses),n.edgeProgramClasses=(0,i.assign)({},t.DEFAULT_EDGE_PROGRAM_CLASSES,n.edgeProgramClasses),n}},248:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=s(n(3796)),l=s(n(7554)),c=s(n(9886)),d=s(n(1461)),f=n(3291),h=n(4524),p=n(8098),g=n(6482),m=s(n(9311)),y=n(5132),v=n(9822);function b(e,t,n){if(!n.hasOwnProperty("x")||!n.hasOwnProperty("y"))throw new Error('Sigma: could not find a valid position (x, y) for node "'.concat(t,'". All your nodes must have a number "x" and "y". Maybe your forgot to apply a layout or your "nodeReducer" is not returning the correct data?'));return n.color||(n.color=e.defaultNodeColor),n.label||""===n.label||(n.label=null),void 0!==n.label&&null!==n.label?n.label=""+n.label:n.label=null,n.size||(n.size=2),n.hasOwnProperty("hidden")||(n.hidden=!1),n.hasOwnProperty("highlighted")||(n.highlighted=!1),n.hasOwnProperty("forceLabel")||(n.forceLabel=!1),n.type&&""!==n.type||(n.type=e.defaultNodeType),n.zIndex||(n.zIndex=0),n}function w(e,t,n){return n.color||(n.color=e.defaultEdgeColor),n.label||(n.label=""),n.size||(n.size=.5),n.hasOwnProperty("hidden")||(n.hidden=!1),n.hasOwnProperty("forceLabel")||(n.forceLabel=!1),n.type&&""!==n.type||(n.type=e.defaultEdgeType),n.zIndex||(n.zIndex=0),n}var _=function(e){function t(t,n,r){void 0===r&&(r={});var i=e.call(this)||this;if(i.elements={},i.canvasContexts={},i.webGLContexts={},i.activeListeners={},i.quadtree=new d.default,i.labelGrid=new p.LabelGrid,i.nodeDataCache={},i.edgeDataCache={},i.nodesWithForcedLabels=[],i.edgesWithForcedLabels=[],i.nodeExtent={x:[0,1],y:[0,1]},i.matrix=(0,y.identity)(),i.invMatrix=(0,y.identity)(),i.correctionRatio=1,i.customBBox=null,i.normalizationFunction=(0,h.createNormalizationFunction)({x:[0,1],y:[0,1]}),i.graphToViewportRatio=1,i.width=0,i.height=0,i.pixelRatio=(0,h.getPixelRatio)(),i.displayedNodeLabels=new Set,i.displayedEdgeLabels=new Set,i.highlightedNodes=new Set,i.hoveredNode=null,i.hoveredEdge=null,i.renderFrame=null,i.renderHighlightedNodesFrame=null,i.needToProcess=!1,i.checkEdgesEventsFrame=null,i.nodePrograms={},i.nodeHoverPrograms={},i.edgePrograms={},i.settings=(0,g.resolveSettings)(r),(0,g.validateSettings)(i.settings),(0,h.validateGraph)(t),!(n instanceof HTMLElement))throw new Error("Sigma: container should be an html element.");for(var o in i.graph=t,i.container=n,i.createWebGLContext("edges",{preserveDrawingBuffer:!0}),i.createCanvasContext("edgeLabels"),i.createWebGLContext("nodes"),i.createCanvasContext("labels"),i.createCanvasContext("hovers"),i.createWebGLContext("hoverNodes"),i.createCanvasContext("mouse"),i.webGLContexts){var a=i.webGLContexts[o];a.blendFunc(a.ONE,a.ONE_MINUS_SRC_ALPHA),a.enable(a.BLEND)}for(var s in i.settings.nodeProgramClasses){var u=i.settings.nodeProgramClasses[s];i.nodePrograms[s]=new u(i.webGLContexts.nodes,i);var f=u;s in i.settings.nodeHoverProgramClasses&&(f=i.settings.nodeHoverProgramClasses[s]),i.nodeHoverPrograms[s]=new f(i.webGLContexts.hoverNodes,i)}for(var s in i.settings.edgeProgramClasses){var v=i.settings.edgeProgramClasses[s];i.edgePrograms[s]=new v(i.webGLContexts.edges,i)}return i.resize(),i.camera=new l.default,i.bindCameraHandlers(),i.mouseCaptor=new c.default(i.elements.mouse,i),i.touchCaptor=new m.default(i.elements.mouse,i),i.bindEventHandlers(),i.bindGraphHandlers(),i.handleSettingsUpdate(),i.refresh(),i}return i(t,e),t.prototype.createCanvas=function(e){var t=(0,h.createElement)("canvas",{position:"absolute"},{class:"sigma-".concat(e)});return this.elements[e]=t,this.container.appendChild(t),t},t.prototype.createCanvasContext=function(e){var t=this.createCanvas(e);return this.canvasContexts[e]=t.getContext("2d",{preserveDrawingBuffer:!1,antialias:!1}),this},t.prototype.createWebGLContext=function(e,t){var n,r=this.createCanvas(e),i=o({preserveDrawingBuffer:!1,antialias:!1},t||{});return(n=r.getContext("webgl2",i))||(n=r.getContext("webgl",i)),n||(n=r.getContext("experimental-webgl",i)),this.webGLContexts[e]=n,this},t.prototype.bindCameraHandlers=function(){var e=this;return this.activeListeners.camera=function(){e.scheduleRender()},this.camera.on("updated",this.activeListeners.camera),this},t.prototype.unbindCameraHandlers=function(){return this.camera.removeListener("updated",this.activeListeners.camera),this},t.prototype.mouseIsOnNode=function(e,t,n){var r=e.x,i=e.y,o=t.x,a=t.y;return r>o-n&&r<o+n&&i>a-n&&i<a+n&&Math.sqrt(Math.pow(r-o,2)+Math.pow(i-a,2))<n},t.prototype.getQuadNodes=function(e){var t=this.viewportToFramedGraph(e);return this.quadtree.point(t.x,1-t.y)},t.prototype.getNodeAtPosition=function(e){for(var t=e.x,n=e.y,r=this.getQuadNodes(e),i=1/0,o=null,a=0,s=r.length;a<s;a++){var u=r[a],l=this.nodeDataCache[u],c=this.framedGraphToViewport(l),d=this.scaleSize(l.size);if(!l.hidden&&this.mouseIsOnNode(e,c,d)){var f=Math.sqrt(Math.pow(t-c.x,2)+Math.pow(n-c.y,2));f<i&&(i=f,o=u)}}return o},t.prototype.bindEventHandlers=function(){var e=this;this.activeListeners.handleResize=function(){e.scheduleRender()},window.addEventListener("resize",this.activeListeners.handleResize),this.activeListeners.handleMove=function(t){var n={event:t,preventSigmaDefault:function(){t.preventSigmaDefault()}},r=e.getNodeAtPosition(t);if(r&&e.hoveredNode!==r&&!e.nodeDataCache[r].hidden)return e.hoveredNode&&e.emit("leaveNode",o(o({},n),{node:e.hoveredNode})),e.hoveredNode=r,e.emit("enterNode",o(o({},n),{node:r})),void e.scheduleHighlightedNodesRender();if(e.hoveredNode){var i=e.nodeDataCache[e.hoveredNode],a=e.framedGraphToViewport(i),s=e.scaleSize(i.size);if(!e.mouseIsOnNode(t,a,s)){var u=e.hoveredNode;return e.hoveredNode=null,e.emit("leaveNode",o(o({},n),{node:u})),void e.scheduleHighlightedNodesRender()}}!0===e.settings.enableEdgeHoverEvents?e.checkEdgeHoverEvents(n):"debounce"===e.settings.enableEdgeHoverEvents&&(e.checkEdgesEventsFrame||(e.checkEdgesEventsFrame=(0,h.requestFrame)((function(){e.checkEdgeHoverEvents(n),e.checkEdgesEventsFrame=null}))))};var t=function(t){return function(n){var r={event:n,preventSigmaDefault:function(){n.preventSigmaDefault()}},i=n.original.isFakeSigmaMouseEvent?e.getNodeAtPosition(n):e.hoveredNode;if(i)return e.emit("".concat(t,"Node"),o(o({},r),{node:i}));if("wheel"===t?e.settings.enableEdgeWheelEvents:e.settings.enableEdgeClickEvents){var a=e.getEdgeAtPoint(n.x,n.y);if(a)return e.emit("".concat(t,"Edge"),o(o({},r),{edge:a}))}return e.emit("".concat(t,"Stage"),r)}};return this.activeListeners.handleClick=t("click"),this.activeListeners.handleRightClick=t("rightClick"),this.activeListeners.handleDoubleClick=t("doubleClick"),this.activeListeners.handleWheel=t("wheel"),this.activeListeners.handleDown=t("down"),this.mouseCaptor.on("mousemove",this.activeListeners.handleMove),this.mouseCaptor.on("click",this.activeListeners.handleClick),this.mouseCaptor.on("rightClick",this.activeListeners.handleRightClick),this.mouseCaptor.on("doubleClick",this.activeListeners.handleDoubleClick),this.mouseCaptor.on("wheel",this.activeListeners.handleWheel),this.mouseCaptor.on("mousedown",this.activeListeners.handleDown),this},t.prototype.bindGraphHandlers=function(){var e=this,t=this.graph;return this.activeListeners.graphUpdate=function(){e.scheduleRefresh()},this.activeListeners.dropNodeGraphUpdate=function(t){delete e.nodeDataCache[t.key],e.hoveredNode===t.key&&(e.hoveredNode=null),e.activeListeners.graphUpdate()},this.activeListeners.dropEdgeGraphUpdate=function(t){delete e.edgeDataCache[t.key],e.hoveredEdge===t.key&&(e.hoveredEdge=null),e.activeListeners.graphUpdate()},this.activeListeners.clearEdgesGraphUpdate=function(){e.edgeDataCache={},e.hoveredEdge=null,e.activeListeners.graphUpdate()},this.activeListeners.clearGraphUpdate=function(){e.nodeDataCache={},e.hoveredNode=null,e.activeListeners.clearEdgesGraphUpdate()},t.on("nodeAdded",this.activeListeners.graphUpdate),t.on("nodeDropped",this.activeListeners.dropNodeGraphUpdate),t.on("nodeAttributesUpdated",this.activeListeners.graphUpdate),t.on("eachNodeAttributesUpdated",this.activeListeners.graphUpdate),t.on("edgeAdded",this.activeListeners.graphUpdate),t.on("edgeDropped",this.activeListeners.dropEdgeGraphUpdate),t.on("edgeAttributesUpdated",this.activeListeners.graphUpdate),t.on("eachEdgeAttributesUpdated",this.activeListeners.graphUpdate),t.on("edgesCleared",this.activeListeners.clearEdgesGraphUpdate),t.on("cleared",this.activeListeners.clearGraphUpdate),this},t.prototype.unbindGraphHandlers=function(){var e=this.graph;e.removeListener("nodeAdded",this.activeListeners.graphUpdate),e.removeListener("nodeDropped",this.activeListeners.dropNodeGraphUpdate),e.removeListener("nodeAttributesUpdated",this.activeListeners.graphUpdate),e.removeListener("eachNodeAttributesUpdated",this.activeListeners.graphUpdate),e.removeListener("edgeAdded",this.activeListeners.graphUpdate),e.removeListener("edgeDropped",this.activeListeners.dropEdgeGraphUpdate),e.removeListener("edgeAttributesUpdated",this.activeListeners.graphUpdate),e.removeListener("eachEdgeAttributesUpdated",this.activeListeners.graphUpdate),e.removeListener("edgesCleared",this.activeListeners.clearEdgesGraphUpdate),e.removeListener("cleared",this.activeListeners.clearGraphUpdate)},t.prototype.checkEdgeHoverEvents=function(e){var t=this.hoveredNode?null:this.getEdgeAtPoint(e.event.x,e.event.y);return t!==this.hoveredEdge&&(this.hoveredEdge&&this.emit("leaveEdge",o(o({},e),{edge:this.hoveredEdge})),t&&this.emit("enterEdge",o(o({},e),{edge:t})),this.hoveredEdge=t),this},t.prototype.getEdgeAtPoint=function(e,t){var n,r,i=this,o=this.edgeDataCache,s=this.nodeDataCache;if(!(0,v.isPixelColored)(this.webGLContexts.edges,e*this.pixelRatio,t*this.pixelRatio))return null;var u=this.viewportToGraph({x:e,y:t}),l=u.x,c=u.y,d=0;if(this.graph.someEdge((function(e,t,n,r,a,u){var l=a.x,c=a.y,f=u.x,h=u.y;if(o[e].hidden||s[n].hidden||s[r].hidden)return!1;if(l!==f||c!==h){var p=Math.sqrt(Math.pow(f-l,2)+Math.pow(h-c,2)),g=i.graphToViewport({x:l,y:c}),m=g.x,y=g.y,v=i.graphToViewport({x:f,y:h}),b=v.x,w=v.y,_=Math.sqrt(Math.pow(b-m,2)+Math.pow(w-y,2));return d=p/_,!0}})),!d)return null;var f=this.graph.filterEdges((function(e,t,n,r,a,u){return!(o[e].hidden||s[n].hidden||s[r].hidden)&&(!!(0,v.doEdgeCollideWithPoint)(l,c,a.x,a.y,u.x,u.y,i.scaleSize(o[e].size*d))||void 0)}));if(0===f.length)return null;var h=f[f.length-1],p=-1/0;try{for(var g=a(f),m=g.next();!m.done;m=g.next()){var y=m.value,b=this.graph.getEdgeAttribute(y,"zIndex");b>=p&&(h=y,p=b)}}catch(e){n={error:e}}finally{try{m&&!m.done&&(r=g.return)&&r.call(g)}finally{if(n)throw n.error}}return h},t.prototype.process=function(){var e=this,t=this.graph,n=this.settings,r=this.getDimensions(),i=[1/0,-1/0],o=[1/0,-1/0];this.quadtree.clear(),this.labelGrid.resizeAndClear(r,n.labelGridCellSize),this.highlightedNodes=new Set,this.nodeExtent=(0,h.graphExtent)(t),this.nodesWithForcedLabels=[],this.edgesWithForcedLabels=[];var a=new l.default,s=(0,h.matrixFromCamera)(a.getState(),this.getDimensions(),this.getGraphDimensions(),this.getSetting("stagePadding")||0);this.normalizationFunction=(0,h.createNormalizationFunction)(this.customBBox||this.nodeExtent);for(var u={},c=t.nodes(),d=0,f=c.length;d<f;d++){var p=c[d],g=Object.assign({},t.getNodeAttributes(p));n.nodeReducer&&(g=n.nodeReducer(p,g)),u[(v=b(this.settings,p,g)).type]=(u[v.type]||0)+1,this.nodeDataCache[p]=v,this.normalizationFunction.applyTo(v),v.forceLabel&&this.nodesWithForcedLabels.push(p),this.settings.zIndex&&(v.zIndex<i[0]&&(i[0]=v.zIndex),v.zIndex>i[1]&&(i[1]=v.zIndex))}for(var m in this.nodePrograms){if(!this.nodePrograms.hasOwnProperty(m))throw new Error('Sigma: could not find a suitable program for node type "'.concat(m,'"!'));this.nodePrograms[m].reallocate(u[m]||0),u[m]=0}this.settings.zIndex&&i[0]!==i[1]&&(c=(0,h.zIndexOrdering)(i,(function(t){return e.nodeDataCache[t].zIndex}),c));var y=this.normalizationFunction.ratio;for(d=0,f=c.length;d<f;d++){p=c[d];var v=this.nodeDataCache[p];this.quadtree.add(p,v.x,1-v.y,this.scaleSize(v.size,1)/y),"string"!=typeof v.label||v.hidden||this.labelGrid.add(p,v.size,this.framedGraphToViewport(v,{matrix:s}));var _=this.nodePrograms[v.type];if(!_)throw new Error('Sigma: could not find a suitable program for node type "'.concat(v.type,'"!'));_.process(u[v.type]++,v),v.highlighted&&!v.hidden&&this.highlightedNodes.add(p)}this.labelGrid.organize();var x={},k=t.edges();for(d=0,f=k.length;d<f;d++){var E=k[d];g=Object.assign({},t.getEdgeAttributes(E)),n.edgeReducer&&(g=n.edgeReducer(E,g)),x[(v=w(this.settings,0,g)).type]=(x[v.type]||0)+1,this.edgeDataCache[E]=v,v.forceLabel&&!v.hidden&&this.edgesWithForcedLabels.push(E),this.settings.zIndex&&(v.zIndex<o[0]&&(o[0]=v.zIndex),v.zIndex>o[1]&&(o[1]=v.zIndex))}for(var m in this.edgePrograms){if(!this.edgePrograms.hasOwnProperty(m))throw new Error('Sigma: could not find a suitable program for edge type "'.concat(m,'"!'));this.edgePrograms[m].reallocate(x[m]||0),x[m]=0}for(this.settings.zIndex&&o[0]!==o[1]&&(k=(0,h.zIndexOrdering)(o,(function(t){return e.edgeDataCache[t].zIndex}),k)),d=0,f=k.length;d<f;d++){E=k[d],v=this.edgeDataCache[E];var S=t.extremities(E),C=this.nodeDataCache[S[0]],A=this.nodeDataCache[S[1]];this.edgePrograms[v.type].process(x[v.type]++,C,A,v)}return this},t.prototype.handleSettingsUpdate=function(){return this.camera.minRatio=this.settings.minCameraRatio,this.camera.maxRatio=this.settings.maxCameraRatio,this.camera.setState(this.camera.validateState(this.camera.getState())),this},t.prototype.renderLabels=function(){if(!this.settings.renderLabels)return this;var e=this.camera.getState(),t=this.labelGrid.getLabelsToDisplay(e.ratio,this.settings.labelDensity);(0,u.default)(t,this.nodesWithForcedLabels),this.displayedNodeLabels=new Set;for(var n=this.canvasContexts.labels,r=0,i=t.length;r<i;r++){var a=t[r],s=this.nodeDataCache[a];if(!this.displayedNodeLabels.has(a)&&!s.hidden){var l=this.framedGraphToViewport(s),c=l.x,d=l.y,f=this.scaleSize(s.size);!s.forceLabel&&f<this.settings.labelRenderedSizeThreshold||c<-150||c>this.width+150||d<-50||d>this.height+50||(this.displayedNodeLabels.add(a),this.settings.labelRenderer(n,o(o({key:a},s),{size:f,x:c,y:d}),this.settings))}}return this},t.prototype.renderEdgeLabels=function(){if(!this.settings.renderEdgeLabels)return this;var e=this.canvasContexts.edgeLabels;e.clearRect(0,0,this.width,this.height);for(var t=(0,p.edgeLabelsToDisplayFromNodes)({graph:this.graph,hoveredNode:this.hoveredNode,displayedNodeLabels:this.displayedNodeLabels,highlightedNodes:this.highlightedNodes}).concat(this.edgesWithForcedLabels),n=new Set,r=0,i=t.length;r<i;r++){var a=t[r],s=this.graph.extremities(a),u=this.nodeDataCache[s[0]],l=this.nodeDataCache[s[1]],c=this.edgeDataCache[a];n.has(a)||c.hidden||u.hidden||l.hidden||(this.settings.edgeLabelRenderer(e,o(o({key:a},c),{size:this.scaleSize(c.size)}),o(o(o({key:s[0]},u),this.framedGraphToViewport(u)),{size:this.scaleSize(u.size)}),o(o(o({key:s[1]},l),this.framedGraphToViewport(l)),{size:this.scaleSize(l.size)}),this.settings),n.add(a))}return this.displayedEdgeLabels=n,this},t.prototype.renderHighlightedNodes=function(){var e=this,t=this.canvasContexts.hovers;t.clearRect(0,0,this.width,this.height);var n=[];this.hoveredNode&&!this.nodeDataCache[this.hoveredNode].hidden&&n.push(this.hoveredNode),this.highlightedNodes.forEach((function(t){t!==e.hoveredNode&&n.push(t)})),n.forEach((function(n){return function(n){var r=e.nodeDataCache[n],i=e.framedGraphToViewport(r),a=i.x,s=i.y,u=e.scaleSize(r.size);e.settings.hoverRenderer(t,o(o({key:n},r),{size:u,x:a,y:s}),e.settings)}(n)}));var r={};for(var i in n.forEach((function(t){var n=e.nodeDataCache[t].type;r[n]=(r[n]||0)+1})),this.nodeHoverPrograms)this.nodeHoverPrograms[i].reallocate(r[i]||0),r[i]=0;for(var i in n.forEach((function(t){var n=e.nodeDataCache[t];e.nodeHoverPrograms[n.type].process(r[n.type]++,n)})),this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT),this.nodeHoverPrograms)this.nodeHoverPrograms[i].render({matrix:this.matrix,width:this.width,height:this.height,pixelRatio:this.pixelRatio,zoomRatio:this.camera.ratio,sizeRatio:1/this.scaleSize(),correctionRatio:this.correctionRatio})},t.prototype.scheduleHighlightedNodesRender=function(){var e=this;this.renderHighlightedNodesFrame||this.renderFrame||(this.renderHighlightedNodesFrame=(0,h.requestFrame)((function(){e.renderHighlightedNodesFrame=null,e.renderHighlightedNodes(),e.renderEdgeLabels()})))},t.prototype.render=function(){var e=this;this.emit("beforeRender");var t=function(){return e.emit("afterRender"),e};if(this.renderFrame&&((0,h.cancelFrame)(this.renderFrame),this.renderFrame=null),this.resize(),this.needToProcess&&this.process(),this.needToProcess=!1,this.clear(),!this.graph.order)return t();var n=this.mouseCaptor,r=this.camera.isAnimated()||n.isMoving||n.draggedEvents||n.currentWheelDirection,i=this.camera.getState(),o=this.getDimensions(),a=this.getGraphDimensions(),s=this.getSetting("stagePadding")||0;this.matrix=(0,h.matrixFromCamera)(i,o,a,s),this.invMatrix=(0,h.matrixFromCamera)(i,o,a,s,!0),this.correctionRatio=(0,h.getMatrixImpact)(this.matrix,i,o),this.graphToViewportRatio=this.getGraphToViewportRatio();var u={matrix:this.matrix,width:this.width,height:this.height,pixelRatio:this.pixelRatio,zoomRatio:this.camera.ratio,sizeRatio:1/this.scaleSize(),correctionRatio:this.correctionRatio};for(var l in this.nodePrograms)this.nodePrograms[l].render(u);if(!this.settings.hideEdgesOnMove||!r)for(var l in this.edgePrograms)this.edgePrograms[l].render(u);return this.settings.hideLabelsOnMove&&r||(this.renderLabels(),this.renderEdgeLabels(),this.renderHighlightedNodes()),t()},t.prototype.getCamera=function(){return this.camera},t.prototype.setCamera=function(e){this.unbindCameraHandlers(),this.camera=e,this.bindCameraHandlers()},t.prototype.getContainer=function(){return this.container},t.prototype.getGraph=function(){return this.graph},t.prototype.setGraph=function(e){e!==this.graph&&(this.unbindGraphHandlers(),this.nodeDataCache={},this.edgeDataCache={},this.displayedNodeLabels.clear(),this.displayedEdgeLabels.clear(),this.highlightedNodes.clear(),this.hoveredNode=null,this.hoveredEdge=null,this.nodesWithForcedLabels.length=0,this.edgesWithForcedLabels.length=0,null!==this.checkEdgesEventsFrame&&((0,h.cancelFrame)(this.checkEdgesEventsFrame),this.checkEdgesEventsFrame=null),this.graph=e,this.bindGraphHandlers(),this.refresh())},t.prototype.getMouseCaptor=function(){return this.mouseCaptor},t.prototype.getTouchCaptor=function(){return this.touchCaptor},t.prototype.getDimensions=function(){return{width:this.width,height:this.height}},t.prototype.getGraphDimensions=function(){var e=this.customBBox||this.nodeExtent;return{width:e.x[1]-e.x[0]||1,height:e.y[1]-e.y[0]||1}},t.prototype.getNodeDisplayData=function(e){var t=this.nodeDataCache[e];return t?Object.assign({},t):void 0},t.prototype.getEdgeDisplayData=function(e){var t=this.edgeDataCache[e];return t?Object.assign({},t):void 0},t.prototype.getNodeDisplayedLabels=function(){return new Set(this.displayedNodeLabels)},t.prototype.getEdgeDisplayedLabels=function(){return new Set(this.displayedEdgeLabels)},t.prototype.getSettings=function(){return o({},this.settings)},t.prototype.getSetting=function(e){return this.settings[e]},t.prototype.setSetting=function(e,t){return this.settings[e]=t,(0,g.validateSettings)(this.settings),this.handleSettingsUpdate(),this.scheduleRefresh(),this},t.prototype.updateSetting=function(e,t){return this.settings[e]=t(this.settings[e]),(0,g.validateSettings)(this.settings),this.handleSettingsUpdate(),this.scheduleRefresh(),this},t.prototype.resize=function(){var e=this.width,t=this.height;if(this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,this.pixelRatio=(0,h.getPixelRatio)(),0===this.width){if(!this.settings.allowInvalidContainer)throw new Error("Sigma: Container has no width. You can set the allowInvalidContainer setting to true to stop seeing this error.");this.width=1}if(0===this.height){if(!this.settings.allowInvalidContainer)throw new Error("Sigma: Container has no height. You can set the allowInvalidContainer setting to true to stop seeing this error.");this.height=1}if(e===this.width&&t===this.height)return this;for(var n in this.emit("resize"),this.elements){var r=this.elements[n];r.style.width=this.width+"px",r.style.height=this.height+"px"}for(var n in this.canvasContexts)this.elements[n].setAttribute("width",this.width*this.pixelRatio+"px"),this.elements[n].setAttribute("height",this.height*this.pixelRatio+"px"),1!==this.pixelRatio&&this.canvasContexts[n].scale(this.pixelRatio,this.pixelRatio);for(var n in this.webGLContexts)this.elements[n].setAttribute("width",this.width*this.pixelRatio+"px"),this.elements[n].setAttribute("height",this.height*this.pixelRatio+"px"),this.webGLContexts[n].viewport(0,0,this.width*this.pixelRatio,this.height*this.pixelRatio);return this},t.prototype.clear=function(){return this.webGLContexts.nodes.clear(this.webGLContexts.nodes.COLOR_BUFFER_BIT),this.webGLContexts.edges.clear(this.webGLContexts.edges.COLOR_BUFFER_BIT),this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT),this.canvasContexts.labels.clearRect(0,0,this.width,this.height),this.canvasContexts.hovers.clearRect(0,0,this.width,this.height),this.canvasContexts.edgeLabels.clearRect(0,0,this.width,this.height),this},t.prototype.refresh=function(){return this.needToProcess=!0,this.render(),this},t.prototype.scheduleRender=function(){var e=this;return this.renderFrame||(this.renderFrame=(0,h.requestFrame)((function(){e.render()}))),this},t.prototype.scheduleRefresh=function(){return this.needToProcess=!0,this.scheduleRender(),this},t.prototype.getViewportZoomedState=function(e,t){var n=this.camera.getState(),r=n.ratio,i=n.angle,o=n.x,a=n.y,s=t/r,u={x:this.width/2,y:this.height/2},l=this.viewportToFramedGraph(e),c=this.viewportToFramedGraph(u);return{angle:i,x:(l.x-c.x)*(1-s)+o,y:(l.y-c.y)*(1-s)+a,ratio:t}},t.prototype.viewRectangle=function(){var e=0*this.width/8,t=0*this.height/8,n=this.viewportToFramedGraph({x:0-e,y:0-t}),r=this.viewportToFramedGraph({x:this.width+e,y:0-t}),i=this.viewportToFramedGraph({x:0,y:this.height+t});return{x1:n.x,y1:n.y,x2:r.x,y2:r.y,height:r.y-i.y}},t.prototype.framedGraphToViewport=function(e,t){void 0===t&&(t={});var n=!!t.cameraState||!!t.viewportDimensions||!!t.graphDimensions,r=t.matrix?t.matrix:n?(0,h.matrixFromCamera)(t.cameraState||this.camera.getState(),t.viewportDimensions||this.getDimensions(),t.graphDimensions||this.getGraphDimensions(),t.padding||this.getSetting("stagePadding")||0):this.matrix,i=(0,y.multiplyVec2)(r,e);return{x:(1+i.x)*this.width/2,y:(1-i.y)*this.height/2}},t.prototype.viewportToFramedGraph=function(e,t){void 0===t&&(t={});var n=!!t.cameraState||!!t.viewportDimensions||!t.graphDimensions,r=t.matrix?t.matrix:n?(0,h.matrixFromCamera)(t.cameraState||this.camera.getState(),t.viewportDimensions||this.getDimensions(),t.graphDimensions||this.getGraphDimensions(),t.padding||this.getSetting("stagePadding")||0,!0):this.invMatrix,i=(0,y.multiplyVec2)(r,{x:e.x/this.width*2-1,y:1-e.y/this.height*2});return isNaN(i.x)&&(i.x=0),isNaN(i.y)&&(i.y=0),i},t.prototype.viewportToGraph=function(e,t){return void 0===t&&(t={}),this.normalizationFunction.inverse(this.viewportToFramedGraph(e,t))},t.prototype.graphToViewport=function(e,t){return void 0===t&&(t={}),this.framedGraphToViewport(this.normalizationFunction(e),t)},t.prototype.getGraphToViewportRatio=function(){var e={x:0,y:0},t={x:1,y:1},n=Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)),r=this.graphToViewport(e),i=this.graphToViewport(t);return Math.sqrt(Math.pow(r.x-i.x,2)+Math.pow(r.y-i.y,2))/n},t.prototype.getBBox=function(){return(0,h.graphExtent)(this.graph)},t.prototype.getCustomBBox=function(){return this.customBBox},t.prototype.setCustomBBox=function(e){return this.customBBox=e,this.scheduleRender(),this},t.prototype.kill=function(){this.emit("kill"),this.removeAllListeners(),this.unbindCameraHandlers(),window.removeEventListener("resize",this.activeListeners.handleResize),this.mouseCaptor.kill(),this.touchCaptor.kill(),this.unbindGraphHandlers(),this.quadtree=new d.default,this.nodeDataCache={},this.edgeDataCache={},this.nodesWithForcedLabels=[],this.edgesWithForcedLabels=[],this.highlightedNodes.clear(),this.renderFrame&&((0,h.cancelFrame)(this.renderFrame),this.renderFrame=null),this.renderHighlightedNodesFrame&&((0,h.cancelFrame)(this.renderHighlightedNodesFrame),this.renderHighlightedNodesFrame=null);for(var e=this.container;e.firstChild;)e.removeChild(e.firstChild)},t.prototype.scaleSize=function(e,t){return void 0===e&&(e=1),void 0===t&&(t=this.camera.ratio),e/this.settings.zoomToSizeRatioFunction(t)*("positions"===this.getSetting("itemSizesReference")?t*this.graphToViewportRatio:1)},t.prototype.getCanvases=function(){return o({},this.elements)},t}(f.TypedEventEmitter);t.default=_},3291:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.TypedEventEmitter=void 0;var o=function(e){function t(){var t=e.call(this)||this;return t.rawEmitter=t,t}return i(t,e),t}(n(7187).EventEmitter);t.TypedEventEmitter=o},5227:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.animateNodes=t.ANIMATE_DEFAULTS=void 0;var i=n(4524),o=r(n(8941));t.ANIMATE_DEFAULTS={easing:"quadraticInOut",duration:150},t.animateNodes=function(e,n,r,a){var s=Object.assign({},t.ANIMATE_DEFAULTS,r),u="function"==typeof s.easing?s.easing:o.default[s.easing],l=Date.now(),c={};for(var d in n){var f=n[d];for(var h in c[d]={},f)c[d][h]=e.getNodeAttribute(d,h)}var p=null,g=function(){p=null;var t=(Date.now()-l)/s.duration;if(t>=1){for(var r in n){var o=n[r];for(var d in o)e.setNodeAttribute(r,d,o[d])}"function"==typeof a&&a()}else{for(var r in t=u(t),n){o=n[r];var f=c[r];for(var d in o)e.setNodeAttribute(r,d,o[d]*t+f[d]*(1-t))}p=(0,i.requestFrame)(g)}};return g(),function(){p&&(0,i.cancelFrame)(p)}}},8109:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HTML_COLORS=void 0,t.HTML_COLORS={black:"#000000",silver:"#C0C0C0",gray:"#808080",grey:"#808080",white:"#FFFFFF",maroon:"#800000",red:"#FF0000",purple:"#800080",fuchsia:"#FF00FF",green:"#008000",lime:"#00FF00",olive:"#808000",yellow:"#FFFF00",navy:"#000080",blue:"#0000FF",teal:"#008080",aqua:"#00FFFF",darkblue:"#00008B",mediumblue:"#0000CD",darkgreen:"#006400",darkcyan:"#008B8B",deepskyblue:"#00BFFF",darkturquoise:"#00CED1",mediumspringgreen:"#00FA9A",springgreen:"#00FF7F",cyan:"#00FFFF",midnightblue:"#191970",dodgerblue:"#1E90FF",lightseagreen:"#20B2AA",forestgreen:"#228B22",seagreen:"#2E8B57",darkslategray:"#2F4F4F",darkslategrey:"#2F4F4F",limegreen:"#32CD32",mediumseagreen:"#3CB371",turquoise:"#40E0D0",royalblue:"#4169E1",steelblue:"#4682B4",darkslateblue:"#483D8B",mediumturquoise:"#48D1CC",indigo:"#4B0082",darkolivegreen:"#556B2F",cadetblue:"#5F9EA0",cornflowerblue:"#6495ED",rebeccapurple:"#663399",mediumaquamarine:"#66CDAA",dimgray:"#696969",dimgrey:"#696969",slateblue:"#6A5ACD",olivedrab:"#6B8E23",slategray:"#708090",slategrey:"#708090",lightslategray:"#778899",lightslategrey:"#778899",mediumslateblue:"#7B68EE",lawngreen:"#7CFC00",chartreuse:"#7FFF00",aquamarine:"#7FFFD4",skyblue:"#87CEEB",lightskyblue:"#87CEFA",blueviolet:"#8A2BE2",darkred:"#8B0000",darkmagenta:"#8B008B",saddlebrown:"#8B4513",darkseagreen:"#8FBC8F",lightgreen:"#90EE90",mediumpurple:"#9370DB",darkviolet:"#9400D3",palegreen:"#98FB98",darkorchid:"#9932CC",yellowgreen:"#9ACD32",sienna:"#A0522D",brown:"#A52A2A",darkgray:"#A9A9A9",darkgrey:"#A9A9A9",lightblue:"#ADD8E6",greenyellow:"#ADFF2F",paleturquoise:"#AFEEEE",lightsteelblue:"#B0C4DE",powderblue:"#B0E0E6",firebrick:"#B22222",darkgoldenrod:"#B8860B",mediumorchid:"#BA55D3",rosybrown:"#BC8F8F",darkkhaki:"#BDB76B",mediumvioletred:"#C71585",indianred:"#CD5C5C",peru:"#CD853F",chocolate:"#D2691E",tan:"#D2B48C",lightgray:"#D3D3D3",lightgrey:"#D3D3D3",thistle:"#D8BFD8",orchid:"#DA70D6",goldenrod:"#DAA520",palevioletred:"#DB7093",crimson:"#DC143C",gainsboro:"#DCDCDC",plum:"#DDA0DD",burlywood:"#DEB887",lightcyan:"#E0FFFF",lavender:"#E6E6FA",darksalmon:"#E9967A",violet:"#EE82EE",palegoldenrod:"#EEE8AA",lightcoral:"#F08080",khaki:"#F0E68C",aliceblue:"#F0F8FF",honeydew:"#F0FFF0",azure:"#F0FFFF",sandybrown:"#F4A460",wheat:"#F5DEB3",beige:"#F5F5DC",whitesmoke:"#F5F5F5",mintcream:"#F5FFFA",ghostwhite:"#F8F8FF",salmon:"#FA8072",antiquewhite:"#FAEBD7",linen:"#FAF0E6",lightgoldenrodyellow:"#FAFAD2",oldlace:"#FDF5E6",magenta:"#FF00FF",deeppink:"#FF1493",orangered:"#FF4500",tomato:"#FF6347",hotpink:"#FF69B4",coral:"#FF7F50",darkorange:"#FF8C00",lightsalmon:"#FFA07A",orange:"#FFA500",lightpink:"#FFB6C1",pink:"#FFC0CB",gold:"#FFD700",peachpuff:"#FFDAB9",navajowhite:"#FFDEAD",moccasin:"#FFE4B5",bisque:"#FFE4C4",mistyrose:"#FFE4E1",blanchedalmond:"#FFEBCD",papayawhip:"#FFEFD5",lavenderblush:"#FFF0F5",seashell:"#FFF5EE",cornsilk:"#FFF8DC",lemonchiffon:"#FFFACD",floralwhite:"#FFFAF0",snow:"#FFFAFA",lightyellow:"#FFFFE0",ivory:"#FFFFF0"}},8941:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cubicInOut=t.cubicOut=t.cubicIn=t.quadraticInOut=t.quadraticOut=t.quadraticIn=t.linear=void 0,t.linear=function(e){return e},t.quadraticIn=function(e){return e*e},t.quadraticOut=function(e){return e*(2-e)},t.quadraticInOut=function(e){return(e*=2)<1?.5*e*e:-.5*(--e*(e-2)-1)},t.cubicIn=function(e){return e*e*e},t.cubicOut=function(e){return--e*e*e+1},t.cubicInOut=function(e){return(e*=2)<1?.5*e*e*e:.5*((e-=2)*e*e+2)};var n={linear:t.linear,quadraticIn:t.quadraticIn,quadraticOut:t.quadraticOut,quadraticInOut:t.quadraticInOut,cubicIn:t.cubicIn,cubicOut:t.cubicOut,cubicInOut:t.cubicInOut};t.default=n},9822:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.doEdgeCollideWithPoint=t.isPixelColored=void 0,t.isPixelColored=function(e,t,n){var r=new Uint8Array(4);return e.readPixels(t,e.drawingBufferHeight-n,1,1,e.RGBA,e.UNSIGNED_BYTE,r),r[3]>0},t.doEdgeCollideWithPoint=function(e,t,n,r,i,o,a){return!(e<n-a&&e<i-a||t<r-a&&t<o-a||e>n+a&&e>i+a||t>r+a&&t>o+a||!(Math.abs((i-n)*(r-t)-(n-e)*(o-r))/Math.sqrt(Math.pow(i-n,2)+Math.pow(o-r,2))<a/2))}},4524:function(e,t,n){"use strict";var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.validateGraph=t.canUse32BitsIndices=t.extractPixel=t.getMatrixImpact=t.matrixFromCamera=t.getCorrectionRatio=t.floatColor=t.floatArrayColor=t.parseColor=t.zIndexOrdering=t.createNormalizationFunction=t.graphExtent=t.getPixelRatio=t.createElement=t.cancelFrame=t.requestFrame=t.assignDeep=t.assign=t.isPlainObject=void 0;var o=i(n(6186)),a=n(5132),s=n(8109);function u(e){return"object"==typeof e&&null!==e&&e.constructor===Object}t.isPlainObject=u,t.assign=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e=e||{};for(var r=0,i=t.length;r<i;r++){var o=t[r];o&&Object.assign(e,o)}return e},t.assignDeep=function e(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];t=t||{};for(var i=0,o=n.length;i<o;i++){var a=n[i];if(a)for(var s in a)u(a[s])?t[s]=e(t[s],a[s]):t[s]=a[s]}return t},t.requestFrame="undefined"!=typeof requestAnimationFrame?function(e){return requestAnimationFrame(e)}:function(e){return setTimeout(e,0)},t.cancelFrame="undefined"!=typeof cancelAnimationFrame?function(e){return cancelAnimationFrame(e)}:function(e){return clearTimeout(e)},t.createElement=function(e,t,n){var r=document.createElement(e);if(t)for(var i in t)r.style[i]=t[i];if(n)for(var i in n)r.setAttribute(i,n[i]);return r},t.getPixelRatio=function(){return void 0!==window.devicePixelRatio?window.devicePixelRatio:1},t.graphExtent=function(e){if(!e.order)return{x:[0,1],y:[0,1]};var t=1/0,n=-1/0,r=1/0,i=-1/0;return e.forEachNode((function(e,o){var a=o.x,s=o.y;a<t&&(t=a),a>n&&(n=a),s<r&&(r=s),s>i&&(i=s)})),{x:[t,n],y:[r,i]}},t.createNormalizationFunction=function(e){var t=r(e.x,2),n=t[0],i=t[1],o=r(e.y,2),a=o[0],s=o[1],u=Math.max(i-n,s-a),l=(i+n)/2,c=(s+a)/2;(0===u||Math.abs(u)===1/0||isNaN(u))&&(u=1),isNaN(l)&&(l=0),isNaN(c)&&(c=0);var d=function(e){return{x:.5+(e.x-l)/u,y:.5+(e.y-c)/u}};return d.applyTo=function(e){e.x=.5+(e.x-l)/u,e.y=.5+(e.y-c)/u},d.inverse=function(e){return{x:l+u*(e.x-.5),y:c+u*(e.y-.5)}},d.ratio=u,d},t.zIndexOrdering=function(e,t,n){return n.sort((function(e,n){var r=t(e)||0,i=t(n)||0;return r<i?-1:r>i?1:0}))};var l=new Int8Array(4),c=new Int32Array(l.buffer,0,1),d=new Float32Array(l.buffer,0,1),f=/^\s*rgba?\s*\(/,h=/^\s*rgba?\s*\(\s*([0-9]*)\s*,\s*([0-9]*)\s*,\s*([0-9]*)(?:\s*,\s*(.*)?)?\)\s*$/;function p(e){var t=0,n=0,r=0,i=1;if("#"===e[0])4===e.length?(t=parseInt(e.charAt(1)+e.charAt(1),16),n=parseInt(e.charAt(2)+e.charAt(2),16),r=parseInt(e.charAt(3)+e.charAt(3),16)):(t=parseInt(e.charAt(1)+e.charAt(2),16),n=parseInt(e.charAt(3)+e.charAt(4),16),r=parseInt(e.charAt(5)+e.charAt(6),16)),9===e.length&&(i=parseInt(e.charAt(7)+e.charAt(8),16)/255);else if(f.test(e)){var o=e.match(h);o&&(t=+o[1],n=+o[2],r=+o[3],o[4]&&(i=+o[4]))}return{r:t,g:n,b:r,a:i}}t.parseColor=p;var g={};for(var m in s.HTML_COLORS)g[m]=y(s.HTML_COLORS[m]),g[s.HTML_COLORS[m]]=g[m];function y(e){if(void 0!==g[e])return g[e];var t=p(e),n=t.r,r=t.g,i=t.b,o=t.a;o=255*o|0,c[0]=4278190079&(o<<24|i<<16|r<<8|n);var a=d[0];return g[e]=a,a}function v(e,t){var n=e.height/e.width,r=t.height/t.width;return n<1&&r>1||n>1&&r<1?1:Math.min(Math.max(r,1/r),Math.max(1/n,n))}t.floatArrayColor=function(e){var t=p(e=s.HTML_COLORS[e]||e),n=t.r,r=t.g,i=t.b,o=t.a;return new Float32Array([n/255,r/255,i/255,o])},t.floatColor=y,t.getCorrectionRatio=v,t.matrixFromCamera=function(e,t,n,r,i){var o=e.angle,s=e.ratio,u=e.x,l=e.y,c=t.width,d=t.height,f=(0,a.identity)(),h=Math.min(c,d)-2*r,p=v(t,n);return i?((0,a.multiply)(f,(0,a.translate)((0,a.identity)(),u,l)),(0,a.multiply)(f,(0,a.scale)((0,a.identity)(),s)),(0,a.multiply)(f,(0,a.rotate)((0,a.identity)(),o)),(0,a.multiply)(f,(0,a.scale)((0,a.identity)(),c/h/2/p,d/h/2/p))):((0,a.multiply)(f,(0,a.scale)((0,a.identity)(),h/c*2*p,h/d*2*p)),(0,a.multiply)(f,(0,a.rotate)((0,a.identity)(),-o)),(0,a.multiply)(f,(0,a.scale)((0,a.identity)(),1/s)),(0,a.multiply)(f,(0,a.translate)((0,a.identity)(),-u,-l))),f},t.getMatrixImpact=function(e,t,n){var r=(0,a.multiplyVec2)(e,{x:Math.cos(t.angle),y:Math.sin(t.angle)},0),i=r.x,o=r.y;return 1/Math.sqrt(Math.pow(i,2)+Math.pow(o,2))/n.width},t.extractPixel=function(e,t,n,r){var i=r||new Uint8Array(4);return e.readPixels(t,n,1,1,e.RGBA,e.UNSIGNED_BYTE,i),i},t.canUse32BitsIndices=function(e){return"undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext||!!e.getExtension("OES_element_index_uint")},t.validateGraph=function(e){if(!(0,o.default)(e))throw new Error("Sigma: invalid graph instance.");e.forEachNode((function(e,t){if(!Number.isFinite(t.x)||!Number.isFinite(t.y))throw new Error("Sigma: Coordinates of node ".concat(e," are invalid. A node must have a numeric 'x' and 'y' attribute."))}))}},5132:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.multiplyVec2=t.multiply=t.translate=t.rotate=t.scale=t.identity=void 0,t.identity=function(){return Float32Array.of(1,0,0,0,1,0,0,0,1)},t.scale=function(e,t,n){return e[0]=t,e[4]="number"==typeof n?n:t,e},t.rotate=function(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=n,e[3]=-n,e[4]=r,e},t.translate=function(e,t,n){return e[6]=t,e[7]=n,e},t.multiply=function(e,t){var n=e[0],r=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=e[6],l=e[7],c=e[8],d=t[0],f=t[1],h=t[2],p=t[3],g=t[4],m=t[5],y=t[6],v=t[7],b=t[8];return e[0]=d*n+f*o+h*u,e[1]=d*r+f*a+h*l,e[2]=d*i+f*s+h*c,e[3]=p*n+g*o+m*u,e[4]=p*r+g*a+m*l,e[5]=p*i+g*s+m*c,e[6]=y*n+v*o+b*u,e[7]=y*r+v*a+b*l,e[8]=y*i+v*s+b*c,e},t.multiplyVec2=function(e,t,n){void 0===n&&(n=1);var r=e[0],i=e[1],o=e[3],a=e[4],s=e[6],u=e[7],l=t.x,c=t.y;return{x:l*r+c*o+s*n,y:l*i+c*a+u*n}}},3379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},a=[],s=0;s<e.length;s++){var u=e[s],l=r.base?u[0]+r.base:u[0],c=o[l]||0,d="".concat(l," ").concat(c);o[l]=c+1;var f=n(d),h={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==f)t[f].references++,t[f].updater(h);else{var p=i(h,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:p,references:1})}a.push(d)}return a}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var s=n(o[a]);t[s].references--}for(var u=r(e,i),l=0;l<o.length;l++){var c=n(o[l]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=u}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},4836:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},7462:(e,t,n)=>{"use strict";function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}n.d(t,{Z:()=>r})},3366:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}n.d(t,{Z:()=>r})}},r={};function i(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={id:e,loaded:!1,exports:{}};return n[e].call(o.exports,o,o.exports,i),o.loaded=!0,o.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,i.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);i.r(o);var a={};e=e||[null,t({}),t([]),t(t)];for(var s=2&r&&n;"object"==typeof s&&!~e.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((e=>a[e]=()=>n[e]));return a.default=()=>n,i.d(o,a),o},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),i.nc=void 0,(()=>{"use strict";var e,t=i(7294),n=i.t(t,2),r=i(745);function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const a="popstate";function s(e,t){if(!1===e||null==e)throw new Error(t)}function u(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function l(e,t){return{usr:e.state,key:e.key,idx:t}}function c(e,t,n,r){return void 0===n&&(n=null),o({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?f(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function d(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function f(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var h;function p(e,t,n){void 0===n&&(n="/");let r=R(("string"==typeof t?f(t):t).pathname||"/",n);if(null==r)return null;let i=g(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(i);let o=null;for(let e=0;null==o&&e<i.length;++e)o=S(i[e],A(r));return o}function g(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let i=(e,i,o)=>{let a={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:i,route:e};a.relativePath.startsWith("/")&&(s(a.relativePath.startsWith(r),'Absolute route path "'+a.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),a.relativePath=a.relativePath.slice(r.length));let u=T([r,a.relativePath]),l=n.concat(a);e.children&&e.children.length>0&&(s(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+u+'".'),g(e.children,t,l,u)),(null!=e.path||e.index)&&t.push({path:u,score:E(u,e.index),routesMeta:l})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of m(e.path))i(e,t,n);else i(e,t)})),t}function m(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,i=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return i?[o,""]:[o];let a=m(r.join("/")),s=[];return s.push(...a.map((e=>""===e?o:[o,e].join("/")))),i&&s.push(...a),s.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(h||(h={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const y=/^:\w+$/,v=3,b=2,w=1,_=10,x=-2,k=e=>"*"===e;function E(e,t){let n=e.split("/"),r=n.length;return n.some(k)&&(r+=x),t&&(r+=b),n.filter((e=>!k(e))).reduce(((e,t)=>e+(y.test(t)?v:""===t?w:_)),r)}function S(e,t){let{routesMeta:n}=e,r={},i="/",o=[];for(let e=0;e<n.length;++e){let a=n[e],s=e===n.length-1,u="/"===i?t:t.slice(i.length)||"/",l=C({path:a.relativePath,caseSensitive:a.caseSensitive,end:s},u);if(!l)return null;Object.assign(r,l.params);let c=a.route;o.push({params:r,pathname:T([i,l.pathname]),pathnameBase:L(T([i,l.pathnameBase])),route:c}),"/"!==l.pathnameBase&&(i=T([i,l.pathnameBase]))}return o}function C(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),u("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],i="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,t)=>(r.push(t),"/([^\\/]+)")));return e.endsWith("*")?(r.push("*"),i+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?i+="\\/*$":""!==e&&"/"!==e&&(i+="(?:(?=\\/|$))"),[new RegExp(i,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),i=t.match(n);if(!i)return null;let o=i[0],a=o.replace(/(.)\/+$/,"$1"),s=i.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=s[n]||"";a=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return u(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(s[n]||"",t),e}),{}),pathname:o,pathnameBase:a,pattern:e}}function A(e){try{return decodeURI(e)}catch(t){return u(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function R(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function P(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}const T=e=>e.join("/").replace(/\/\/+/g,"/"),L=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),O=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",M=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const N=["post","put","patch","delete"],z=(new Set(N),["get",...N]);function F(){return F=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},F.apply(this,arguments)}new Set(z),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const D=t.createContext(null),$=t.createContext(null),j=t.createContext(null),I=t.createContext(null),G=t.createContext({outlet:null,matches:[],isDataRoute:!1}),B=t.createContext(null);function U(e,n){let{relative:r}=void 0===n?{}:n;Z()||s(!1);let{basename:i,navigator:a}=t.useContext(j),{hash:u,pathname:l,search:c}=function(e,n){let{relative:r}=void 0===n?{}:n,{matches:i}=t.useContext(G),{pathname:a}=W(),u=JSON.stringify(function(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}(i).map((e=>e.pathnameBase)));return t.useMemo((()=>function(e,t,n,r){let i;void 0===r&&(r=!1),"string"==typeof e?i=f(e):(i=o({},e),s(!i.pathname||!i.pathname.includes("?"),P("?","pathname","search",i)),s(!i.pathname||!i.pathname.includes("#"),P("#","pathname","hash",i)),s(!i.search||!i.search.includes("#"),P("#","search","hash",i)));let a,u=""===e||""===i.pathname,l=u?"/":i.pathname;if(r||null==l)a=n;else{let e=t.length-1;if(l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;i.pathname=t.join("/")}a=e>=0?t[e]:"/"}let c=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:i=""}="string"==typeof e?f(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:O(r),hash:M(i)}}(i,a),d=l&&"/"!==l&&l.endsWith("/"),h=(u||"."===l)&&n.endsWith("/");return c.pathname.endsWith("/")||!d&&!h||(c.pathname+="/"),c}(e,JSON.parse(u),a,"path"===r)),[e,u,a,r])}(e,{relative:r}),d=l;return"/"!==i&&(d="/"===l?i:T([i,l])),a.createHref({pathname:d,search:c,hash:u})}function Z(){return null!=t.useContext(I)}function W(){return Z()||s(!1),t.useContext(I).location}function H(n,r,i){Z()||s(!1);let{navigator:o}=t.useContext(j),{matches:a}=t.useContext(G),u=a[a.length-1],l=u?u.params:{},c=(u&&u.pathname,u?u.pathnameBase:"/");u&&u.route;let d,h=W();if(r){var g;let e="string"==typeof r?f(r):r;"/"===c||(null==(g=e.pathname)?void 0:g.startsWith(c))||s(!1),d=e}else d=h;let m=d.pathname||"/",y=p(n,{pathname:"/"===c?m:m.slice(c.length)||"/"}),v=function(e,n,r){var i;if(void 0===n&&(n=[]),void 0===r&&(r=null),null==e){var o;if(null==(o=r)||!o.errors)return null;e=r.matches}let a=e,u=null==(i=r)?void 0:i.errors;if(null!=u){let e=a.findIndex((e=>e.route.id&&(null==u?void 0:u[e.route.id])));e>=0||s(!1),a=a.slice(0,Math.min(a.length,e+1))}return a.reduceRight(((e,i,o)=>{let s=i.route.id?null==u?void 0:u[i.route.id]:null,l=null;r&&(l=i.route.errorElement||q);let c=n.concat(a.slice(0,o+1)),d=()=>{let n;return n=s?l:i.route.Component?t.createElement(i.route.Component,null):i.route.element?i.route.element:e,t.createElement(Y,{match:i,routeContext:{outlet:e,matches:c,isDataRoute:null!=r},children:n})};return r&&(i.route.ErrorBoundary||i.route.errorElement||0===o)?t.createElement(K,{location:r.location,revalidation:r.revalidation,component:l,error:s,children:d(),routeContext:{outlet:null,matches:c,isDataRoute:!0}}):d()}),null)}(y&&y.map((e=>Object.assign({},e,{params:Object.assign({},l,e.params),pathname:T([c,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:T([c,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),a,i);return r&&v?t.createElement(I.Provider,{value:{location:F({pathname:"/",search:"",hash:"",state:null,key:"default"},d),navigationType:e.Pop}},v):v}function V(){let e=function(){var e;let n=t.useContext(B),r=function(e){let n=t.useContext($);return n||s(!1),n}(X.UseRouteError),i=function(e){let n=function(e){let n=t.useContext(G);return n||s(!1),n}(),r=n.matches[n.matches.length-1];return r.route.id||s(!1),r.route.id}(X.UseRouteError);return n||(null==(e=r.errors)?void 0:e[i])}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,i={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:i},r):null,null)}const q=t.createElement(V,null);class K extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?t.createElement(G.Provider,{value:this.props.routeContext},t.createElement(B.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function Y(e){let{routeContext:n,match:r,children:i}=e,o=t.useContext(D);return o&&o.static&&o.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(o.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(G.Provider,{value:n},i)}var Q,X,J;function ee(e){s(!1)}function te(n){let{basename:r="/",children:i=null,location:o,navigationType:a=e.Pop,navigator:u,static:l=!1}=n;Z()&&s(!1);let c=r.replace(/^\/*/,"/"),d=t.useMemo((()=>({basename:c,navigator:u,static:l})),[c,u,l]);"string"==typeof o&&(o=f(o));let{pathname:h="/",search:p="",hash:g="",state:m=null,key:y="default"}=o,v=t.useMemo((()=>{let e=R(h,c);return null==e?null:{location:{pathname:e,search:p,hash:g,state:m,key:y},navigationType:a}}),[c,h,p,g,m,y,a]);return null==v?null:t.createElement(j.Provider,{value:d},t.createElement(I.Provider,{children:i,value:v}))}function ne(e){let{children:t,location:n}=e;return H(re(t),n)}function re(e,n){void 0===n&&(n=[]);let r=[];return t.Children.forEach(e,((e,i)=>{if(!t.isValidElement(e))return;let o=[...n,i];if(e.type===t.Fragment)return void r.push.apply(r,re(e.props.children,o));e.type!==ee&&s(!1),e.props.index&&e.props.children&&s(!1);let a={id:e.props.id||o.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(a.children=re(e.props.children,o)),r.push(a)})),r}!function(e){e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate"}(Q||(Q={})),function(e){e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId"}(X||(X={})),n.startTransition,function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(J||(J={})),new Promise((()=>{})),t.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const ie=n.startTransition;function oe(n){let{basename:r,children:i,future:h,window:p}=n,g=t.useRef();null==g.current&&(g.current=function(t){return void 0===t&&(t={}),function(t,n,r,i){void 0===i&&(i={});let{window:u=document.defaultView,v5Compat:f=!1}=i,h=u.history,p=e.Pop,g=null,m=y();function y(){return(h.state||{idx:null}).idx}function v(){p=e.Pop;let t=y(),n=null==t?null:t-m;m=t,g&&g({action:p,location:w.location,delta:n})}function b(e){let t="null"!==u.location.origin?u.location.origin:u.location.href,n="string"==typeof e?e:d(e);return s(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==m&&(m=0,h.replaceState(o({},h.state,{idx:m}),""));let w={get action(){return p},get location(){return t(u,h)},listen(e){if(g)throw new Error("A history only accepts one active listener");return u.addEventListener(a,v),g=e,()=>{u.removeEventListener(a,v),g=null}},createHref:e=>n(u,e),createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(t,n){p=e.Push;let i=c(w.location,t,n);r&&r(i,t),m=y()+1;let o=l(i,m),a=w.createHref(i);try{h.pushState(o,"",a)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;u.location.assign(a)}f&&g&&g({action:p,location:w.location,delta:1})},replace:function(t,n){p=e.Replace;let i=c(w.location,t,n);r&&r(i,t),m=y();let o=l(i,m),a=w.createHref(i);h.replaceState(o,"",a),f&&g&&g({action:p,location:w.location,delta:0})},go:e=>h.go(e)};return w}((function(e,t){let{pathname:n="/",search:r="",hash:i=""}=f(e.location.hash.substr(1));return c("",{pathname:n,search:r,hash:i},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:d(t))}),(function(e,t){u("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),t)}({window:p,v5Compat:!0}));let m=g.current,[y,v]=t.useState({action:m.action,location:m.location}),{v7_startTransition:b}=h||{},w=t.useCallback((e=>{b&&ie?ie((()=>v(e))):v(e)}),[v,b]);return t.useLayoutEffect((()=>m.listen(w)),[m,w]),t.createElement(te,{basename:r,children:i,location:y.location,navigationType:y.action,navigator:m})}var ae,se;"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement,function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher"}(ae||(ae={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(se||(se={}));var ue=i(3379),le=i.n(ue),ce=i(7795),de=i.n(ce),fe=i(569),he=i.n(fe),pe=i(3565),ge=i.n(pe),me=i(9216),ye=i.n(me),ve=i(4589),be=i.n(ve),we=i(5681),_e={};_e.styleTagTransform=be(),_e.setAttributes=ge(),_e.insert=he().bind(null,"head"),_e.domAPI=de(),_e.insertStyleElement=ye(),le()(we.Z,_e),we.Z&&we.Z.locals&&we.Z.locals;var xe=i(7462),ke=i(3366),Ee=i(6010),Se=i(9532),Ce=i(6523),Ae=i(9766),Re=i(8010);const Pe=["sx"];function Te(e){const{sx:t}=e,n=(0,ke.Z)(e,Pe),{systemProps:r,otherProps:i}=(e=>{var t,n;const r={systemProps:{},otherProps:{}},i=null!=(t=null==e||null==(n=e.theme)?void 0:n.unstable_sxConfig)?t:Re.Z;return Object.keys(e).forEach((t=>{i[t]?r.systemProps[t]=e[t]:r.otherProps[t]=e[t]})),r})(n);let o;return o=Array.isArray(t)?[r,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return(0,Ae.P)(n)?(0,xe.Z)({},r,n):r}:(0,xe.Z)({},r,t),(0,xe.Z)({},i,{sx:o})}var Le=i(6631),Oe=i(5893);const Me=["className","component"];var Ne=i(7078),ze=i(9617),Fe=i(606);const De=(0,ze.Z)(),$e=function(e={}){const{themeId:n,defaultTheme:r,defaultClassName:i="MuiBox-root",generateClassName:o}=e,a=(0,Se.ZP)("div",{shouldForwardProp:e=>"theme"!==e&&"sx"!==e&&"as"!==e})(Ce.Z);return t.forwardRef((function(e,t){const s=(0,Le.Z)(r),u=Te(e),{className:l,component:c="div"}=u,d=(0,ke.Z)(u,Me);return(0,Oe.jsx)(a,(0,xe.Z)({as:c,ref:t,className:(0,Ee.Z)(l,o?o(i):i),theme:n&&s[n]||s},d))}))}({themeId:Fe.Z,defaultTheme:De,defaultClassName:"MuiBox-root",generateClassName:Ne.Z.generate}),je=$e;var Ie=i(4780),Ge=i(4867);const Be=(0,i(2807).ZP)();var Ue=i(8805),Ze=i(6268),We=i(5408),He=i(2605);const Ve=["component","direction","spacing","divider","children","className","useFlexGap"],qe=(0,Ze.Z)(),Ke=Be("div",{name:"MuiStack",slot:"Root",overridesResolver:(e,t)=>t.root});function Ye(e){return(0,Ue.Z)({props:e,name:"MuiStack",defaultTheme:qe})}function Qe(e,n){const r=t.Children.toArray(e).filter(Boolean);return r.reduce(((e,i,o)=>(e.push(i),o<r.length-1&&e.push(t.cloneElement(n,{key:`separator-${o}`})),e)),[])}const Xe=({ownerState:e,theme:t})=>{let n=(0,xe.Z)({display:"flex",flexDirection:"column"},(0,We.k9)({theme:t},(0,We.P$)({values:e.direction,breakpoints:t.breakpoints.values}),(e=>({flexDirection:e}))));if(e.spacing){const r=(0,He.hB)(t),i=Object.keys(t.breakpoints.values).reduce(((t,n)=>(("object"==typeof e.spacing&&null!=e.spacing[n]||"object"==typeof e.direction&&null!=e.direction[n])&&(t[n]=!0),t)),{}),o=(0,We.P$)({values:e.direction,base:i}),a=(0,We.P$)({values:e.spacing,base:i});"object"==typeof o&&Object.keys(o).forEach(((e,t,n)=>{if(!o[e]){const r=t>0?o[n[t-1]]:"column";o[e]=r}}));const s=(t,n)=>{return e.useFlexGap?{gap:(0,He.NA)(r,t)}:{"& > :not(style) ~ :not(style)":{margin:0,[`margin${i=n?o[n]:e.direction,{row:"Left","row-reverse":"Right",column:"Top","column-reverse":"Bottom"}[i]}`]:(0,He.NA)(r,t)}};var i};n=(0,Ae.Z)(n,(0,We.k9)({theme:t},a,s))}return n=(0,We.dt)(t.breakpoints,n),n};var Je=i(948),et=i(1657);const tt=function(e={}){const{createStyledComponent:n=Ke,useThemeProps:r=Ye,componentName:i="MuiStack"}=e,o=n(Xe),a=t.forwardRef((function(e,t){const n=Te(r(e)),{component:a="div",direction:s="column",spacing:u=0,divider:l,children:c,className:d,useFlexGap:f=!1}=n,h=(0,ke.Z)(n,Ve),p={direction:s,spacing:u,useFlexGap:f},g=(0,Ie.Z)({root:["root"]},(e=>(0,Ge.Z)(i,e)),{});return(0,Oe.jsx)(o,(0,xe.Z)({as:a,ownerState:p,ref:t,className:(0,Ee.Z)(g.root,d)},h,{children:l?Qe(c,l):c}))}));return a}({createStyledComponent:(0,Je.ZP)("div",{name:"MuiStack",slot:"Root",overridesResolver:(e,t)=>t.root}),useThemeProps:e=>(0,et.Z)({props:e,name:"MuiStack"})}),nt=tt;var rt=i(8216),it=i(1588);function ot(e){return(0,Ge.Z)("MuiTypography",e)}(0,it.Z)("MuiTypography",["root","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","button","caption","overline","alignLeft","alignRight","alignCenter","alignJustify","noWrap","gutterBottom","paragraph"]);const at=["align","className","component","gutterBottom","noWrap","paragraph","variant","variantMapping"],st=(0,Je.ZP)("span",{name:"MuiTypography",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.variant&&t[n.variant],"inherit"!==n.align&&t[`align${(0,rt.Z)(n.align)}`],n.noWrap&&t.noWrap,n.gutterBottom&&t.gutterBottom,n.paragraph&&t.paragraph]}})((({theme:e,ownerState:t})=>(0,xe.Z)({margin:0},t.variant&&e.typography[t.variant],"inherit"!==t.align&&{textAlign:t.align},t.noWrap&&{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},t.gutterBottom&&{marginBottom:"0.35em"},t.paragraph&&{marginBottom:16}))),ut={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p",inherit:"p"},lt={primary:"primary.main",textPrimary:"text.primary",secondary:"secondary.main",textSecondary:"text.secondary",error:"error.main"},ct=t.forwardRef((function(e,t){const n=(0,et.Z)({props:e,name:"MuiTypography"}),r=(e=>lt[e]||e)(n.color),i=Te((0,xe.Z)({},n,{color:r})),{align:o="inherit",className:a,component:s,gutterBottom:u=!1,noWrap:l=!1,paragraph:c=!1,variant:d="body1",variantMapping:f=ut}=i,h=(0,ke.Z)(i,at),p=(0,xe.Z)({},i,{align:o,color:r,className:a,component:s,gutterBottom:u,noWrap:l,paragraph:c,variant:d,variantMapping:f}),g=s||(c?"p":f[d]||ut[d])||"span",m=(e=>{const{align:t,gutterBottom:n,noWrap:r,paragraph:i,variant:o,classes:a}=e,s={root:["root",o,"inherit"!==e.align&&`align${(0,rt.Z)(t)}`,n&&"gutterBottom",r&&"noWrap",i&&"paragraph"]};return(0,Ie.Z)(s,ot,a)})(p);return(0,Oe.jsx)(st,(0,xe.Z)({as:g,ref:t,ownerState:p,className:(0,Ee.Z)(m.root,a)},h))}));function dt(e){var n=e.graphError;return t.createElement(je,{display:"flex",justifyContent:"center",alignItems:"center",height:"100%"},t.createElement(nt,{alignItems:"center"},t.createElement(ct,{variant:"h3",gutterBottom:!0},"Loading Error :("),t.createElement(ct,{variant:"body1",gutterBottom:!0},n.message)))}i(7278);var ft=i(6797);function ht(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return(0,ft.O)(t)}i(6751),i(8679);var pt=function(){var e=ht.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}};function gt(e){return(0,Ge.Z)("MuiCircularProgress",e)}(0,it.Z)("MuiCircularProgress",["root","determinate","indeterminate","colorPrimary","colorSecondary","svg","circle","circleDeterminate","circleIndeterminate","circleDisableShrink"]);const mt=["className","color","disableShrink","size","style","thickness","value","variant"];let yt,vt,bt,wt,_t=e=>e;const xt=pt(yt||(yt=_t`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`)),kt=pt(vt||(vt=_t`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`)),Et=(0,Je.ZP)("span",{name:"MuiCircularProgress",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`color${(0,rt.Z)(n.color)}`]]}})((({ownerState:e,theme:t})=>(0,xe.Z)({display:"inline-block"},"determinate"===e.variant&&{transition:t.transitions.create("transform")},"inherit"!==e.color&&{color:(t.vars||t).palette[e.color].main})),(({ownerState:e})=>"indeterminate"===e.variant&&ht(bt||(bt=_t`
      animation: ${0} 1.4s linear infinite;
    `),xt))),St=(0,Je.ZP)("svg",{name:"MuiCircularProgress",slot:"Svg",overridesResolver:(e,t)=>t.svg})({display:"block"}),Ct=(0,Je.ZP)("circle",{name:"MuiCircularProgress",slot:"Circle",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.circle,t[`circle${(0,rt.Z)(n.variant)}`],n.disableShrink&&t.circleDisableShrink]}})((({ownerState:e,theme:t})=>(0,xe.Z)({stroke:"currentColor"},"determinate"===e.variant&&{transition:t.transitions.create("stroke-dashoffset")},"indeterminate"===e.variant&&{strokeDasharray:"80px, 200px",strokeDashoffset:0})),(({ownerState:e})=>"indeterminate"===e.variant&&!e.disableShrink&&ht(wt||(wt=_t`
      animation: ${0} 1.4s ease-in-out infinite;
    `),kt))),At=t.forwardRef((function(e,t){const n=(0,et.Z)({props:e,name:"MuiCircularProgress"}),{className:r,color:i="primary",disableShrink:o=!1,size:a=40,style:s,thickness:u=3.6,value:l=0,variant:c="indeterminate"}=n,d=(0,ke.Z)(n,mt),f=(0,xe.Z)({},n,{color:i,disableShrink:o,size:a,thickness:u,value:l,variant:c}),h=(e=>{const{classes:t,variant:n,color:r,disableShrink:i}=e,o={root:["root",n,`color${(0,rt.Z)(r)}`],svg:["svg"],circle:["circle",`circle${(0,rt.Z)(n)}`,i&&"circleDisableShrink"]};return(0,Ie.Z)(o,gt,t)})(f),p={},g={},m={};if("determinate"===c){const e=2*Math.PI*((44-u)/2);p.strokeDasharray=e.toFixed(3),m["aria-valuenow"]=Math.round(l),p.strokeDashoffset=`${((100-l)/100*e).toFixed(3)}px`,g.transform="rotate(-90deg)"}return(0,Oe.jsx)(Et,(0,xe.Z)({className:(0,Ee.Z)(h.root,r),style:(0,xe.Z)({width:a,height:a},g,s),ownerState:f,ref:t,role:"progressbar"},m,d,{children:(0,Oe.jsx)(St,{className:h.svg,ownerState:f,viewBox:"22 22 44 44",children:(0,Oe.jsx)(Ct,{className:h.circle,style:p,ownerState:f,cx:44,cy:44,r:(44-u)/2,fill:"none",strokeWidth:u})})}))})),Rt=At;function Pt(){return t.createElement(je,{display:"flex",justifyContent:"center",alignItems:"center",height:"100%"},t.createElement(nt,{alignItems:"center"},t.createElement(ct,{variant:"h3",gutterBottom:!0},"Loading"),t.createElement(Rt,{color:"warning"})))}var Tt=i(522),Lt={};Lt.styleTagTransform=be(),Lt.setAttributes=ge(),Lt.insert=he().bind(null,"head"),Lt.domAPI=de(),Lt.insertStyleElement=ye(),le()(Tt.Z,Lt),Tt.Z&&Tt.Z.locals&&Tt.Z.locals;var Ot=i(6486),Mt=i(7187),Nt=i(4993),zt=i(641),Ft=i(3011);let Dt=function(){const e=arguments[0];for(let t=1,n=arguments.length;t<n;t++)if(arguments[t])for(const n in arguments[t])e[n]=arguments[t][n];return e};function $t(e,t,n,r){const i=e._nodes.get(t);let o=null;return i?(o="mixed"===r?i.out&&i.out[n]||i.undirected&&i.undirected[n]:"directed"===r?i.out&&i.out[n]:i.undirected&&i.undirected[n],o):o}function jt(e){return"object"==typeof e&&null!==e}function It(e){let t;for(t in e)return!1;return!0}function Gt(e,t,n){Object.defineProperty(e,t,{enumerable:!1,configurable:!1,writable:!0,value:n})}function Bt(e,t,n){const r={enumerable:!0,configurable:!0};"function"==typeof n?r.get=n:(r.value=n,r.writable=!1),Object.defineProperty(e,t,r)}function Ut(e){return!(!jt(e)||e.attributes&&!Array.isArray(e.attributes))}"function"==typeof Object.assign&&(Dt=Object.assign);class Zt extends Error{constructor(e){super(),this.name="GraphError",this.message=e}}class Wt extends Zt{constructor(e){super(e),this.name="InvalidArgumentsGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,Wt.prototype.constructor)}}class Ht extends Zt{constructor(e){super(e),this.name="NotFoundGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,Ht.prototype.constructor)}}class Vt extends Zt{constructor(e){super(e),this.name="UsageGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,Vt.prototype.constructor)}}function qt(e,t){this.key=e,this.attributes=t,this.clear()}function Kt(e,t){this.key=e,this.attributes=t,this.clear()}function Yt(e,t){this.key=e,this.attributes=t,this.clear()}function Qt(e,t,n,r,i){this.key=t,this.attributes=i,this.undirected=e,this.source=n,this.target=r}qt.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.undirectedDegree=0,this.undirectedLoops=0,this.directedLoops=0,this.in={},this.out={},this.undirected={}},Kt.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.directedLoops=0,this.in={},this.out={}},Yt.prototype.clear=function(){this.undirectedDegree=0,this.undirectedLoops=0,this.undirected={}},Qt.prototype.attach=function(){let e="out",t="in";this.undirected&&(e=t="undirected");const n=this.source.key,r=this.target.key;this.source[e][r]=this,this.undirected&&n===r||(this.target[t][n]=this)},Qt.prototype.attachMulti=function(){let e="out",t="in";const n=this.source.key,r=this.target.key;this.undirected&&(e=t="undirected");const i=this.source[e],o=i[r];if(void 0===o)return i[r]=this,void(this.undirected&&n===r||(this.target[t][n]=this));o.previous=this,this.next=o,i[r]=this,this.target[t][n]=this},Qt.prototype.detach=function(){const e=this.source.key,t=this.target.key;let n="out",r="in";this.undirected&&(n=r="undirected"),delete this.source[n][t],delete this.target[r][e]},Qt.prototype.detachMulti=function(){const e=this.source.key,t=this.target.key;let n="out",r="in";this.undirected&&(n=r="undirected"),void 0===this.previous?void 0===this.next?(delete this.source[n][t],delete this.target[r][e]):(this.next.previous=void 0,this.source[n][t]=this.next,this.target[r][e]=this.next):(this.previous.next=this.next,void 0!==this.next&&(this.next.previous=this.previous))};function Xt(e,t,n,r,i,o,a){let s,u,l,c;if(r=""+r,0===n){if(s=e._nodes.get(r),!s)throw new Ht(`Graph.${t}: could not find the "${r}" node in the graph.`);l=i,c=o}else if(3===n){if(i=""+i,u=e._edges.get(i),!u)throw new Ht(`Graph.${t}: could not find the "${i}" edge in the graph.`);const n=u.source.key,d=u.target.key;if(r===n)s=u.target;else{if(r!==d)throw new Ht(`Graph.${t}: the "${r}" node is not attached to the "${i}" edge (${n}, ${d}).`);s=u.source}l=o,c=a}else{if(u=e._edges.get(r),!u)throw new Ht(`Graph.${t}: could not find the "${r}" edge in the graph.`);s=1===n?u.source:u.target,l=i,c=o}return[s,l,c]}const Jt=[{name:e=>`get${e}Attribute`,attacher:function(e,t,n){e.prototype[t]=function(e,r,i){const[o,a]=Xt(this,t,n,e,r,i);return o.attributes[a]}}},{name:e=>`get${e}Attributes`,attacher:function(e,t,n){e.prototype[t]=function(e,r){const[i]=Xt(this,t,n,e,r);return i.attributes}}},{name:e=>`has${e}Attribute`,attacher:function(e,t,n){e.prototype[t]=function(e,r,i){const[o,a]=Xt(this,t,n,e,r,i);return o.attributes.hasOwnProperty(a)}}},{name:e=>`set${e}Attribute`,attacher:function(e,t,n){e.prototype[t]=function(e,r,i,o){const[a,s,u]=Xt(this,t,n,e,r,i,o);return a.attributes[s]=u,this.emit("nodeAttributesUpdated",{key:a.key,type:"set",attributes:a.attributes,name:s}),this}}},{name:e=>`update${e}Attribute`,attacher:function(e,t,n){e.prototype[t]=function(e,r,i,o){const[a,s,u]=Xt(this,t,n,e,r,i,o);if("function"!=typeof u)throw new Wt(`Graph.${t}: updater should be a function.`);const l=a.attributes,c=u(l[s]);return l[s]=c,this.emit("nodeAttributesUpdated",{key:a.key,type:"set",attributes:a.attributes,name:s}),this}}},{name:e=>`remove${e}Attribute`,attacher:function(e,t,n){e.prototype[t]=function(e,r,i){const[o,a]=Xt(this,t,n,e,r,i);return delete o.attributes[a],this.emit("nodeAttributesUpdated",{key:o.key,type:"remove",attributes:o.attributes,name:a}),this}}},{name:e=>`replace${e}Attributes`,attacher:function(e,t,n){e.prototype[t]=function(e,r,i){const[o,a]=Xt(this,t,n,e,r,i);if(!jt(a))throw new Wt(`Graph.${t}: provided attributes are not a plain object.`);return o.attributes=a,this.emit("nodeAttributesUpdated",{key:o.key,type:"replace",attributes:o.attributes}),this}}},{name:e=>`merge${e}Attributes`,attacher:function(e,t,n){e.prototype[t]=function(e,r,i){const[o,a]=Xt(this,t,n,e,r,i);if(!jt(a))throw new Wt(`Graph.${t}: provided attributes are not a plain object.`);return Dt(o.attributes,a),this.emit("nodeAttributesUpdated",{key:o.key,type:"merge",attributes:o.attributes,data:a}),this}}},{name:e=>`update${e}Attributes`,attacher:function(e,t,n){e.prototype[t]=function(e,r,i){const[o,a]=Xt(this,t,n,e,r,i);if("function"!=typeof a)throw new Wt(`Graph.${t}: provided updater is not a function.`);return o.attributes=a(o.attributes),this.emit("nodeAttributesUpdated",{key:o.key,type:"update",attributes:o.attributes}),this}}}],en=[{name:e=>`get${e}Attribute`,attacher:function(e,t,n){e.prototype[t]=function(e,r){let i;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new Vt(`Graph.${t}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new Vt(`Graph.${t}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);const o=""+e,a=""+r;if(r=arguments[2],i=$t(this,o,a,n),!i)throw new Ht(`Graph.${t}: could not find an edge for the given path ("${o}" - "${a}").`)}else{if("mixed"!==n)throw new Vt(`Graph.${t}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(e=""+e,i=this._edges.get(e),!i)throw new Ht(`Graph.${t}: could not find the "${e}" edge in the graph.`)}return i.attributes[r]}}},{name:e=>`get${e}Attributes`,attacher:function(e,t,n){e.prototype[t]=function(e){let r;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new Vt(`Graph.${t}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>1){if(this.multi)throw new Vt(`Graph.${t}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);const i=""+e,o=""+arguments[1];if(r=$t(this,i,o,n),!r)throw new Ht(`Graph.${t}: could not find an edge for the given path ("${i}" - "${o}").`)}else{if("mixed"!==n)throw new Vt(`Graph.${t}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(e=""+e,r=this._edges.get(e),!r)throw new Ht(`Graph.${t}: could not find the "${e}" edge in the graph.`)}return r.attributes}}},{name:e=>`has${e}Attribute`,attacher:function(e,t,n){e.prototype[t]=function(e,r){let i;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new Vt(`Graph.${t}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new Vt(`Graph.${t}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);const o=""+e,a=""+r;if(r=arguments[2],i=$t(this,o,a,n),!i)throw new Ht(`Graph.${t}: could not find an edge for the given path ("${o}" - "${a}").`)}else{if("mixed"!==n)throw new Vt(`Graph.${t}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(e=""+e,i=this._edges.get(e),!i)throw new Ht(`Graph.${t}: could not find the "${e}" edge in the graph.`)}return i.attributes.hasOwnProperty(r)}}},{name:e=>`set${e}Attribute`,attacher:function(e,t,n){e.prototype[t]=function(e,r,i){let o;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new Vt(`Graph.${t}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>3){if(this.multi)throw new Vt(`Graph.${t}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);const a=""+e,s=""+r;if(r=arguments[2],i=arguments[3],o=$t(this,a,s,n),!o)throw new Ht(`Graph.${t}: could not find an edge for the given path ("${a}" - "${s}").`)}else{if("mixed"!==n)throw new Vt(`Graph.${t}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(e=""+e,o=this._edges.get(e),!o)throw new Ht(`Graph.${t}: could not find the "${e}" edge in the graph.`)}return o.attributes[r]=i,this.emit("edgeAttributesUpdated",{key:o.key,type:"set",attributes:o.attributes,name:r}),this}}},{name:e=>`update${e}Attribute`,attacher:function(e,t,n){e.prototype[t]=function(e,r,i){let o;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new Vt(`Graph.${t}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>3){if(this.multi)throw new Vt(`Graph.${t}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);const a=""+e,s=""+r;if(r=arguments[2],i=arguments[3],o=$t(this,a,s,n),!o)throw new Ht(`Graph.${t}: could not find an edge for the given path ("${a}" - "${s}").`)}else{if("mixed"!==n)throw new Vt(`Graph.${t}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(e=""+e,o=this._edges.get(e),!o)throw new Ht(`Graph.${t}: could not find the "${e}" edge in the graph.`)}if("function"!=typeof i)throw new Wt(`Graph.${t}: updater should be a function.`);return o.attributes[r]=i(o.attributes[r]),this.emit("edgeAttributesUpdated",{key:o.key,type:"set",attributes:o.attributes,name:r}),this}}},{name:e=>`remove${e}Attribute`,attacher:function(e,t,n){e.prototype[t]=function(e,r){let i;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new Vt(`Graph.${t}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new Vt(`Graph.${t}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);const o=""+e,a=""+r;if(r=arguments[2],i=$t(this,o,a,n),!i)throw new Ht(`Graph.${t}: could not find an edge for the given path ("${o}" - "${a}").`)}else{if("mixed"!==n)throw new Vt(`Graph.${t}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(e=""+e,i=this._edges.get(e),!i)throw new Ht(`Graph.${t}: could not find the "${e}" edge in the graph.`)}return delete i.attributes[r],this.emit("edgeAttributesUpdated",{key:i.key,type:"remove",attributes:i.attributes,name:r}),this}}},{name:e=>`replace${e}Attributes`,attacher:function(e,t,n){e.prototype[t]=function(e,r){let i;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new Vt(`Graph.${t}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new Vt(`Graph.${t}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);const o=""+e,a=""+r;if(r=arguments[2],i=$t(this,o,a,n),!i)throw new Ht(`Graph.${t}: could not find an edge for the given path ("${o}" - "${a}").`)}else{if("mixed"!==n)throw new Vt(`Graph.${t}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(e=""+e,i=this._edges.get(e),!i)throw new Ht(`Graph.${t}: could not find the "${e}" edge in the graph.`)}if(!jt(r))throw new Wt(`Graph.${t}: provided attributes are not a plain object.`);return i.attributes=r,this.emit("edgeAttributesUpdated",{key:i.key,type:"replace",attributes:i.attributes}),this}}},{name:e=>`merge${e}Attributes`,attacher:function(e,t,n){e.prototype[t]=function(e,r){let i;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new Vt(`Graph.${t}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new Vt(`Graph.${t}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);const o=""+e,a=""+r;if(r=arguments[2],i=$t(this,o,a,n),!i)throw new Ht(`Graph.${t}: could not find an edge for the given path ("${o}" - "${a}").`)}else{if("mixed"!==n)throw new Vt(`Graph.${t}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(e=""+e,i=this._edges.get(e),!i)throw new Ht(`Graph.${t}: could not find the "${e}" edge in the graph.`)}if(!jt(r))throw new Wt(`Graph.${t}: provided attributes are not a plain object.`);return Dt(i.attributes,r),this.emit("edgeAttributesUpdated",{key:i.key,type:"merge",attributes:i.attributes,data:r}),this}}},{name:e=>`update${e}Attributes`,attacher:function(e,t,n){e.prototype[t]=function(e,r){let i;if("mixed"!==this.type&&"mixed"!==n&&n!==this.type)throw new Vt(`Graph.${t}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new Vt(`Graph.${t}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);const o=""+e,a=""+r;if(r=arguments[2],i=$t(this,o,a,n),!i)throw new Ht(`Graph.${t}: could not find an edge for the given path ("${o}" - "${a}").`)}else{if("mixed"!==n)throw new Vt(`Graph.${t}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(e=""+e,i=this._edges.get(e),!i)throw new Ht(`Graph.${t}: could not find the "${e}" edge in the graph.`)}if("function"!=typeof r)throw new Wt(`Graph.${t}: provided updater is not a function.`);return i.attributes=r(i.attributes),this.emit("edgeAttributesUpdated",{key:i.key,type:"update",attributes:i.attributes}),this}}}],tn=[{name:"edges",type:"mixed"},{name:"inEdges",type:"directed",direction:"in"},{name:"outEdges",type:"directed",direction:"out"},{name:"inboundEdges",type:"mixed",direction:"in"},{name:"outboundEdges",type:"mixed",direction:"out"},{name:"directedEdges",type:"directed"},{name:"undirectedEdges",type:"undirected"}];function nn(e,t,n,r){let i=!1;for(const o in t){if(o===r)continue;const a=t[o];if(i=n(a.key,a.attributes,a.source.key,a.target.key,a.source.attributes,a.target.attributes,a.undirected),e&&i)return a.key}}function rn(e,t,n,r){let i,o,a,s=!1;for(const u in t)if(u!==r){i=t[u];do{if(o=i.source,a=i.target,s=n(i.key,i.attributes,o.key,a.key,o.attributes,a.attributes,i.undirected),e&&s)return i.key;i=i.next}while(void 0!==i)}}function on(e,t){const n=Object.keys(e),r=n.length;let i,o=0;return new Nt((function(){do{if(i)i=i.next;else{if(o>=r)return{done:!0};const a=n[o++];if(a===t){i=void 0;continue}i=e[a]}}while(!i);return{done:!1,value:{edge:i.key,attributes:i.attributes,source:i.source.key,target:i.target.key,sourceAttributes:i.source.attributes,targetAttributes:i.target.attributes,undirected:i.undirected}}}))}function an(e,t,n,r){const i=t[n];if(!i)return;const o=i.source,a=i.target;return r(i.key,i.attributes,o.key,a.key,o.attributes,a.attributes,i.undirected)&&e?i.key:void 0}function sn(e,t,n,r){let i=t[n];if(!i)return;let o=!1;do{if(o=r(i.key,i.attributes,i.source.key,i.target.key,i.source.attributes,i.target.attributes,i.undirected),e&&o)return i.key;i=i.next}while(void 0!==i)}function un(e,t){let n=e[t];return void 0!==n.next?new Nt((function(){if(!n)return{done:!0};const e={edge:n.key,attributes:n.attributes,source:n.source.key,target:n.target.key,sourceAttributes:n.source.attributes,targetAttributes:n.target.attributes,undirected:n.undirected};return n=n.next,{done:!1,value:e}})):Nt.of({edge:n.key,attributes:n.attributes,source:n.source.key,target:n.target.key,sourceAttributes:n.source.attributes,targetAttributes:n.target.attributes,undirected:n.undirected})}function ln(e,t,n,r){if(0===t.size)return;const i="mixed"!==n&&n!==t.type,o="undirected"===n;let a,s,u=!1;const l=t._edges.values();for(;a=l.next(),!0!==a.done;){if(s=a.value,i&&s.undirected!==o)continue;const{key:t,attributes:n,source:l,target:c}=s;if(u=r(t,n,l.key,c.key,l.attributes,c.attributes,s.undirected),e&&u)return t}}function cn(e,t,n,r,i,o){const a=t?rn:nn;let s;if("undirected"!==n){if("out"!==r&&(s=a(e,i.in,o),e&&s))return s;if("in"!==r&&(s=a(e,i.out,o,r?void 0:i.key),e&&s))return s}if("directed"!==n&&(s=a(e,i.undirected,o),e&&s))return s}function dn(e,t,n,r,i,o,a){const s=n?sn:an;let u;if("undirected"!==t){if(void 0!==i.in&&"out"!==r&&(u=s(e,i.in,o,a),e&&u))return u;if(void 0!==i.out&&"in"!==r&&(r||i.key!==o)&&(u=s(e,i.out,o,a),e&&u))return u}if("directed"!==t&&void 0!==i.undirected&&(u=s(e,i.undirected,o,a),e&&u))return u}const fn=[{name:"neighbors",type:"mixed"},{name:"inNeighbors",type:"directed",direction:"in"},{name:"outNeighbors",type:"directed",direction:"out"},{name:"inboundNeighbors",type:"mixed",direction:"in"},{name:"outboundNeighbors",type:"mixed",direction:"out"},{name:"directedNeighbors",type:"directed"},{name:"undirectedNeighbors",type:"undirected"}];function hn(){this.A=null,this.B=null}function pn(e,t,n,r,i){for(const o in r){const a=r[o],s=a.source,u=a.target,l=s===n?u:s;if(t&&t.has(l.key))continue;const c=i(l.key,l.attributes);if(e&&c)return l.key}}function gn(e,t,n,r,i){if("mixed"!==t){if("undirected"===t)return pn(e,null,r,r.undirected,i);if("string"==typeof n)return pn(e,null,r,r[n],i)}const o=new hn;let a;if("undirected"!==t){if("out"!==n){if(a=pn(e,null,r,r.in,i),e&&a)return a;o.wrap(r.in)}if("in"!==n){if(a=pn(e,o,r,r.out,i),e&&a)return a;o.wrap(r.out)}}if("directed"!==t&&(a=pn(e,o,r,r.undirected,i),e&&a))return a}function mn(e,t,n){const r=Object.keys(n),i=r.length;let o=0;return new Nt((function(){let a=null;do{if(o>=i)return e&&e.wrap(n),{done:!0};const s=n[r[o++]],u=s.source,l=s.target;a=u===t?l:u,e&&e.has(a.key)&&(a=null)}while(null===a);return{done:!1,value:{neighbor:a.key,attributes:a.attributes}}}))}function yn(e,t,n,r,i){const o=r._nodes.values(),a=r.type;let s,u,l,c,d,f,h;for(;s=o.next(),!0!==s.done;){let r=!1;if(u=s.value,"undirected"!==a)for(l in c=u.out,c){d=c[l];do{if(f=d.target,r=!0,h=i(u.key,f.key,u.attributes,f.attributes,d.key,d.attributes,d.undirected),e&&h)return d;d=d.next}while(d)}if("directed"!==a)for(l in c=u.undirected,c)if(!(t&&u.key>l)){d=c[l];do{if(f=d.target,f.key!==l&&(f=d.source),r=!0,h=i(u.key,f.key,u.attributes,f.attributes,d.key,d.attributes,d.undirected),e&&h)return d;d=d.next}while(d)}if(n&&!r&&(h=i(u.key,null,u.attributes,null,null,null,null),e&&h))return null}}function vn(e){if(!jt(e))throw new Wt('Graph.import: invalid serialized node. A serialized node should be a plain object with at least a "key" property.');if(!("key"in e))throw new Wt("Graph.import: serialized node is missing its key.");if("attributes"in e&&(!jt(e.attributes)||null===e.attributes))throw new Wt("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.")}function bn(e){if(!jt(e))throw new Wt('Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a "source" & "target" property.');if(!("source"in e))throw new Wt("Graph.import: serialized edge is missing its source.");if(!("target"in e))throw new Wt("Graph.import: serialized edge is missing its target.");if("attributes"in e&&(!jt(e.attributes)||null===e.attributes))throw new Wt("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.");if("undirected"in e&&"boolean"!=typeof e.undirected)throw new Wt("Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.")}hn.prototype.wrap=function(e){null===this.A?this.A=e:null===this.B&&(this.B=e)},hn.prototype.has=function(e){return null!==this.A&&e in this.A||null!==this.B&&e in this.B};const wn=function(){let e=255&Math.floor(256*Math.random());return()=>e++}(),_n=new Set(["directed","undirected","mixed"]),xn=new Set(["domain","_events","_eventsCount","_maxListeners"]),kn={allowSelfLoops:!0,multi:!1,type:"mixed"};function En(e,t,n){const r=new e.NodeDataClass(t,n);return e._nodes.set(t,r),e.emit("nodeAdded",{key:t,attributes:n}),r}function Sn(e,t,n,r,i,o,a,s){if(!r&&"undirected"===e.type)throw new Vt(`Graph.${t}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`);if(r&&"directed"===e.type)throw new Vt(`Graph.${t}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`);if(s&&!jt(s))throw new Wt(`Graph.${t}: invalid attributes. Expecting an object but got "${s}"`);if(o=""+o,a=""+a,s=s||{},!e.allowSelfLoops&&o===a)throw new Vt(`Graph.${t}: source & target are the same ("${o}"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`);const u=e._nodes.get(o),l=e._nodes.get(a);if(!u)throw new Ht(`Graph.${t}: source node "${o}" not found.`);if(!l)throw new Ht(`Graph.${t}: target node "${a}" not found.`);const c={key:null,undirected:r,source:o,target:a,attributes:s};if(n)i=e._edgeKeyGenerator();else if(i=""+i,e._edges.has(i))throw new Vt(`Graph.${t}: the "${i}" edge already exists in the graph.`);if(!e.multi&&(r?void 0!==u.undirected[a]:void 0!==u.out[a]))throw new Vt(`Graph.${t}: an edge linking "${o}" to "${a}" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`);const d=new Qt(r,i,u,l,s);e._edges.set(i,d);const f=o===a;return r?(u.undirectedDegree++,l.undirectedDegree++,f&&(u.undirectedLoops++,e._undirectedSelfLoopCount++)):(u.outDegree++,l.inDegree++,f&&(u.directedLoops++,e._directedSelfLoopCount++)),e.multi?d.attachMulti():d.attach(),r?e._undirectedSize++:e._directedSize++,c.key=i,e.emit("edgeAdded",c),i}function Cn(e,t,n,r,i,o,a,s,u){if(!r&&"undirected"===e.type)throw new Vt(`Graph.${t}: you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead.`);if(r&&"directed"===e.type)throw new Vt(`Graph.${t}: you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead.`);if(s)if(u){if("function"!=typeof s)throw new Wt(`Graph.${t}: invalid updater function. Expecting a function but got "${s}"`)}else if(!jt(s))throw new Wt(`Graph.${t}: invalid attributes. Expecting an object but got "${s}"`);let l;if(o=""+o,a=""+a,u&&(l=s,s=void 0),!e.allowSelfLoops&&o===a)throw new Vt(`Graph.${t}: source & target are the same ("${o}"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`);let c,d,f=e._nodes.get(o),h=e._nodes.get(a);if(!n&&(c=e._edges.get(i),c)){if(!(c.source.key===o&&c.target.key===a||r&&c.source.key===a&&c.target.key===o))throw new Vt(`Graph.${t}: inconsistency detected when attempting to merge the "${i}" edge with "${o}" source & "${a}" target vs. ("${c.source.key}", "${c.target.key}").`);d=c}if(d||e.multi||!f||(d=r?f.undirected[a]:f.out[a]),d){const t=[d.key,!1,!1,!1];if(u?!l:!s)return t;if(u){const t=d.attributes;d.attributes=l(t),e.emit("edgeAttributesUpdated",{type:"replace",key:d.key,attributes:d.attributes})}else Dt(d.attributes,s),e.emit("edgeAttributesUpdated",{type:"merge",key:d.key,attributes:d.attributes,data:s});return t}s=s||{},u&&l&&(s=l(s));const p={key:null,undirected:r,source:o,target:a,attributes:s};if(n)i=e._edgeKeyGenerator();else if(i=""+i,e._edges.has(i))throw new Vt(`Graph.${t}: the "${i}" edge already exists in the graph.`);let g=!1,m=!1;f||(f=En(e,o,{}),g=!0,o===a&&(h=f,m=!0)),h||(h=En(e,a,{}),m=!0),c=new Qt(r,i,f,h,s),e._edges.set(i,c);const y=o===a;return r?(f.undirectedDegree++,h.undirectedDegree++,y&&(f.undirectedLoops++,e._undirectedSelfLoopCount++)):(f.outDegree++,h.inDegree++,y&&(f.directedLoops++,e._directedSelfLoopCount++)),e.multi?c.attachMulti():c.attach(),r?e._undirectedSize++:e._directedSize++,p.key=i,e.emit("edgeAdded",p),[i,!0,g,m]}function An(e,t){e._edges.delete(t.key);const{source:n,target:r,attributes:i}=t,o=t.undirected,a=n===r;o?(n.undirectedDegree--,r.undirectedDegree--,a&&(n.undirectedLoops--,e._undirectedSelfLoopCount--)):(n.outDegree--,r.inDegree--,a&&(n.directedLoops--,e._directedSelfLoopCount--)),e.multi?t.detachMulti():t.detach(),o?e._undirectedSize--:e._directedSize--,e.emit("edgeDropped",{key:t.key,attributes:i,source:n.key,target:r.key,undirected:o})}class Rn extends Mt.EventEmitter{constructor(e){if(super(),"boolean"!=typeof(e=Dt({},kn,e)).multi)throw new Wt(`Graph.constructor: invalid 'multi' option. Expecting a boolean but got "${e.multi}".`);if(!_n.has(e.type))throw new Wt(`Graph.constructor: invalid 'type' option. Should be one of "mixed", "directed" or "undirected" but got "${e.type}".`);if("boolean"!=typeof e.allowSelfLoops)throw new Wt(`Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got "${e.allowSelfLoops}".`);Gt(this,"NodeDataClass","mixed"===e.type?qt:"directed"===e.type?Kt:Yt);const t="geid_"+wn()+"_";let n=0;Gt(this,"_attributes",{}),Gt(this,"_nodes",new Map),Gt(this,"_edges",new Map),Gt(this,"_directedSize",0),Gt(this,"_undirectedSize",0),Gt(this,"_directedSelfLoopCount",0),Gt(this,"_undirectedSelfLoopCount",0),Gt(this,"_edgeKeyGenerator",(()=>{let e;do{e=t+n++}while(this._edges.has(e));return e})),Gt(this,"_options",e),xn.forEach((e=>Gt(this,e,this[e]))),Bt(this,"order",(()=>this._nodes.size)),Bt(this,"size",(()=>this._edges.size)),Bt(this,"directedSize",(()=>this._directedSize)),Bt(this,"undirectedSize",(()=>this._undirectedSize)),Bt(this,"selfLoopCount",(()=>this._directedSelfLoopCount+this._undirectedSelfLoopCount)),Bt(this,"directedSelfLoopCount",(()=>this._directedSelfLoopCount)),Bt(this,"undirectedSelfLoopCount",(()=>this._undirectedSelfLoopCount)),Bt(this,"multi",this._options.multi),Bt(this,"type",this._options.type),Bt(this,"allowSelfLoops",this._options.allowSelfLoops),Bt(this,"implementation",(()=>"graphology"))}_resetInstanceCounters(){this._directedSize=0,this._undirectedSize=0,this._directedSelfLoopCount=0,this._undirectedSelfLoopCount=0}hasNode(e){return this._nodes.has(""+e)}hasDirectedEdge(e,t){if("undirected"===this.type)return!1;if(1===arguments.length){const t=""+e,n=this._edges.get(t);return!!n&&!n.undirected}if(2===arguments.length){e=""+e,t=""+t;const n=this._nodes.get(e);return!!n&&n.out.hasOwnProperty(t)}throw new Wt(`Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`)}hasUndirectedEdge(e,t){if("directed"===this.type)return!1;if(1===arguments.length){const t=""+e,n=this._edges.get(t);return!!n&&n.undirected}if(2===arguments.length){e=""+e,t=""+t;const n=this._nodes.get(e);return!!n&&n.undirected.hasOwnProperty(t)}throw new Wt(`Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`)}hasEdge(e,t){if(1===arguments.length){const t=""+e;return this._edges.has(t)}if(2===arguments.length){e=""+e,t=""+t;const n=this._nodes.get(e);return!!n&&(void 0!==n.out&&n.out.hasOwnProperty(t)||void 0!==n.undirected&&n.undirected.hasOwnProperty(t))}throw new Wt(`Graph.hasEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`)}directedEdge(e,t){if("undirected"===this.type)return;if(e=""+e,t=""+t,this.multi)throw new Vt("Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.");const n=this._nodes.get(e);if(!n)throw new Ht(`Graph.directedEdge: could not find the "${e}" source node in the graph.`);if(!this._nodes.has(t))throw new Ht(`Graph.directedEdge: could not find the "${t}" target node in the graph.`);const r=n.out&&n.out[t]||void 0;return r?r.key:void 0}undirectedEdge(e,t){if("directed"===this.type)return;if(e=""+e,t=""+t,this.multi)throw new Vt("Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.");const n=this._nodes.get(e);if(!n)throw new Ht(`Graph.undirectedEdge: could not find the "${e}" source node in the graph.`);if(!this._nodes.has(t))throw new Ht(`Graph.undirectedEdge: could not find the "${t}" target node in the graph.`);const r=n.undirected&&n.undirected[t]||void 0;return r?r.key:void 0}edge(e,t){if(this.multi)throw new Vt("Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.");e=""+e,t=""+t;const n=this._nodes.get(e);if(!n)throw new Ht(`Graph.edge: could not find the "${e}" source node in the graph.`);if(!this._nodes.has(t))throw new Ht(`Graph.edge: could not find the "${t}" target node in the graph.`);const r=n.out&&n.out[t]||n.undirected&&n.undirected[t]||void 0;if(r)return r.key}areDirectedNeighbors(e,t){e=""+e,t=""+t;const n=this._nodes.get(e);if(!n)throw new Ht(`Graph.areDirectedNeighbors: could not find the "${e}" node in the graph.`);return"undirected"!==this.type&&(t in n.in||t in n.out)}areOutNeighbors(e,t){e=""+e,t=""+t;const n=this._nodes.get(e);if(!n)throw new Ht(`Graph.areOutNeighbors: could not find the "${e}" node in the graph.`);return"undirected"!==this.type&&t in n.out}areInNeighbors(e,t){e=""+e,t=""+t;const n=this._nodes.get(e);if(!n)throw new Ht(`Graph.areInNeighbors: could not find the "${e}" node in the graph.`);return"undirected"!==this.type&&t in n.in}areUndirectedNeighbors(e,t){e=""+e,t=""+t;const n=this._nodes.get(e);if(!n)throw new Ht(`Graph.areUndirectedNeighbors: could not find the "${e}" node in the graph.`);return"directed"!==this.type&&t in n.undirected}areNeighbors(e,t){e=""+e,t=""+t;const n=this._nodes.get(e);if(!n)throw new Ht(`Graph.areNeighbors: could not find the "${e}" node in the graph.`);return"undirected"!==this.type&&(t in n.in||t in n.out)||"directed"!==this.type&&t in n.undirected}areInboundNeighbors(e,t){e=""+e,t=""+t;const n=this._nodes.get(e);if(!n)throw new Ht(`Graph.areInboundNeighbors: could not find the "${e}" node in the graph.`);return"undirected"!==this.type&&t in n.in||"directed"!==this.type&&t in n.undirected}areOutboundNeighbors(e,t){e=""+e,t=""+t;const n=this._nodes.get(e);if(!n)throw new Ht(`Graph.areOutboundNeighbors: could not find the "${e}" node in the graph.`);return"undirected"!==this.type&&t in n.out||"directed"!==this.type&&t in n.undirected}inDegree(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new Ht(`Graph.inDegree: could not find the "${e}" node in the graph.`);return"undirected"===this.type?0:t.inDegree}outDegree(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new Ht(`Graph.outDegree: could not find the "${e}" node in the graph.`);return"undirected"===this.type?0:t.outDegree}directedDegree(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new Ht(`Graph.directedDegree: could not find the "${e}" node in the graph.`);return"undirected"===this.type?0:t.inDegree+t.outDegree}undirectedDegree(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new Ht(`Graph.undirectedDegree: could not find the "${e}" node in the graph.`);return"directed"===this.type?0:t.undirectedDegree}inboundDegree(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new Ht(`Graph.inboundDegree: could not find the "${e}" node in the graph.`);let n=0;return"directed"!==this.type&&(n+=t.undirectedDegree),"undirected"!==this.type&&(n+=t.inDegree),n}outboundDegree(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new Ht(`Graph.outboundDegree: could not find the "${e}" node in the graph.`);let n=0;return"directed"!==this.type&&(n+=t.undirectedDegree),"undirected"!==this.type&&(n+=t.outDegree),n}degree(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new Ht(`Graph.degree: could not find the "${e}" node in the graph.`);let n=0;return"directed"!==this.type&&(n+=t.undirectedDegree),"undirected"!==this.type&&(n+=t.inDegree+t.outDegree),n}inDegreeWithoutSelfLoops(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new Ht(`Graph.inDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);return"undirected"===this.type?0:t.inDegree-t.directedLoops}outDegreeWithoutSelfLoops(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new Ht(`Graph.outDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);return"undirected"===this.type?0:t.outDegree-t.directedLoops}directedDegreeWithoutSelfLoops(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new Ht(`Graph.directedDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);return"undirected"===this.type?0:t.inDegree+t.outDegree-2*t.directedLoops}undirectedDegreeWithoutSelfLoops(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new Ht(`Graph.undirectedDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);return"directed"===this.type?0:t.undirectedDegree-2*t.undirectedLoops}inboundDegreeWithoutSelfLoops(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new Ht(`Graph.inboundDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);let n=0,r=0;return"directed"!==this.type&&(n+=t.undirectedDegree,r+=2*t.undirectedLoops),"undirected"!==this.type&&(n+=t.inDegree,r+=t.directedLoops),n-r}outboundDegreeWithoutSelfLoops(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new Ht(`Graph.outboundDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);let n=0,r=0;return"directed"!==this.type&&(n+=t.undirectedDegree,r+=2*t.undirectedLoops),"undirected"!==this.type&&(n+=t.outDegree,r+=t.directedLoops),n-r}degreeWithoutSelfLoops(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new Ht(`Graph.degreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);let n=0,r=0;return"directed"!==this.type&&(n+=t.undirectedDegree,r+=2*t.undirectedLoops),"undirected"!==this.type&&(n+=t.inDegree+t.outDegree,r+=2*t.directedLoops),n-r}source(e){e=""+e;const t=this._edges.get(e);if(!t)throw new Ht(`Graph.source: could not find the "${e}" edge in the graph.`);return t.source.key}target(e){e=""+e;const t=this._edges.get(e);if(!t)throw new Ht(`Graph.target: could not find the "${e}" edge in the graph.`);return t.target.key}extremities(e){e=""+e;const t=this._edges.get(e);if(!t)throw new Ht(`Graph.extremities: could not find the "${e}" edge in the graph.`);return[t.source.key,t.target.key]}opposite(e,t){e=""+e,t=""+t;const n=this._edges.get(t);if(!n)throw new Ht(`Graph.opposite: could not find the "${t}" edge in the graph.`);const r=n.source.key,i=n.target.key;if(e===r)return i;if(e===i)return r;throw new Ht(`Graph.opposite: the "${e}" node is not attached to the "${t}" edge (${r}, ${i}).`)}hasExtremity(e,t){e=""+e,t=""+t;const n=this._edges.get(e);if(!n)throw new Ht(`Graph.hasExtremity: could not find the "${e}" edge in the graph.`);return n.source.key===t||n.target.key===t}isUndirected(e){e=""+e;const t=this._edges.get(e);if(!t)throw new Ht(`Graph.isUndirected: could not find the "${e}" edge in the graph.`);return t.undirected}isDirected(e){e=""+e;const t=this._edges.get(e);if(!t)throw new Ht(`Graph.isDirected: could not find the "${e}" edge in the graph.`);return!t.undirected}isSelfLoop(e){e=""+e;const t=this._edges.get(e);if(!t)throw new Ht(`Graph.isSelfLoop: could not find the "${e}" edge in the graph.`);return t.source===t.target}addNode(e,t){const n=function(e,t,n){if(n&&!jt(n))throw new Wt(`Graph.addNode: invalid attributes. Expecting an object but got "${n}"`);if(t=""+t,n=n||{},e._nodes.has(t))throw new Vt(`Graph.addNode: the "${t}" node already exist in the graph.`);const r=new e.NodeDataClass(t,n);return e._nodes.set(t,r),e.emit("nodeAdded",{key:t,attributes:n}),r}(this,e,t);return n.key}mergeNode(e,t){if(t&&!jt(t))throw new Wt(`Graph.mergeNode: invalid attributes. Expecting an object but got "${t}"`);e=""+e,t=t||{};let n=this._nodes.get(e);return n?(t&&(Dt(n.attributes,t),this.emit("nodeAttributesUpdated",{type:"merge",key:e,attributes:n.attributes,data:t})),[e,!1]):(n=new this.NodeDataClass(e,t),this._nodes.set(e,n),this.emit("nodeAdded",{key:e,attributes:t}),[e,!0])}updateNode(e,t){if(t&&"function"!=typeof t)throw new Wt(`Graph.updateNode: invalid updater function. Expecting a function but got "${t}"`);e=""+e;let n=this._nodes.get(e);if(n){if(t){const r=n.attributes;n.attributes=t(r),this.emit("nodeAttributesUpdated",{type:"replace",key:e,attributes:n.attributes})}return[e,!1]}const r=t?t({}):{};return n=new this.NodeDataClass(e,r),this._nodes.set(e,n),this.emit("nodeAdded",{key:e,attributes:r}),[e,!0]}dropNode(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new Ht(`Graph.dropNode: could not find the "${e}" node in the graph.`);let n;if("undirected"!==this.type){for(const e in t.out){n=t.out[e];do{An(this,n),n=n.next}while(n)}for(const e in t.in){n=t.in[e];do{An(this,n),n=n.next}while(n)}}if("directed"!==this.type)for(const e in t.undirected){n=t.undirected[e];do{An(this,n),n=n.next}while(n)}this._nodes.delete(e),this.emit("nodeDropped",{key:e,attributes:t.attributes})}dropEdge(e){let t;if(arguments.length>1){const e=""+arguments[0],n=""+arguments[1];if(t=$t(this,e,n,this.type),!t)throw new Ht(`Graph.dropEdge: could not find the "${e}" -> "${n}" edge in the graph.`)}else if(e=""+e,t=this._edges.get(e),!t)throw new Ht(`Graph.dropEdge: could not find the "${e}" edge in the graph.`);return An(this,t),this}dropDirectedEdge(e,t){if(arguments.length<2)throw new Vt("Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new Vt("Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");const n=$t(this,e=""+e,t=""+t,"directed");if(!n)throw new Ht(`Graph.dropDirectedEdge: could not find a "${e}" -> "${t}" edge in the graph.`);return An(this,n),this}dropUndirectedEdge(e,t){if(arguments.length<2)throw new Vt("Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new Vt("Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");const n=$t(this,e,t,"undirected");if(!n)throw new Ht(`Graph.dropUndirectedEdge: could not find a "${e}" -> "${t}" edge in the graph.`);return An(this,n),this}clear(){this._edges.clear(),this._nodes.clear(),this._resetInstanceCounters(),this.emit("cleared")}clearEdges(){const e=this._nodes.values();let t;for(;t=e.next(),!0!==t.done;)t.value.clear();this._edges.clear(),this._resetInstanceCounters(),this.emit("edgesCleared")}getAttribute(e){return this._attributes[e]}getAttributes(){return this._attributes}hasAttribute(e){return this._attributes.hasOwnProperty(e)}setAttribute(e,t){return this._attributes[e]=t,this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:e}),this}updateAttribute(e,t){if("function"!=typeof t)throw new Wt("Graph.updateAttribute: updater should be a function.");const n=this._attributes[e];return this._attributes[e]=t(n),this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:e}),this}removeAttribute(e){return delete this._attributes[e],this.emit("attributesUpdated",{type:"remove",attributes:this._attributes,name:e}),this}replaceAttributes(e){if(!jt(e))throw new Wt("Graph.replaceAttributes: provided attributes are not a plain object.");return this._attributes=e,this.emit("attributesUpdated",{type:"replace",attributes:this._attributes}),this}mergeAttributes(e){if(!jt(e))throw new Wt("Graph.mergeAttributes: provided attributes are not a plain object.");return Dt(this._attributes,e),this.emit("attributesUpdated",{type:"merge",attributes:this._attributes,data:e}),this}updateAttributes(e){if("function"!=typeof e)throw new Wt("Graph.updateAttributes: provided updater is not a function.");return this._attributes=e(this._attributes),this.emit("attributesUpdated",{type:"update",attributes:this._attributes}),this}updateEachNodeAttributes(e,t){if("function"!=typeof e)throw new Wt("Graph.updateEachNodeAttributes: expecting an updater function.");if(t&&!Ut(t))throw new Wt("Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");const n=this._nodes.values();let r,i;for(;r=n.next(),!0!==r.done;)i=r.value,i.attributes=e(i.key,i.attributes);this.emit("eachNodeAttributesUpdated",{hints:t||null})}updateEachEdgeAttributes(e,t){if("function"!=typeof e)throw new Wt("Graph.updateEachEdgeAttributes: expecting an updater function.");if(t&&!Ut(t))throw new Wt("Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");const n=this._edges.values();let r,i,o,a;for(;r=n.next(),!0!==r.done;)i=r.value,o=i.source,a=i.target,i.attributes=e(i.key,i.attributes,o.key,a.key,o.attributes,a.attributes,i.undirected);this.emit("eachEdgeAttributesUpdated",{hints:t||null})}forEachAdjacencyEntry(e){if("function"!=typeof e)throw new Wt("Graph.forEachAdjacencyEntry: expecting a callback.");yn(!1,!1,!1,this,e)}forEachAdjacencyEntryWithOrphans(e){if("function"!=typeof e)throw new Wt("Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.");yn(!1,!1,!0,this,e)}forEachAssymetricAdjacencyEntry(e){if("function"!=typeof e)throw new Wt("Graph.forEachAssymetricAdjacencyEntry: expecting a callback.");yn(!1,!0,!1,this,e)}forEachAssymetricAdjacencyEntryWithOrphans(e){if("function"!=typeof e)throw new Wt("Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.");yn(!1,!0,!0,this,e)}nodes(){return"function"==typeof Array.from?Array.from(this._nodes.keys()):zt(this._nodes.keys(),this._nodes.size)}forEachNode(e){if("function"!=typeof e)throw new Wt("Graph.forEachNode: expecting a callback.");const t=this._nodes.values();let n,r;for(;n=t.next(),!0!==n.done;)r=n.value,e(r.key,r.attributes)}findNode(e){if("function"!=typeof e)throw new Wt("Graph.findNode: expecting a callback.");const t=this._nodes.values();let n,r;for(;n=t.next(),!0!==n.done;)if(r=n.value,e(r.key,r.attributes))return r.key}mapNodes(e){if("function"!=typeof e)throw new Wt("Graph.mapNode: expecting a callback.");const t=this._nodes.values();let n,r;const i=new Array(this.order);let o=0;for(;n=t.next(),!0!==n.done;)r=n.value,i[o++]=e(r.key,r.attributes);return i}someNode(e){if("function"!=typeof e)throw new Wt("Graph.someNode: expecting a callback.");const t=this._nodes.values();let n,r;for(;n=t.next(),!0!==n.done;)if(r=n.value,e(r.key,r.attributes))return!0;return!1}everyNode(e){if("function"!=typeof e)throw new Wt("Graph.everyNode: expecting a callback.");const t=this._nodes.values();let n,r;for(;n=t.next(),!0!==n.done;)if(r=n.value,!e(r.key,r.attributes))return!1;return!0}filterNodes(e){if("function"!=typeof e)throw new Wt("Graph.filterNodes: expecting a callback.");const t=this._nodes.values();let n,r;const i=[];for(;n=t.next(),!0!==n.done;)r=n.value,e(r.key,r.attributes)&&i.push(r.key);return i}reduceNodes(e,t){if("function"!=typeof e)throw new Wt("Graph.reduceNodes: expecting a callback.");if(arguments.length<2)throw new Wt("Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.");let n=t;const r=this._nodes.values();let i,o;for(;i=r.next(),!0!==i.done;)o=i.value,n=e(n,o.key,o.attributes);return n}nodeEntries(){const e=this._nodes.values();return new Nt((()=>{const t=e.next();if(t.done)return t;const n=t.value;return{value:{node:n.key,attributes:n.attributes},done:!1}}))}export(){const e=new Array(this._nodes.size);let t=0;this._nodes.forEach(((n,r)=>{e[t++]=function(e,t){const n={key:e};return It(t.attributes)||(n.attributes=Dt({},t.attributes)),n}(r,n)}));const n=new Array(this._edges.size);return t=0,this._edges.forEach(((e,r)=>{n[t++]=function(e,t,n){const r={key:t,source:n.source.key,target:n.target.key};return It(n.attributes)||(r.attributes=Dt({},n.attributes)),"mixed"===e&&n.undirected&&(r.undirected=!0),r}(this.type,r,e)})),{options:{type:this.type,multi:this.multi,allowSelfLoops:this.allowSelfLoops},attributes:this.getAttributes(),nodes:e,edges:n}}import(e,t=!1){if(e instanceof Rn)return e.forEachNode(((e,n)=>{t?this.mergeNode(e,n):this.addNode(e,n)})),e.forEachEdge(((e,n,r,i,o,a,s)=>{t?s?this.mergeUndirectedEdgeWithKey(e,r,i,n):this.mergeDirectedEdgeWithKey(e,r,i,n):s?this.addUndirectedEdgeWithKey(e,r,i,n):this.addDirectedEdgeWithKey(e,r,i,n)})),this;if(!jt(e))throw new Wt("Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.");if(e.attributes){if(!jt(e.attributes))throw new Wt("Graph.import: invalid attributes. Expecting a plain object.");t?this.mergeAttributes(e.attributes):this.replaceAttributes(e.attributes)}let n,r,i,o,a;if(e.nodes){if(i=e.nodes,!Array.isArray(i))throw new Wt("Graph.import: invalid nodes. Expecting an array.");for(n=0,r=i.length;n<r;n++){o=i[n],vn(o);const{key:e,attributes:r}=o;t?this.mergeNode(e,r):this.addNode(e,r)}}if(e.edges){let o=!1;if("undirected"===this.type&&(o=!0),i=e.edges,!Array.isArray(i))throw new Wt("Graph.import: invalid edges. Expecting an array.");for(n=0,r=i.length;n<r;n++){a=i[n],bn(a);const{source:e,target:r,attributes:s,undirected:u=o}=a;let l;"key"in a?(l=t?u?this.mergeUndirectedEdgeWithKey:this.mergeDirectedEdgeWithKey:u?this.addUndirectedEdgeWithKey:this.addDirectedEdgeWithKey,l.call(this,a.key,e,r,s)):(l=t?u?this.mergeUndirectedEdge:this.mergeDirectedEdge:u?this.addUndirectedEdge:this.addDirectedEdge,l.call(this,e,r,s))}}return this}nullCopy(e){const t=new Rn(Dt({},this._options,e));return t.replaceAttributes(Dt({},this.getAttributes())),t}emptyCopy(e){const t=this.nullCopy(e);return this._nodes.forEach(((e,n)=>{const r=Dt({},e.attributes);e=new t.NodeDataClass(n,r),t._nodes.set(n,e)})),t}copy(e){if("string"==typeof(e=e||{}).type&&e.type!==this.type&&"mixed"!==e.type)throw new Vt(`Graph.copy: cannot create an incompatible copy from "${this.type}" type to "${e.type}" because this would mean losing information about the current graph.`);if("boolean"==typeof e.multi&&e.multi!==this.multi&&!0!==e.multi)throw new Vt("Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.");if("boolean"==typeof e.allowSelfLoops&&e.allowSelfLoops!==this.allowSelfLoops&&!0!==e.allowSelfLoops)throw new Vt("Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.");const t=this.emptyCopy(e),n=this._edges.values();let r,i;for(;r=n.next(),!0!==r.done;)i=r.value,Sn(t,"copy",!1,i.undirected,i.key,i.source.key,i.target.key,Dt({},i.attributes));return t}toJSON(){return this.export()}toString(){return"[object Graph]"}inspect(){const e={};this._nodes.forEach(((t,n)=>{e[n]=t.attributes}));const t={},n={};this._edges.forEach(((e,r)=>{const i=e.undirected?"--":"->";let o,a="",s=e.source.key,u=e.target.key;e.undirected&&s>u&&(o=s,s=u,u=o);const l=`(${s})${i}(${u})`;r.startsWith("geid_")?this.multi&&(void 0===n[l]?n[l]=0:n[l]++,a+=`${n[l]}. `):a+=`[${r}]: `,a+=l,t[a]=e.attributes}));const r={};for(const e in this)this.hasOwnProperty(e)&&!xn.has(e)&&"function"!=typeof this[e]&&"symbol"!=typeof e&&(r[e]=this[e]);return r.attributes=this._attributes,r.nodes=e,r.edges=t,Gt(r,"constructor",this.constructor),r}}"undefined"!=typeof Symbol&&(Rn.prototype[Symbol.for("nodejs.util.inspect.custom")]=Rn.prototype.inspect),[{name:e=>`${e}Edge`,generateKey:!0},{name:e=>`${e}DirectedEdge`,generateKey:!0,type:"directed"},{name:e=>`${e}UndirectedEdge`,generateKey:!0,type:"undirected"},{name:e=>`${e}EdgeWithKey`},{name:e=>`${e}DirectedEdgeWithKey`,type:"directed"},{name:e=>`${e}UndirectedEdgeWithKey`,type:"undirected"}].forEach((e=>{["add","merge","update"].forEach((t=>{const n=e.name(t),r="add"===t?Sn:Cn;e.generateKey?Rn.prototype[n]=function(i,o,a){return r(this,n,!0,"undirected"===(e.type||this.type),null,i,o,a,"update"===t)}:Rn.prototype[n]=function(i,o,a,s){return r(this,n,!1,"undirected"===(e.type||this.type),i,o,a,s,"update"===t)}}))})),function(e){Jt.forEach((function({name:t,attacher:n}){n(e,t("Node"),0),n(e,t("Source"),1),n(e,t("Target"),2),n(e,t("Opposite"),3)}))}(Rn),function(e){en.forEach((function({name:t,attacher:n}){n(e,t("Edge"),"mixed"),n(e,t("DirectedEdge"),"directed"),n(e,t("UndirectedEdge"),"undirected")}))}(Rn),function(e){tn.forEach((t=>{(function(e,t){const{name:n,type:r,direction:i}=t;e.prototype[n]=function(e,t){if("mixed"!==r&&"mixed"!==this.type&&r!==this.type)return[];if(!arguments.length)return function(e,t){if(0===e.size)return[];if("mixed"===t||t===e.type)return"function"==typeof Array.from?Array.from(e._edges.keys()):zt(e._edges.keys(),e._edges.size);const n="undirected"===t?e.undirectedSize:e.directedSize,r=new Array(n),i="undirected"===t,o=e._edges.values();let a,s,u=0;for(;a=o.next(),!0!==a.done;)s=a.value,s.undirected===i&&(r[u++]=s.key);return r}(this,r);if(1===arguments.length){e=""+e;const t=this._nodes.get(e);if(void 0===t)throw new Ht(`Graph.${n}: could not find the "${e}" node in the graph.`);return function(e,t,n,r){const i=[];return cn(!1,e,t,n,r,(function(e){i.push(e)})),i}(this.multi,"mixed"===r?this.type:r,i,t)}if(2===arguments.length){e=""+e,t=""+t;const o=this._nodes.get(e);if(!o)throw new Ht(`Graph.${n}:  could not find the "${e}" source node in the graph.`);if(!this._nodes.has(t))throw new Ht(`Graph.${n}:  could not find the "${t}" target node in the graph.`);return function(e,t,n,r,i){const o=[];return dn(!1,e,t,n,r,i,(function(e){o.push(e)})),o}(r,this.multi,i,o,t)}throw new Wt(`Graph.${n}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`)}})(e,t),function(e,t){const{name:n,type:r,direction:i}=t,o="forEach"+n[0].toUpperCase()+n.slice(1,-1);e.prototype[o]=function(e,t,n){if("mixed"===r||"mixed"===this.type||r===this.type){if(1===arguments.length)return ln(!1,this,r,n=e);if(2===arguments.length){e=""+e,n=t;const a=this._nodes.get(e);if(void 0===a)throw new Ht(`Graph.${o}: could not find the "${e}" node in the graph.`);return cn(!1,this.multi,"mixed"===r?this.type:r,i,a,n)}if(3===arguments.length){e=""+e,t=""+t;const a=this._nodes.get(e);if(!a)throw new Ht(`Graph.${o}:  could not find the "${e}" source node in the graph.`);if(!this._nodes.has(t))throw new Ht(`Graph.${o}:  could not find the "${t}" target node in the graph.`);return dn(!1,r,this.multi,i,a,t,n)}throw new Wt(`Graph.${o}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`)}};const a="map"+n[0].toUpperCase()+n.slice(1);e.prototype[a]=function(){const e=Array.prototype.slice.call(arguments),t=e.pop();let n;if(0===e.length){let i=0;"directed"!==r&&(i+=this.undirectedSize),"undirected"!==r&&(i+=this.directedSize),n=new Array(i);let o=0;e.push(((e,r,i,a,s,u,l)=>{n[o++]=t(e,r,i,a,s,u,l)}))}else n=[],e.push(((e,r,i,o,a,s,u)=>{n.push(t(e,r,i,o,a,s,u))}));return this[o].apply(this,e),n};const s="filter"+n[0].toUpperCase()+n.slice(1);e.prototype[s]=function(){const e=Array.prototype.slice.call(arguments),t=e.pop(),n=[];return e.push(((e,r,i,o,a,s,u)=>{t(e,r,i,o,a,s,u)&&n.push(e)})),this[o].apply(this,e),n};const u="reduce"+n[0].toUpperCase()+n.slice(1);e.prototype[u]=function(){let e,t,n=Array.prototype.slice.call(arguments);if(n.length<2||n.length>4)throw new Wt(`Graph.${u}: invalid number of arguments (expecting 2, 3 or 4 and got ${n.length}).`);if("function"==typeof n[n.length-1]&&"function"!=typeof n[n.length-2])throw new Wt(`Graph.${u}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`);2===n.length?(e=n[0],t=n[1],n=[]):3===n.length?(e=n[1],t=n[2],n=[n[0]]):4===n.length&&(e=n[2],t=n[3],n=[n[0],n[1]]);let r=t;return n.push(((t,n,i,o,a,s,u)=>{r=e(r,t,n,i,o,a,s,u)})),this[o].apply(this,n),r}}(e,t),function(e,t){const{name:n,type:r,direction:i}=t,o="find"+n[0].toUpperCase()+n.slice(1,-1);e.prototype[o]=function(e,t,n){if("mixed"!==r&&"mixed"!==this.type&&r!==this.type)return!1;if(1===arguments.length)return ln(!0,this,r,n=e);if(2===arguments.length){e=""+e,n=t;const a=this._nodes.get(e);if(void 0===a)throw new Ht(`Graph.${o}: could not find the "${e}" node in the graph.`);return cn(!0,this.multi,"mixed"===r?this.type:r,i,a,n)}if(3===arguments.length){e=""+e,t=""+t;const a=this._nodes.get(e);if(!a)throw new Ht(`Graph.${o}:  could not find the "${e}" source node in the graph.`);if(!this._nodes.has(t))throw new Ht(`Graph.${o}:  could not find the "${t}" target node in the graph.`);return dn(!0,r,this.multi,i,a,t,n)}throw new Wt(`Graph.${o}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`)};const a="some"+n[0].toUpperCase()+n.slice(1,-1);e.prototype[a]=function(){const e=Array.prototype.slice.call(arguments),t=e.pop();return e.push(((e,n,r,i,o,a,s)=>t(e,n,r,i,o,a,s))),!!this[o].apply(this,e)};const s="every"+n[0].toUpperCase()+n.slice(1,-1);e.prototype[s]=function(){const e=Array.prototype.slice.call(arguments),t=e.pop();return e.push(((e,n,r,i,o,a,s)=>!t(e,n,r,i,o,a,s))),!this[o].apply(this,e)}}(e,t),function(e,t){const{name:n,type:r,direction:i}=t,o=n.slice(0,-1)+"Entries";e.prototype[o]=function(e,t){if("mixed"!==r&&"mixed"!==this.type&&r!==this.type)return Nt.empty();if(!arguments.length)return function(e,t){if(0===e.size)return Nt.empty();const n="mixed"!==t&&t!==e.type,r="undirected"===t,i=e._edges.values();return new Nt((function(){let e,t;for(;;){if(e=i.next(),e.done)return e;if(t=e.value,!n||t.undirected===r)break}return{value:{edge:t.key,attributes:t.attributes,source:t.source.key,target:t.target.key,sourceAttributes:t.source.attributes,targetAttributes:t.target.attributes,undirected:t.undirected},done:!1}}))}(this,r);if(1===arguments.length){e=""+e;const t=this._nodes.get(e);if(!t)throw new Ht(`Graph.${o}: could not find the "${e}" node in the graph.`);return function(e,t,n){let r=Nt.empty();return"undirected"!==e&&("out"!==t&&void 0!==n.in&&(r=Ft(r,on(n.in))),"in"!==t&&void 0!==n.out&&(r=Ft(r,on(n.out,t?void 0:n.key)))),"directed"!==e&&void 0!==n.undirected&&(r=Ft(r,on(n.undirected))),r}(r,i,t)}if(2===arguments.length){e=""+e,t=""+t;const n=this._nodes.get(e);if(!n)throw new Ht(`Graph.${o}:  could not find the "${e}" source node in the graph.`);if(!this._nodes.has(t))throw new Ht(`Graph.${o}:  could not find the "${t}" target node in the graph.`);return function(e,t,n,r){let i=Nt.empty();return"undirected"!==e&&(void 0!==n.in&&"out"!==t&&r in n.in&&(i=Ft(i,un(n.in,r))),void 0!==n.out&&"in"!==t&&r in n.out&&(t||n.key!==r)&&(i=Ft(i,un(n.out,r)))),"directed"!==e&&void 0!==n.undirected&&r in n.undirected&&(i=Ft(i,un(n.undirected,r))),i}(r,i,n,t)}throw new Wt(`Graph.${o}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`)}}(e,t)}))}(Rn),function(e){fn.forEach((t=>{(function(e,t){const{name:n,type:r,direction:i}=t;e.prototype[n]=function(e){if("mixed"!==r&&"mixed"!==this.type&&r!==this.type)return[];e=""+e;const t=this._nodes.get(e);if(void 0===t)throw new Ht(`Graph.${n}: could not find the "${e}" node in the graph.`);return function(e,t,n){if("mixed"!==e){if("undirected"===e)return Object.keys(n.undirected);if("string"==typeof t)return Object.keys(n[t])}const r=[];return gn(!1,e,t,n,(function(e){r.push(e)})),r}("mixed"===r?this.type:r,i,t)}})(e,t),function(e,t){const{name:n,type:r,direction:i}=t,o="forEach"+n[0].toUpperCase()+n.slice(1,-1);e.prototype[o]=function(e,t){if("mixed"!==r&&"mixed"!==this.type&&r!==this.type)return;e=""+e;const n=this._nodes.get(e);if(void 0===n)throw new Ht(`Graph.${o}: could not find the "${e}" node in the graph.`);gn(!1,"mixed"===r?this.type:r,i,n,t)};const a="map"+n[0].toUpperCase()+n.slice(1);e.prototype[a]=function(e,t){const n=[];return this[o](e,((e,r)=>{n.push(t(e,r))})),n};const s="filter"+n[0].toUpperCase()+n.slice(1);e.prototype[s]=function(e,t){const n=[];return this[o](e,((e,r)=>{t(e,r)&&n.push(e)})),n};const u="reduce"+n[0].toUpperCase()+n.slice(1);e.prototype[u]=function(e,t,n){if(arguments.length<3)throw new Wt(`Graph.${u}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`);let r=n;return this[o](e,((e,n)=>{r=t(r,e,n)})),r}}(e,t),function(e,t){const{name:n,type:r,direction:i}=t,o=n[0].toUpperCase()+n.slice(1,-1),a="find"+o;e.prototype[a]=function(e,t){if("mixed"!==r&&"mixed"!==this.type&&r!==this.type)return;e=""+e;const n=this._nodes.get(e);if(void 0===n)throw new Ht(`Graph.${a}: could not find the "${e}" node in the graph.`);return gn(!0,"mixed"===r?this.type:r,i,n,t)};const s="some"+o;e.prototype[s]=function(e,t){return!!this[a](e,t)};const u="every"+o;e.prototype[u]=function(e,t){return!this[a](e,((e,n)=>!t(e,n)))}}(e,t),function(e,t){const{name:n,type:r,direction:i}=t,o=n.slice(0,-1)+"Entries";e.prototype[o]=function(e){if("mixed"!==r&&"mixed"!==this.type&&r!==this.type)return Nt.empty();e=""+e;const t=this._nodes.get(e);if(void 0===t)throw new Ht(`Graph.${o}: could not find the "${e}" node in the graph.`);return function(e,t,n){if("mixed"!==e){if("undirected"===e)return mn(null,n,n.undirected);if("string"==typeof t)return mn(null,n,n[t])}let r=Nt.empty();const i=new hn;return"undirected"!==e&&("out"!==t&&(r=Ft(r,mn(i,n,n.in))),"in"!==t&&(r=Ft(r,mn(i,n,n.out)))),"directed"!==e&&(r=Ft(r,mn(i,n,n.undirected))),r}("mixed"===r?this.type:r,i,t)}}(e,t)}))}(Rn);class Pn extends Rn{constructor(e){const t=Dt({type:"directed"},e);if("multi"in t&&!1!==t.multi)throw new Wt("DirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if("directed"!==t.type)throw new Wt('DirectedGraph.from: inconsistent "'+t.type+'" type in given options!');super(t)}}class Tn extends Rn{constructor(e){const t=Dt({type:"undirected"},e);if("multi"in t&&!1!==t.multi)throw new Wt("UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if("undirected"!==t.type)throw new Wt('UndirectedGraph.from: inconsistent "'+t.type+'" type in given options!');super(t)}}class Ln extends Rn{constructor(e){const t=Dt({multi:!0},e);if("multi"in t&&!0!==t.multi)throw new Wt("MultiGraph.from: inconsistent indication that the graph should be simple in given options!");super(t)}}class On extends Rn{constructor(e){const t=Dt({type:"directed",multi:!0},e);if("multi"in t&&!0!==t.multi)throw new Wt("MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if("directed"!==t.type)throw new Wt('MultiDirectedGraph.from: inconsistent "'+t.type+'" type in given options!');super(t)}}class Mn extends Rn{constructor(e){const t=Dt({type:"undirected",multi:!0},e);if("multi"in t&&!0!==t.multi)throw new Wt("MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if("undirected"!==t.type)throw new Wt('MultiUndirectedGraph.from: inconsistent "'+t.type+'" type in given options!');super(t)}}function Nn(e){e.from=function(t,n){const r=Dt({},t.options,n),i=new e(r);return i.import(t),i}}Nn(Rn),Nn(Pn),Nn(Tn),Nn(Ln),Nn(On),Nn(Mn),Rn.Graph=Rn,Rn.DirectedGraph=Pn,Rn.UndirectedGraph=Tn,Rn.MultiGraph=Ln,Rn.MultiDirectedGraph=On,Rn.MultiUndirectedGraph=Mn,Rn.InvalidArgumentsGraphError=Wt,Rn.NotFoundGraphError=Ht,Rn.UsageGraphError=Vt;var zn=i(9026);const Fn=(0,t.createContext)(null),Dn=Fn.Provider;function $n(){const e=(0,t.useContext)(Fn);if(null==e)throw new Error("No context provided: useSigmaContext() can only be used in a descendant of <SigmaContainer>");return e}function jn(){return $n().sigma}const In=["clickNode","rightClickNode","downNode","enterNode","leaveNode","doubleClickNode","wheelNode","clickEdge","rightClickEdge","downEdge","enterEdge","leaveEdge","doubleClickEdge","wheelEdge","clickStage","rightClickStage","downStage","doubleClickStage","wheelStage","beforeRender","afterRender","kill"],Gn=["click","rightClick","mouseup","mousedown","mousemove","mousemovebody","doubleClick","wheel"],Bn=["touchup","touchdown","touchmove"],Un=["updated"];function Zn(){const e=jn(),n=function(){const{sigma:e,container:n}=$n(),[r,i]=(0,t.useState)({});return(0,t.useEffect)((()=>{if(!e||!r)return;const t={};return Object.keys(r).forEach((n=>{t[n]=r[n],e.setSetting(n,r[n])})),()=>{e&&n&&n.offsetWidth>0&&n.offsetHeight>0&&Object.keys(t).forEach((n=>{e.setSetting(n,t[n])}))}}),[e,r,n]),i}(),[r,i]=(0,t.useState)({});return(0,t.useEffect)((()=>{if(!e||!r)return;const t=r,i=Object.keys(t),o={},a={},s=e.getSettings();return i.some((e=>["clickEdge","rightClickEdge","doubleClickEdge","downEdge"].includes(e)))&&!1===s.enableEdgeClickEvents&&(o.enableEdgeClickEvents=!0,a.enableEdgeClickEvents=!1),i.some((e=>["enterEdge","leaveEdge"].includes(e)))&&!1===s.enableEdgeHoverEvents&&(o.enableEdgeHoverEvents=!0,a.enableEdgeHoverEvents=!1),i.some((e=>["wheelEdge"].includes(e)))&&!1===s.enableEdgeWheelEvents&&(o.enableEdgeWheelEvents=!0,a.enableEdgeWheelEvents=!1),Object.keys(o).length>0&&n(o),i.forEach((n=>{const r=t[n];In.find((e=>e===n))&&e.on(n,r),Gn.find((e=>e===n))&&e.getMouseCaptor().on(n,r),Bn.find((e=>e===n))&&e.getTouchCaptor().on(n,r),Un.find((e=>e===n))&&e.getCamera().on(n,r)})),()=>{Object.keys(a).length>0&&n(a),e&&i.forEach((n=>{const r=t[n];In.find((e=>e===n))&&e.off(n,r),Gn.find((e=>e===n))&&e.getMouseCaptor().off(n,r),Bn.find((e=>e===n))&&e.getTouchCaptor().off(n,r),Un.find((e=>e===n))&&e.getCamera().off(n,r)}))}}),[e,r,n]),i}function Wn(e){const n=jn(),r=(0,t.useRef)();(0,Ot.isEqual)(r.current,e)||(r.current=e);const i=(0,t.useCallback)((e=>{n.getCamera().animatedZoom(Object.assign(Object.assign({},r.current),e))}),[n,r]),o=(0,t.useCallback)((e=>{n.getCamera().animatedUnzoom(Object.assign(Object.assign({},r.current),e))}),[n,r]),a=(0,t.useCallback)((e=>{n.getCamera().animatedReset(Object.assign(Object.assign({},r.current),e))}),[n,r]),s=(0,t.useCallback)(((e,t)=>{n.getCamera().animate(e,Object.assign(Object.assign({},r.current),t))}),[n,r]),u=(0,t.useCallback)(((e,t)=>{const i=n.getNodeDisplayData(e);i?n.getCamera().animate(i,Object.assign(Object.assign({},r.current),t)):console.log(`Node ${e} not found`)}),[n,r]);return{zoomIn:i,zoomOut:o,reset:a,goto:s,gotoNode:u}}const Hn=(0,t.forwardRef)((({graph:e,id:n,className:r,style:i,settings:o,children:a},s)=>{const u=(0,t.useRef)(null),l=(0,t.useRef)(null),c={className:`react-sigma ${r||""}`,id:n,style:i},[d,f]=(0,t.useState)(null),h=(0,t.useRef)({});(0,Ot.isEqual)(h.current,o)||(h.current=o||{}),(0,t.useEffect)((()=>{let t=null;if(null!==l.current){const n=e?"function"==typeof e?new e:e:new Rn;t=new zn.Sigma(n,l.current,Object.assign({allowInvalidContainer:!0},h.current)),d&&t.getCamera().setState(d.getCamera().getState())}return f(t),()=>{t&&t.kill(),f(null)}}),[l,e,h]),(0,t.useImperativeHandle)(s,(()=>d),[d]);const p=(0,t.useMemo)((()=>d&&u.current?{sigma:d,container:u.current}:null),[d,u.current]),g=null!==p?t.createElement(Dn,{value:p},a):null;return t.createElement("div",Object.assign({},c,{ref:u}),t.createElement("div",{className:"sigma-container",ref:l}),g)})),Vn=({id:e,className:n,style:r,children:i,position:o="bottom-left"})=>{const a={className:`react-sigma-controls ${n||""} ${o}`,id:e,style:r};return t.createElement("div",Object.assign({},a),i)},qn=({id:e,className:n,style:r,labels:i={}})=>{const o=jn(),a=Zn(),{gotoNode:s}=Wn(),[u,l]=(0,t.useState)(""),[c,d]=(0,t.useState)([]),[f,h]=(0,t.useState)(null),[p,g]=(0,t.useState)("");(0,t.useEffect)((()=>{g(`search-${Math.random().toString(36).slice(2)}`)}),[]),(0,t.useEffect)((()=>{const e=[];!f&&u.length>1&&o.getGraph().forEachNode(((t,n)=>{n.label&&n.label.toLowerCase().includes(u.toLowerCase())&&e.push({id:t,label:n.label})})),d(e)}),[u]),(0,t.useEffect)((()=>{a({clickStage:()=>{h(null),l("")}})}),[a]),(0,t.useEffect)((()=>{if(f)return o.getGraph().setNodeAttribute(f,"highlighted",!0),s(f),()=>{o.getGraph().setNodeAttribute(f,"highlighted",!1)}}),[f]);const m={className:`react-sigma-search ${n||""}`,id:e,style:r};return t.createElement("div",Object.assign({},m),t.createElement("label",{htmlFor:p,style:{display:"none"}},i.text||"Search a node"),t.createElement("input",{id:p,type:"text",placeholder:i.placeholder||"Search...",list:`${p}-datalist`,value:u,onChange:e=>{const t=e.target.value,n=c.find((e=>e.label===t));n?(l(n.label),d([]),h(n.id)):(h(null),l(t))}}),t.createElement("datalist",{id:`${p}-datalist`},c.map((e=>t.createElement("option",{key:e.id,value:e.label},e.label)))))};var Kn=i(3289),Yn=i(4361),Qn=i(2307),Xn=i(1458),Jn=i(5343),er=i(6235),tr=i(1796),nr=i(3731),rr=i(314),ir=i(3511);function or(e,t){return or=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},or(e,t)}const ar=t.createContext(null);function sr(e,n){var r=Object.create(null);return e&&t.Children.map(e,(function(e){return e})).forEach((function(e){r[e.key]=function(e){return n&&(0,t.isValidElement)(e)?n(e):e}(e)})),r}function ur(e,t,n){return null!=n[t]?n[t]:e.props[t]}function lr(e,n,r){var i=sr(e.children),o=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,i=Object.create(null),o=[];for(var a in e)a in t?o.length&&(i[a]=o,o=[]):o.push(a);var s={};for(var u in t){if(i[u])for(r=0;r<i[u].length;r++){var l=i[u][r];s[i[u][r]]=n(l)}s[u]=n(u)}for(r=0;r<o.length;r++)s[o[r]]=n(o[r]);return s}(n,i);return Object.keys(o).forEach((function(a){var s=o[a];if((0,t.isValidElement)(s)){var u=a in n,l=a in i,c=n[a],d=(0,t.isValidElement)(c)&&!c.props.in;!l||u&&!d?l||!u||d?l&&u&&(0,t.isValidElement)(c)&&(o[a]=(0,t.cloneElement)(s,{onExited:r.bind(null,s),in:c.props.in,exit:ur(s,"exit",e),enter:ur(s,"enter",e)})):o[a]=(0,t.cloneElement)(s,{in:!1}):o[a]=(0,t.cloneElement)(s,{onExited:r.bind(null,s),in:!0,exit:ur(s,"exit",e),enter:ur(s,"enter",e)})}})),o}var cr=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},dr=function(e){var n,r;function i(t,n){var r,i=(r=e.call(this,t,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:i,firstRender:!0},r}r=e,(n=i).prototype=Object.create(r.prototype),n.prototype.constructor=n,or(n,r);var o=i.prototype;return o.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},o.componentWillUnmount=function(){this.mounted=!1},i.getDerivedStateFromProps=function(e,n){var r,i,o=n.children,a=n.handleExited;return{children:n.firstRender?(r=e,i=a,sr(r.children,(function(e){return(0,t.cloneElement)(e,{onExited:i.bind(null,e),in:!0,appear:ur(e,"appear",r),enter:ur(e,"enter",r),exit:ur(e,"exit",r)})}))):lr(e,o,a),firstRender:!1}},o.handleExited=function(e,t){var n=sr(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=(0,xe.Z)({},t.children);return delete n[e.key],{children:n}})))},o.render=function(){var e=this.props,n=e.component,r=e.childFactory,i=(0,ke.Z)(e,["component","childFactory"]),o=this.state.contextValue,a=cr(this.state.children).map(r);return delete i.appear,delete i.enter,delete i.exit,null===n?t.createElement(ar.Provider,{value:o},a):t.createElement(ar.Provider,{value:o},t.createElement(n,i,a))},i}(t.Component);dr.propTypes={},dr.defaultProps={component:"div",childFactory:function(e){return e}};const fr=dr,hr=(0,it.Z)("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),pr=["center","classes","className"];let gr,mr,yr,vr,br=e=>e;const wr=pt(gr||(gr=br`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),_r=pt(mr||(mr=br`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),xr=pt(yr||(yr=br`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),kr=(0,Je.ZP)("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),Er=(0,Je.ZP)((function(e){const{className:n,classes:r,pulsate:i=!1,rippleX:o,rippleY:a,rippleSize:s,in:u,onExited:l,timeout:c}=e,[d,f]=t.useState(!1),h=(0,Ee.Z)(n,r.ripple,r.rippleVisible,i&&r.ripplePulsate),p={width:s,height:s,top:-s/2+a,left:-s/2+o},g=(0,Ee.Z)(r.child,d&&r.childLeaving,i&&r.childPulsate);return u||d||f(!0),t.useEffect((()=>{if(!u&&null!=l){const e=setTimeout(l,c);return()=>{clearTimeout(e)}}}),[l,u,c]),(0,Oe.jsx)("span",{className:h,style:p,children:(0,Oe.jsx)("span",{className:g})})}),{name:"MuiTouchRipple",slot:"Ripple"})(vr||(vr=br`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),hr.rippleVisible,wr,550,(({theme:e})=>e.transitions.easing.easeInOut),hr.ripplePulsate,(({theme:e})=>e.transitions.duration.shorter),hr.child,hr.childLeaving,_r,550,(({theme:e})=>e.transitions.easing.easeInOut),hr.childPulsate,xr,(({theme:e})=>e.transitions.easing.easeInOut)),Sr=t.forwardRef((function(e,n){const r=(0,et.Z)({props:e,name:"MuiTouchRipple"}),{center:i=!1,classes:o={},className:a}=r,s=(0,ke.Z)(r,pr),[u,l]=t.useState([]),c=t.useRef(0),d=t.useRef(null);t.useEffect((()=>{d.current&&(d.current(),d.current=null)}),[u]);const f=t.useRef(!1),h=t.useRef(0),p=t.useRef(null),g=t.useRef(null);t.useEffect((()=>()=>{h.current&&clearTimeout(h.current)}),[]);const m=t.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:i,cb:a}=e;l((e=>[...e,(0,Oe.jsx)(Er,{classes:{ripple:(0,Ee.Z)(o.ripple,hr.ripple),rippleVisible:(0,Ee.Z)(o.rippleVisible,hr.rippleVisible),ripplePulsate:(0,Ee.Z)(o.ripplePulsate,hr.ripplePulsate),child:(0,Ee.Z)(o.child,hr.child),childLeaving:(0,Ee.Z)(o.childLeaving,hr.childLeaving),childPulsate:(0,Ee.Z)(o.childPulsate,hr.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:i},c.current)])),c.current+=1,d.current=a}),[o]),y=t.useCallback(((e={},t={},n=(()=>{}))=>{const{pulsate:r=!1,center:o=i||t.pulsate,fakeElement:a=!1}=t;if("mousedown"===(null==e?void 0:e.type)&&f.current)return void(f.current=!1);"touchstart"===(null==e?void 0:e.type)&&(f.current=!0);const s=a?null:g.current,u=s?s.getBoundingClientRect():{width:0,height:0,left:0,top:0};let l,c,d;if(o||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)l=Math.round(u.width/2),c=Math.round(u.height/2);else{const{clientX:t,clientY:n}=e.touches&&e.touches.length>0?e.touches[0]:e;l=Math.round(t-u.left),c=Math.round(n-u.top)}if(o)d=Math.sqrt((2*u.width**2+u.height**2)/3),d%2==0&&(d+=1);else{const e=2*Math.max(Math.abs((s?s.clientWidth:0)-l),l)+2,t=2*Math.max(Math.abs((s?s.clientHeight:0)-c),c)+2;d=Math.sqrt(e**2+t**2)}null!=e&&e.touches?null===p.current&&(p.current=()=>{m({pulsate:r,rippleX:l,rippleY:c,rippleSize:d,cb:n})},h.current=setTimeout((()=>{p.current&&(p.current(),p.current=null)}),80)):m({pulsate:r,rippleX:l,rippleY:c,rippleSize:d,cb:n})}),[i,m]),v=t.useCallback((()=>{y({},{pulsate:!0})}),[y]),b=t.useCallback(((e,t)=>{if(clearTimeout(h.current),"touchend"===(null==e?void 0:e.type)&&p.current)return p.current(),p.current=null,void(h.current=setTimeout((()=>{b(e,t)})));p.current=null,l((e=>e.length>0?e.slice(1):e)),d.current=t}),[]);return t.useImperativeHandle(n,(()=>({pulsate:v,start:y,stop:b})),[v,y,b]),(0,Oe.jsx)(kr,(0,xe.Z)({className:(0,Ee.Z)(hr.root,o.root,a),ref:g},s,{children:(0,Oe.jsx)(fr,{component:null,exit:!0,children:u})}))})),Cr=Sr;function Ar(e){return(0,Ge.Z)("MuiButtonBase",e)}const Rr=(0,it.Z)("MuiButtonBase",["root","disabled","focusVisible"]),Pr=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],Tr=(0,Je.ZP)("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${Rr.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),Lr=t.forwardRef((function(e,n){const r=(0,et.Z)({props:e,name:"MuiButtonBase"}),{action:i,centerRipple:o=!1,children:a,className:s,component:u="button",disabled:l=!1,disableRipple:c=!1,disableTouchRipple:d=!1,focusRipple:f=!1,LinkComponent:h="a",onBlur:p,onClick:g,onContextMenu:m,onDragLeave:y,onFocus:v,onFocusVisible:b,onKeyDown:w,onKeyUp:_,onMouseDown:x,onMouseLeave:k,onMouseUp:E,onTouchEnd:S,onTouchMove:C,onTouchStart:A,tabIndex:R=0,TouchRippleProps:P,touchRippleRef:T,type:L}=r,O=(0,ke.Z)(r,Pr),M=t.useRef(null),N=t.useRef(null),z=(0,nr.Z)(N,T),{isFocusVisibleRef:F,onFocus:D,onBlur:$,ref:j}=(0,ir.Z)(),[I,G]=t.useState(!1);l&&I&&G(!1),t.useImperativeHandle(i,(()=>({focusVisible:()=>{G(!0),M.current.focus()}})),[]);const[B,U]=t.useState(!1);t.useEffect((()=>{U(!0)}),[]);const Z=B&&!c&&!l;function W(e,t,n=d){return(0,rr.Z)((r=>(t&&t(r),!n&&N.current&&N.current[e](r),!0)))}t.useEffect((()=>{I&&f&&!c&&B&&N.current.pulsate()}),[c,f,I,B]);const H=W("start",x),V=W("stop",m),q=W("stop",y),K=W("stop",E),Y=W("stop",(e=>{I&&e.preventDefault(),k&&k(e)})),Q=W("start",A),X=W("stop",S),J=W("stop",C),ee=W("stop",(e=>{$(e),!1===F.current&&G(!1),p&&p(e)}),!1),te=(0,rr.Z)((e=>{M.current||(M.current=e.currentTarget),D(e),!0===F.current&&(G(!0),b&&b(e)),v&&v(e)})),ne=()=>{const e=M.current;return u&&"button"!==u&&!("A"===e.tagName&&e.href)},re=t.useRef(!1),ie=(0,rr.Z)((e=>{f&&!re.current&&I&&N.current&&" "===e.key&&(re.current=!0,N.current.stop(e,(()=>{N.current.start(e)}))),e.target===e.currentTarget&&ne()&&" "===e.key&&e.preventDefault(),w&&w(e),e.target===e.currentTarget&&ne()&&"Enter"===e.key&&!l&&(e.preventDefault(),g&&g(e))})),oe=(0,rr.Z)((e=>{f&&" "===e.key&&N.current&&I&&!e.defaultPrevented&&(re.current=!1,N.current.stop(e,(()=>{N.current.pulsate(e)}))),_&&_(e),g&&e.target===e.currentTarget&&ne()&&" "===e.key&&!e.defaultPrevented&&g(e)}));let ae=u;"button"===ae&&(O.href||O.to)&&(ae=h);const se={};"button"===ae?(se.type=void 0===L?"button":L,se.disabled=l):(O.href||O.to||(se.role="button"),l&&(se["aria-disabled"]=l));const ue=(0,nr.Z)(n,j,M),le=(0,xe.Z)({},r,{centerRipple:o,component:u,disabled:l,disableRipple:c,disableTouchRipple:d,focusRipple:f,tabIndex:R,focusVisible:I}),ce=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:i}=e,o={root:["root",t&&"disabled",n&&"focusVisible"]},a=(0,Ie.Z)(o,Ar,i);return n&&r&&(a.root+=` ${r}`),a})(le);return(0,Oe.jsxs)(Tr,(0,xe.Z)({as:ae,className:(0,Ee.Z)(ce.root,s),ownerState:le,onBlur:ee,onClick:g,onContextMenu:V,onFocus:te,onKeyDown:ie,onKeyUp:oe,onMouseDown:H,onMouseLeave:Y,onMouseUp:K,onDragLeave:q,onTouchEnd:X,onTouchMove:J,onTouchStart:Q,ref:ue,tabIndex:l?-1:R,type:L},se,O,{children:[a,Z?(0,Oe.jsx)(Cr,(0,xe.Z)({ref:z,center:o},P)):null]}))}));function Or(e){return(0,Ge.Z)("MuiIconButton",e)}const Mr=(0,it.Z)("MuiIconButton",["root","disabled","colorInherit","colorPrimary","colorSecondary","colorError","colorInfo","colorSuccess","colorWarning","edgeStart","edgeEnd","sizeSmall","sizeMedium","sizeLarge"]),Nr=["edge","children","className","color","disabled","disableFocusRipple","size"],zr=(0,Je.ZP)(Lr,{name:"MuiIconButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"default"!==n.color&&t[`color${(0,rt.Z)(n.color)}`],n.edge&&t[`edge${(0,rt.Z)(n.edge)}`],t[`size${(0,rt.Z)(n.size)}`]]}})((({theme:e,ownerState:t})=>(0,xe.Z)({textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:8,borderRadius:"50%",overflow:"visible",color:(e.vars||e).palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest})},!t.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,tr.Fq)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"start"===t.edge&&{marginLeft:"small"===t.size?-3:-12},"end"===t.edge&&{marginRight:"small"===t.size?-3:-12})),(({theme:e,ownerState:t})=>{var n;const r=null==(n=(e.vars||e).palette)?void 0:n[t.color];return(0,xe.Z)({},"inherit"===t.color&&{color:"inherit"},"inherit"!==t.color&&"default"!==t.color&&(0,xe.Z)({color:null==r?void 0:r.main},!t.disableRipple&&{"&:hover":(0,xe.Z)({},r&&{backgroundColor:e.vars?`rgba(${r.mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,tr.Fq)(r.main,e.palette.action.hoverOpacity)},{"@media (hover: none)":{backgroundColor:"transparent"}})}),"small"===t.size&&{padding:5,fontSize:e.typography.pxToRem(18)},"large"===t.size&&{padding:12,fontSize:e.typography.pxToRem(28)},{[`&.${Mr.disabled}`]:{backgroundColor:"transparent",color:(e.vars||e).palette.action.disabled}})})),Fr=t.forwardRef((function(e,t){const n=(0,et.Z)({props:e,name:"MuiIconButton"}),{edge:r=!1,children:i,className:o,color:a="default",disabled:s=!1,disableFocusRipple:u=!1,size:l="medium"}=n,c=(0,ke.Z)(n,Nr),d=(0,xe.Z)({},n,{edge:r,color:a,disabled:s,disableFocusRipple:u,size:l}),f=(e=>{const{classes:t,disabled:n,color:r,edge:i,size:o}=e,a={root:["root",n&&"disabled","default"!==r&&`color${(0,rt.Z)(r)}`,i&&`edge${(0,rt.Z)(i)}`,`size${(0,rt.Z)(o)}`]};return(0,Ie.Z)(a,Or,t)})(d);return(0,Oe.jsx)(zr,(0,xe.Z)({className:(0,Ee.Z)(f.root,o),centerRipple:!0,focusRipple:!u,disabled:s,ref:t,ownerState:d},c,{children:i}))}));var Dr=i(2810),$r={};function jr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ir(e){var n,r,i=e.graph,o=(n=(0,t.useState)(null),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,s=[],u=!0,l=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);u=!0);}catch(e){l=!0,i=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw i}}return s}}(n,r)||function(e,t){if(e){if("string"==typeof e)return jr(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?jr(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[0],s=o[1],u=Zn();return(0,t.useEffect)((function(){u({clickNode:function(e){return s(e.node)},enterNode:function(e){return s(e.node)},leaveNode:function(){return s(null)},clickStage:function(){return s(null)}})}),[u]),null===a?t.createElement("div",{className:"info"},t.createElement("h4",null,"Twitch Chat Atlas ",t.createElement("br",null)," 22-28 July 2023"),t.createElement("a",{href:"https://www.twitch.tv/connoreatspants",target:"_blank",rel:"noreferrer",title:"W Streamer"},"twitch.tv/connoreatspants"),t.createElement("p",null,i.nodes().length," total chatters")):t.createElement("div",{className:"info"},t.createElement("h4",null,i.getNodeAttribute(a,"label")),t.createElement("p",null,i.getNodeAttribute(a,0)," total messages"))}function Gr(e){var n=e.graph,r=function(e){const n=$n(),[r,i]=(0,t.useState)(!1),[o,a]=(0,t.useState)(e||n.container),s=()=>i((e=>!e));return(0,t.useEffect)((()=>(document.addEventListener("fullscreenchange",s),()=>document.removeEventListener("fullscreenchange",s))),[s]),(0,t.useEffect)((()=>{a(e||n.container)}),[e,n.container]),{toggle:(0,t.useCallback)((()=>{var e;e=o,document.fullscreenElement!==e?e.requestFullscreen():document.exitFullscreen&&document.exitFullscreen()}),[o]),isFullScreen:r}}(),i=r.isFullScreen,o=r.toggle,a=Wn().reset,s=U();return t.createElement(t.Fragment,null,i?null:t.createElement(Vn,{position:"top-left"},t.createElement(qn,{style:{width:"150px"}})),t.createElement(Vn,{position:"top-right"},t.createElement(Ir,{graph:n})),t.createElement(Vn,{position:"bottom-right"},t.createElement("div",{className:"react-sigma-control"},t.createElement(Fr,{onClick:function(){window.location.hash="/"},title:"Atlas Mode"},t.createElement(Kn.Z,{style:{marginTop:"2px"}}))),t.createElement("div",{className:"react-sigma-control"},t.createElement(Fr,{onClick:function(){"#/yifan"!==s&&(window.location.hash="/yifan")},title:"Flare Mode"},t.createElement(Xn.Z,{style:{marginTop:"2px"}}))),t.createElement("div",{className:"react-sigma-control"},t.createElement(Fr,{onClick:function(){"#/reingold"!==s&&(window.location.hash="/reingold")},title:"Orb Mode"},t.createElement(Qn.Z,{style:{marginTop:"2px"}}))),t.createElement("div",{className:"react-sigma-control"}),t.createElement("div",{className:"react-sigma-control","aria-label":"reset"},t.createElement(Fr,{onClick:a,title:"Reset Zoom"},t.createElement(Yn.Z,{style:{marginTop:"2px"}}))),t.createElement("div",{className:"react-sigma-control"},t.createElement(Fr,{onClick:o,"aria-label":"full-screen",title:"Full Screen"},i?t.createElement(er.Z,{style:{marginTop:"2px"}}):t.createElement(Jn.Z,{style:{marginTop:"2px"}})))))}function Br(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,s=[],u=!0,l=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);u=!0);}catch(e){l=!0,i=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw i}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ur(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ur(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ur(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}$r.styleTagTransform=be(),$r.setAttributes=ge(),$r.insert=he().bind(null,"head"),$r.domAPI=de(),$r.insertStyleElement=ye(),le()(Dr.Z,$r),Dr.Z&&Dr.Z.locals&&Dr.Z.locals;var Zr=function(e){var t=new Rn;return t.import(e),t.forEachEdge((function(e,n,r,i,o,a){var s=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.5,r=Br(e.match(/\w\w/g).map((function(e){return parseInt(e,16)})),3),i=r[0],o=r[1],a=r[2],s=Br(t.match(/\w\w/g).map((function(e){return parseInt(e,16)})),3),u=s[0],l=s[1],c=s[2],d=Math.round(i+(u-i)*n).toString(16).padStart(2,"0"),f=Math.round(o+(l-o)*n).toString(16).padStart(2,"0"),h=Math.round(a+(c-a)*n).toString(16).padStart(2,"0");return"#".concat(d).concat(f).concat(h)}(o.color,a.color),u=function(e,t){var n=e.replace("#",""),r=parseInt(n,16),i=50+(r>>16);i=Math.min(Math.max(i,0),255);var o=50+(255&r);o=Math.min(Math.max(o,0),255);var a=50+(r>>8&255);return a=Math.min(Math.max(a,0),255),"#".concat((o|a<<8|i<<16).toString(16))}(s);t.updateEdgeAttribute(e,"color",(function(){return u}))})),t};function Wr(e){var n=e.graphData,r=Zr(n);return t.createElement(Hn,{graph:r,settings:{labelRenderedSizeThreshold:1}},t.createElement(Gr,{graph:r}))}function Hr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,s=[],u=!0,l=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);u=!0);}catch(e){l=!0,i=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw i}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Vr(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Vr(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Vr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function qr(e){var n=e.graphPath,r=Hr((0,t.useState)({}),2),i=r[0],o=r[1],a=Hr((0,t.useState)(!0),2),s=a[0],u=a[1],l=Hr((0,t.useState)(null),2),c=l[0],d=l[1];return(0,t.useEffect)((function(){u(!0),fetch(n).then((function(e){return e.json()})).then((function(e){o(e),u(!1)})).catch((function(e){console.log("Error loading graph:",e),d(e)}))}),[n]),null!==c?t.createElement(dt,{graphError:c}):s?t.createElement(Pt,null):t.createElement(Wr,{graphData:i})}function Kr(){return t.createElement(ne,null,t.createElement(ee,{path:"reingold",element:t.createElement(qr,{graphPath:"data-reingold.json"})}),t.createElement(ee,{path:"yifan",element:t.createElement(qr,{graphPath:"data-yifan-hu.json"})}),t.createElement(ee,{path:"*",element:t.createElement(qr,{graphPath:"data-force-atlas.json"})}))}var Yr=document.getElementById("root");(0,r.s)(Yr).render(t.createElement(oe,null,t.createElement(Kr,null)))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,